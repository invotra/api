openapi: 3.0.0
servers:
  - url: 'https://dev.invotra.com/api/0.3'
info:
  title: InvotraAPI
  description: In general most fields are optional for update (PUT) requests; you can leave them blank (pass an empty string / array / whatever as appropriate) to clear them, or omit the key to leave them unchanged.
  version: '0.3'
security:
  - SessionCookieHeader: []
  - APIKeyHeader: []
paths:
  /status:
    get:
      tags:
        - status
      security: [] # no authentication
      responses:
        '200':
          description: Status returned successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status-schema'
      description: 'Returns the status of the Invotra API. If successful, the API is running as expected and will return the "OK" response that includes the server time. (If it is not, an appropriate 5xx error message will be returned).'
  /branding:
    get:
      tags:
        - configuration
      security: [] # no authentication
      responses:
        '200':
          description: Branding returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/branding-schema'
      description: Returns the branding for an instance of Invotra.
  /product_options:
    get:
      tags:
        - configuration
      responses:
        '200':
          description: Product options returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/product-options-schema'
      description: Returns the product options for an instance of Invotra.
  /configuration:
    get:
      tags:
        - configuration
      responses:
        '200':
          description: Configuration returned. Any configuration that the user does not have access to view is omitted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/configuration-schema'
  /entities/path-lookup:
    get:
      tags:
        - entities
      summary: Look up information about an entity based on its URL path.
      parameters:
        - description: The (Drupal) URL path of the entity to look up. Include the leading slash.
          in: query
          name: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Entity found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/entity-lookup-schema'
        '400':
          description: Path not provided or malformed.
        '403':
          description: User is not authorized to perform the lookup (e.g. they are unauthenticated and anonymous content access is disabled), or does not have access to the entity that was found (e.g. it is a private group and the user is not a member).
        '404':
          description: No matching entity was found for the given path.
  /sessions/token:
    get:
      tags:
        - sessions
      description: Returns a CSRF token.
      security:
        - SessionCookieHeader: [] # only allow cookie for csrf token exchange, not api key
      responses:
        '200':
          description: Returns a CSRF token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/csrf-token-schema'
    post:
      tags:
        - sessions
      description: Exchange a temporary single-use token for a valid user session and CSRF token. This is intended for use by mobile apps.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/auth-token-schema'
        required: true
      security: [] # no authentication
      responses:
        '200':
          description: A valid token was exchanged for a valid session.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/csrf-token-schema'
          headers:
            Set-Cookie:
              description: A valid session cookie.
              schema:
                type: string
                example: 'SSESS{name}={id}'
        '400':
          description: The JSON was malformed.
        '401':
          description: The token was not valid.
        '422':
          description: The JSON did not match the schema.
  /sessions/login:
    post:
      tags:
        - sessions
      description: Login a user. Use this endpoint if you are authenticating with an individual user rather than an API Key. The session cookie returned in the header should be used for subsequent requests.
      security: [] # no authentication
      responses:
        '200':
          description: Successfully logged in a user.
          headers:
            Set-Cookie:
              description: A valid session cookie.
              schema:
                type: string
                example: 'SSESS{name}={id}'
        '401':
          description: Access denied
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/session-schema'
        required: true
  /sessions/logout:
    post:
      tags:
        - sessions
      description: Logout the user.
      security:
        - SessionCookieHeader: [] # only allow cookie for logout, not api key
      responses:
        '200':
          description: Successfully logged user out.
  /pdf-export/close-job:
    post:
      tags:
        - pdf export
      description: PDF export render completion callback.
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
               - $ref: '#/components/schemas/pdf-export-completion-schema'
               - $ref: '#/components/schemas/pdf-export-error-schema'
      security:
        - BearerAuth: []
      responses:
        '200':
          description: A matching PDF export job was found.
        '401':
          description: An incorrect or malformed token was provided.
        '404':
          description: A file was not found at the supplied S3 URL.
  /teams:
    get:
      tags:
        - teams
      parameters:
        - description: Filter by external ID.
          in: query
          name: external_id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of teams matching the filter criteria.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/uuid-list-schema'
      description: Search for teams. An empty array is returned if no teams are found.
    post:
      tags:
        - teams
      responses:
        '201':
          description: The team was created successfully.
          headers:
            Location:
              description: |
                The URL at which the newly provisioned team may be retrieved.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/successful-post-response-with-message-schema'
        '400':
          description: The team was not saved due to malformed JSON.
        '422':
          description: |
            The team was not saved due to Drupal validation failure or JSON
            schema validation failure.
      description: Provision a new team.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/team-schema-create'
        required: true
  /teams/list:
    get:
      tags:
        - teams
      parameters:
        - name: label
          description: Filter by label. Matches on whole words.
          in: query
          schema:
            type: string
        - name: autocomplete
          description: Autocomplete term. Matches on team name, per letter, from the start of the word.
          in: query
          schema:
            type: string
        - name: users_fulltext_search
          description: Filter the list of teams to those that include users matching a search term. This is useful when you have already searched for users and want to refine your search by team (like a faceted search). Like the fulltext_search parameter of /users/search, this matches on whole words.
          in: query
          schema:
            type: string
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
      responses:
        '200':
          description: List of teams matching the filter criteria.
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    description: Count of results.
                    type: integer
                    example: 50
                  results:
                    description: The results set.
                    allOf:
                      - $ref: '#/components/schemas/team-list-schema'
      description: Search for teams. An empty array is returned if no teams are found.
  '/teams/{team_id}':
    parameters:
      - description: The Invotra UUID of the team.
        in: path
        name: team_id
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - teams
      responses:
        '200':
          description: Returns a single complete Team object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/team-schema'
        '400':
          description: The supplied UUID was malformed.
        '404':
          description: The UUID does not correspond to an existing team.
      description: Get information about the team.
    put:
      tags:
        - teams
      responses:
        '200':
          description: The team information was updated successfully.
        '400':
          description: The supplied UUID or JSON was malformed.
        '404':
          description: The UUID does not correspond to an existing team.
        '422':
          description: |
            The team was not updated due to a Drupal validation failure or a
            JSON schema validation failure.
      description: Update team information.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/team-schema'
        required: true
    delete:
      tags:
        - teams
      description: Remove team information
      responses:
        '200':
          description: The team information was removed successfully.
        '400':
          description: The supplied UUID or JSON was malformed.
        '403':
          description: The user does not have permission to remove this team.
        '404':
          description: The UUID does not correspond to an existing team.
  '/teams/{team_id}/memberships':
    parameters:
      - description: The Invotra UUID of the team.
        in: path
        name: team_id
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - teams
      parameters:
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
      responses:
        '200':
          description: |
            List of team members. If there are no members, an empty array.
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    description: Count of results.
                    type: integer
                    example: 50
                  results:
                    description: The results set.
                    type: array
                    items:
                      $ref: '#/components/schemas/team-team-membership-schema'
        '400':
          description: The supplied UUID was malformed.
        '404':
          description: The UUID does not correspond to an existing team.
      description: Get a list of team members.
  '/teams/{team_id}/memberships/{user_id}':
    parameters:
      - description: The Invotra UUID of the team.
        in: path
        name: team_id
        required: true
        schema:
          type: string
          format: uuid
      - description: The Invotra UUID of the user.
        in: path
        name: user_id
        required: true
        schema:
          type: string
          format: uuid
    delete:
      tags:
        - teams
      responses:
        '200':
          description: The user has been removed from the team.
        '400':
          description: The UUID was malformed.
        '404':
          description: |
            The user or team does not exist, or the user was not a member
            of the team.
      description: Remove the user's membership of the team.
    put:
      tags:
        - teams
      responses:
        '200':
          description: The user's membership of this team was updated.
        '201':
          description: The user was added as a member of the team.
        '400':
          description: The UUID was malformed or the role type was invalid.
        '404':
          description: The user or team does not exist.
      description: Update information about a user's team membership.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/team-membership-common-schema'
        required: true
  /users:
    get:
      tags:
        - users
      parameters:
        - description: Filter by external ID.
          in: query
          name: external_id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: |
            List of users matching the filter criteria, or an empty array if no
            matching users are found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/uuid-list-schema'
      description: Search for users. Returns list of uuids.
    post:
      tags:
        - users
      responses:
        '201':
          description: The user was created successfully.
          headers:
            Location:
              description: |
                The URL at which the newly provisioned user may be retrieved.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/successful-post-response-schema'
        '400':
          description: The user was not saved due to malformed JSON.
        '403':
          description: 'The user was not saved due to a non-webmaster attempting to set an authname value.'
        '409':
          description: |
            The user was not saved because the username or email address is
            already in use.
        '422':
          description: |
            The user was not saved due to Drupal validation failure (other than
            a duplicate username or email address) or JSON schema validation
            failure.
      description: Provision a new user in Invotra.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/user-schema-create'
        required: true
  /users/metrics/accessed:
    get:
      tags:
        - users
      parameters:
        - description: 'Filter by calendar month. Format: YYYY-MM'
          in: query
          name: month
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'Count of users returned.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user-metrics-accessed-schema'
        '403':
          description: 'User is not authorized to view this.'
      description: Returns a count of users who accessed the site on 4 or more days within a given calendar month.
  /users/metrics/profiles:
    get:
      tags:
        - users
      responses:
        '200':
          description: 'Counts of user profiles matching various conditions.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user-metrics-profiles-schema'
        '403':
          description: 'User is not authorized to view this.'
      description: Returns the total count of active users (i.e. not blocked) profiles matching various conditions.
  /users/search:
    get:
      tags:
        - users
      parameters:
        - description: Search term. Matches on whole words.
          in: query
          name: fulltext_search
          schema:
            type: string
        - description: Filter by team.
          in: query
          name: team
          schema:
            type: string
            format: uuid
        - description: Filter by location.
          in: query
          name: location
          schema:
            type: string
            format: uuid
        - description: Filter by group.
          in: query
          name: group
          schema:
            type: string
            format: uuid
        - description: Field to sort by
          in: query
          name: sort
          schema:
            type: string
            enum:
              - firstname
              - surname
              - updated
              - relevance
            default: relevance
        - description: Sort order
          in: query
          name: order
          schema:
            type: string
            enum:
              - asc
              - desc
            default: desc
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
      responses:
        '200':
          description: List of users matching the filter criteria.
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    description: Count of results.
                    type: integer
                    example: 50
                  results:
                    description: The results set.
                    type: array
                    items:
                      $ref: '#/components/schemas/user-search-schema'
        '403':
          description: Access denied. This may occur if you try to filter by a private or secret group that you are not a member of.
    description: Search for users. Returns user snippets. If there are no result, an empty array is returned.
  /users/mention:
    get:
      tags:
        - users
      summary: Autocomplete names and email addresses for @-mentioning.
      description: Autocomplete names and email addresses for @-mentioning. The text parameter matches against the start of the user's full name (forename surname or surname forename) or email address. Full user objects are returned. The list may optionally be filtered by group to show only members of the group, to allow completing only users that can be mentioned when composing a group post. You can not filter by members of a private or secret group unless you are a member yourself. Webmasters can always be mentioned, so they are always matched even if they are not members of the group being filtered. Redacted users are never matched.
      parameters:
        - name: text
          in: query
          schema:
            type: string
          description: Text to match against the start of the user's full name or email address.
          required: true
        - name: group
          in: query
          schema:
            type: string
            format: uuid
          description: UUID of the group to filter by.
        - $ref: '#/components/parameters/limitParam'
      responses:
        '200':
          description: List of matching users, or an empty array if none match.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/user-search-schema'
        '404':
          description: A group UUID was supplied but no existing group matches.
        '403':
          description: A group UUID was supplied but the group is a private or secret group and the user making the request is not a member.
        '400':
          description: A malformed group UUID was supplied.
  /users/me:
    get:
      tags:
        - users
      responses:
        '200':
          description: Returns the current user's UUID.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user-schema'
        '404':
          description: Current user was not found.
      description: Get the current user's information.
  '/users/{user_id}':
    parameters:
      - description: The Invotra UUID of the user.
        in: path
        name: user_id
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - users
      responses:
        '200':
          description: Returns a single complete user object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user-schema'
        '400':
          description: The supplied UUID was malformed.
        '404':
          description: No user with that UUID was found.
      description: Get the user's information.
    put:
      tags:
        - users
      responses:
        '200':
          description: The user's information was updated.
        '400':
          description: The supplied UUID or JSON was malformed.
        '404':
          description: The UUID does not correspond to an existing user.
        '409':
          description: |
            The user was not saved because the requested new username or email
            address is already in use by a different user.
        '422':
          description: |
            The user was not updated due to Drupal validation failure (other
            than a duplicate username or email address) or JSON schema
            validation failure.
      description: Update the user's information.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/user-schema-update'
        required: true
  '/users/{user_id}/activity':
    parameters:
      - in: path
        name: user_id
        description: The Invotra UUID of the user.
        required: true
        schema:
          type: string
    get:
      tags:
        - users
      description: Return the user's activity feed.
      parameters:
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
        - in: query
          description: Filter the feed for the mobile app. Returns only group related messages.
          name: app_feeds_only
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: >
            Activity feed returned successfully. An empty array is returned if
            there are no results.
          content:
            application/json:
              schema:
                type: object
                required:
                  - count
                  - results
                properties:
                  count:
                    description: Count of results.
                    type: integer
                    example: 50
                  results:
                    description: The results set.
                    type: array
                    items:
                      $ref: '#/components/schemas/feed-schema'
        '400':
          description: The supplied UUID was malformed.
        '404':
          description: The UUID does not correspond to an existing user.
  '/users/{user_id}/job_roles':
    parameters:
      - in: path
        name: user_id
        description: The Invotra UUID of the user.
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - users
      description: List the user's job roles.
      parameters:
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
      responses:
        '200':
          description: >
            List of job roles associated with the user, or an empty array if the
            user has no job roles.
          content:
            application/json:
              schema:
                type: object
                required:
                  - count
                  - results
                properties:
                  count:
                    description: Count of results.
                    type: integer
                    example: 50
                  results:
                    description: The results set.
                    allOf:
                      - $ref: '#/components/schemas/uuid-list-schema'
        '400':
          description: The supplied UUID was malformed.
        '404':
          description: The UUID does not correspond to an existing user.
  '/users/{user_id}/job_roles/{job_role_id}':
    parameters:
      - description: The Invotra UUID of the user.
        in: path
        name: user_id
        required: true
        schema:
          type: string
          format: uuid
      - description: The Invotra UUID of the job role.
        in: path
        name: job_role_id
        required: true
        schema:
          type: string
          format: uuid
    delete:
      tags:
        - users
      description: Remove a job role from a user.
      responses:
        '200':
          description: The job role has been removed from the user.
        '400':
          description: One or both of the UUIDs was malformed.
        '404':
          description: >
            The user or job role does not exist, or the user did not have that
            job role.
    put:
      tags:
        - users
      description: Add a job role to a user.
      responses:
        '200':
          description: The user already has this job role.
        '201':
          description: The job role was added to the user.
        '400':
          description: One or both of the UUIDs was malformed.
        '404':
          description: The user or job role does not exist.
  '/users/{user_id}/locations':
    parameters:
      - in: path
        name: user_id
        description: The Invotra UUID of the user.
        required: true
        schema:
          type: string
    get:
      tags:
        - users
      description: List the user's locations.
      parameters:
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
      responses:
        '200':
          description: >
            List of locations associated with the user, or an empty array if the
            user has no locations.
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    description: Count of results.
                    type: integer
                    example: 50
                  results:
                    description: The results set.
                    allOf:
                      - $ref: '#/components/schemas/location-uuid-list-schema'
        '400':
          description: The supplied UUID was malformed.
        '404':
          description: The UUID does not correspond to an existing user.
  '/users/{user_id}/locations/{location_id}':
    parameters:
      - description: The Invotra UUID of the user.
        in: path
        name: user_id
        required: true
        schema:
          type: string
          format: uuid
      - description: The Invotra UUID of the location.
        in: path
        name: location_id
        required: true
        schema:
          type: string
          format: uuid
    delete:
      tags:
        - users
      description: Remove a location from a user.
      responses:
        '200':
          description: The location has been removed from the user.
        '400':
          description: One or both of the UUIDs was malformed.
        '404':
          description: >
            The user or location does not exist, or the user did not have that
            location.
    put:
      tags:
        - users
      description: Add a location to a user.
      responses:
        '200':
          description: The user already has this location.
        '201':
          description: The location was added to the user.
        '400':
          description: One or both of the UUIDs was malformed.
        '404':
          description: The user or location does not exist.
  '/users/{user_id}/teams':
    parameters:
      - in: path
        name: user_id
        description: The Invotra UUID of the user.
        required: true
        schema:
          type: string
    get:
      tags:
        - users
      description: List a user's teams
      parameters:
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
      responses:
        '200':
          description: >
            List of teams of which the user is a member, indicating the
            membership type (admin or member) for each team. If the user is not
            a member of any teams, an empty array is returned.
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    description: Count of results.
                    type: integer
                    example: 50
                  results:
                    description: The results set.
                    type: array
                    items:
                      $ref: '#/components/schemas/user-team-membership-schema'
        '400':
          description: The supplied UUID was malformed.
        '404':
          description: The UUID does not correspond to an existing user.
  '/users/{user_id}/following':
    parameters:
      - in: path
        name: user_id
        description: The Invotra UUID of the user.
        required: true
        schema:
          type: string
    get:
      tags:
        - users
      description: List of who a user is following.
      parameters:
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
      responses:
        '200':
          description: |
            List of who a user is following.
          content:
            application/json:
              schema:
                type: object
                required:
                  - count
                  - results
                properties:
                  count:
                    description: Count of results.
                    type: integer
                    example: 50
                  results:
                    description: The results set.
                    type: array
                    items:
                      $ref: '#/components/schemas/user-search-schema'
        '400':
          description: The supplied UUID was malformed.
        '404':
          description: The UUID does not correspond to an existing user.
  '/users/{user_id}/groups':
    parameters:
      - in: path
        name: user_id
        description: The Invotra UUID of the user.
        required: true
        schema:
          type: string
    get:
      tags:
        - users
      description: List a user's groups.
      parameters:
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
      responses:
        '200':
          description: |
            List of a user's groups.
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    description: Count of results.
                    type: integer
                    example: 50
                  results:
                    description: The results set.
                    type: array
                    items:
                      $ref: '#/components/schemas/group-schema'
        '400':
          description: The supplied UUID was malformed.
        '404':
          description: The UUID does not correspond to an existing user.
  '/users/{user_id}/follow':
    parameters:
      - description: The Invotra UUID of the user.
        in: path
        name: user_id
        required: true
        schema:
          type: string
          format: uuid
    delete:
      tags:
        - users
      responses:
        '200':
          description: Follower flag removed.
        '400':
          description: The UUID was malformed.
        '404':
          description: |
            The user or follower flag does not exist.
      description: Stop following a user.
    get:
      tags:
        - users
      responses:
        '200':
          description: |
            Follow status returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/common-status-schema'
        '400':
          description: The UUID was malformed.
        '404':
          description: The user does not exist.
    put:
      tags:
        - users
      responses:
        '200':
          description: The user is now following the other user.
        '400':
          description: The UUID was malformed.
        '404':
          description: The user or follower does not exist.
      description: Follow a user as another user.
  /groups:
    get:
      tags:
        - groups
      parameters:
        - description: Filter by external ID.
          in: query
          name: external_id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of groups matching the filter criteria.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/uuid-list-schema'
      description: Search for groups. Returns list of uuids. Returns an empty array if no groups are found.
    post:
      tags:
        - groups
      responses:
        '201':
          description: The group was created successfully.
          headers:
            Location:
              description: |
                The URL at which the newly created group may be retrieved.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/successful-post-response-schema'
        '400':
          description: The group was not saved due to malformed JSON.
        '403':
          description: The user does not have permission to create groups.
        '422':
          description: |
            The group was not saved due to Drupal validation failure or JSON schema validation
            failure.
      description: Create a group.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/group-schema'
        required: true
  '/groups/{group_id}/posts':
    parameters:
      - description: The Invotra UUID of the group.
        in: path
        name: group_id
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - groups
      parameters:
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
      responses:
        '200':
          description: |
            List of group posts. If there are no posts, an empty array.
          content:
            application/json:
              schema:
                type: object
                required:
                  - count
                  - results
                properties:
                  count:
                    description: Count of results.
                    type: integer
                    example: 50
                  results:
                    description: The results set.
                    type: array
                    items:
                      $ref: '#/components/schemas/post-schema'
        '400':
          description: The supplied UUID was malformed.
        '403':
          description: The group is private or secret and the user is not a member.
        '404':
          description: The UUID does not correspond to an existing group.
      description: Get a list of group posts. This returns only the top-level posts in the group, not their replies.
  /groups/search:
    get:
      tags:
        - groups
      parameters:
        - description: Search term. Matches on whole words.
          in: query
          name: fulltext_search
          schema:
            type: string
        - description: Filter by UUID of a category.
          in: query
          name: category
          schema:
            type: string
        - description: Filter by groups the current user is a member of.
          in: query
          name: my_groups
          schema:
            type: boolean
            default: false
        - description: Field to sort by.
          in: query
          name: sort
          schema:
            type: string
            enum:
              - relevance
              - likes
              - members_count
              - timestamp_created
            default: relevance
        - description: Sort order.
          in: query
          name: order
          schema:
            type: string
            enum:
              - asc
              - desc
            default: desc
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
      responses:
        '200':
          description: List of groups matching the filter criteria.
          content:
            application/json:
              schema:
                type: object
                required:
                  - count
                  - results
                properties:
                  count:
                    description: Count of results.
                    type: integer
                    example: 50
                  results:
                    description: The results set.
                    type: array
                    items:
                      $ref: '#/components/schemas/group-search-schema'
    description: 'Search for groups. Returns group snippets. An empty array is returned if no groups are found.'
  /groups/categories:
    get:
      tags:
        - groups
      parameters:
        - description: Filter by label. Matches on whole words.
          in: query
          name: label
          schema:
            type: string
        - description: Autocomplete term. Matches on group category name, per letter, from the start of the word.
          in: query
          name: autocomplete
          schema:
            type: string
        - description: Filter the list of categories to those that include groups matching a search term. This is useful when you have already searched for groups and want to refine your search by category (like a faceted search). Like the fulltext_search parameter of /groups/search, this matches on whole words.
          in: query
          name: group_fulltext_search
          schema:
            type: string
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
      responses:
        '200':
          description: List of group categories.
          content:
            application/json:
              schema:
                type: object
                required:
                  - count
                  - results
                properties:
                  count:
                    description: Count of results.
                    type: integer
                    example: 50
                  results:
                    description: The results set.
                    allOf:
                      - $ref: '#/components/schemas/title-uuid-list-common-schema'
    description: 'List all group categories. An empty array is returned if no categories are found'
  '/groups/metrics':
    get:
      tags:
        - groups
      responses:
        '200':
          description: Summary of metrics across all groups.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/group-metrics-schema'
        '403':
          description: The user is not permitted to view metrics.
  '/groups/{group_id}':
    parameters:
      - description: The Invotra UUID of the group.
        in: path
        name: group_id
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - groups
      responses:
        '200':
          description: Returns a single complete group object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/group-schema'
        '400':
          description: The supplied UUID was malformed.
        '403':
          description: The group is secret and the user is not a member.
        '404':
          description: The UUID does not correspond to an existing group.
      description: Get information about the group.
    put:
      tags:
        - groups
      responses:
        '201':
          description: The group was updated successfully.
        '400':
          description: The group was not saved due to malformed JSON.
        '403':
          description: The user does not have permission to update the group.
        '404':
          description: The UUID does not correspond to an existing group.
        '422':
          description: |
            The group was not saved due to Drupal validation failure or JSON schema validation
            failure.
      description: Update a group.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/group-schema'
        required: true
  '/groups/{group_id}/members':
    parameters:
      - description: The Invotra UUID of the group.
        in: path
        name: group_id
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - groups
      parameters:
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
      responses:
        '200':
          description: |
            List of group members. If there are no members, an empty array.
          content:
            application/json:
              schema:
                type: object
                required:
                  - count
                  - results
                properties:
                  count:
                    description: Count of results.
                    type: integer
                    example: 50
                  results:
                    description: The results set.
                    type: array
                    items:
                      $ref: '#/components/schemas/user-schema'
        '400':
          description: The supplied UUID was malformed.
        '403':
          description: The group is private or secret and the user is not a member.
        '404':
          description: The UUID does not correspond to an existing group.
      description: Get a list of group members.
  '/groups/{group_id}/my_membership':
    parameters:
      - description: The Invotra UUID of the group to check membership status against.
        in: path
        name: group_id
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - groups
      responses:
        '200':
          description: |
            Membership status returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/group-membership-status-schema'
        '400':
          description: The UUID was malformed.
        '404':
          description: The group does not exist.
      description: Check if the current user is a member of a group.
  '/groups/{group_id}/members/{user_id}':
    parameters:
      - description: The Invotra UUID of the group.
        in: path
        name: group_id
        required: true
        schema:
          type: string
          format: uuid
      - description: The Invotra UUID of the user.
        in: path
        name: user_id
        required: true
        schema:
          type: string
          format: uuid
    delete:
      tags:
        - groups
      responses:
        '200':
          description: The user has been removed from the group.
        '400':
          description: The UUID was malformed.
        '403':
          description: The logged-in user is not authorized to remove the specified user from the group. (Since group admin functionality is not yet implemented, all users will currently receive this response if trying to remove users other than themselves from a group).
        '404':
          description: |
            The user or group does not exist, or the user was not a member
            of the group.
      description: Remove the user's membership of the group. Note that at present the {user_id} must match that of the current logged-in user.
    put:
      tags:
        - groups
      responses:
        '200':
          description: The user's membership of this group was updated. The new status of their membership is returned in the response body.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/group-membership-status-schema'
        '400':
          description: The UUID was malformed or the role type was invalid.
        '403':
          description: The logged-in user is not authorized to add the specified user to the group or modify their membership. (Since group admin functionality is not yet implemented, all users will currently receive this response if trying to add users other than themselves to a group or modify other users' group memberships).
        '404':
          description: The user or group does not exist.
      description: >-
        Add a user to a group or update information about a user's existing
        group membership. Note that at present the {user_id} must match that of the current logged-in user.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/group-membership-common-schema'
  '/groups/{group_id}/document_folders':
    parameters:
      - description: 'The Invotra UUID of the group.'
        in: path
        name: group_id
        required: true
        schema:
          type: string
          format: uuid
    post:
      tags:
        - 'groups'
      description: 'Provision a new group document folder.'
      responses:
        '201':
          description: 'The group document folder was created successfully.'
          headers:
            Location:
              description: 'The URL at which the newly provisioned group document folder may be retrieved.'
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/successful-post-response-schema'
        '400':
          description: 'The group document folder was not saved due to malformed JSON.'
        '403':
          description: 'User is not authorized to create a group document folder.'
        '422':
          description: 'The group document folder was not saved due to Drupal validation failure or JSON schema validation failure.'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/group-document-folder-schema-create'
        required: true
  '/groups/{group_id}/document_folders/list':
    parameters:
      - description: 'The Invotra UUID of the group.'
        in: path
        name: group_id
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - 'groups'
      description: 'Search for group document folders. An empty array is returned if no group document folders are found.'
      parameters:
        - name: name
          description: 'Filter by name. Matches on whole words.'
          in: query
          schema:
            type: string
        - description: 'Filter by external ID.'
          in: query
          name: external_id
          schema:
            type: string
        - name: valid_parents_for
          description: 'Filter out invalid parents (self and children) for the specified Invotra UUID of the group document folder.'
          in: query
          schema:
            type: string
            format: uuid
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
      responses:
        '200':
          description: 'List of group document folders matching the filter criteria.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    description: 'Count of results.'
                    type: integer
                    example: 50
                  results:
                    description: 'The results set.'
                    type: array
                    items:
                      allOf:
                        - $ref: '#/components/schemas/group-document-folder-schema'
        '403':
          description: 'User is not authorized to list group document folders.'
  '/groups/{group_id}/document_folders/{group_document_folder_id}':
    parameters:
      - description: 'The Invotra UUID of the group.'
        in: path
        name: group_id
        required: true
        schema:
          type: string
          format: uuid
      - description: 'The Invotra UUID of the group document folders.'
        in: path
        name: group_document_folder_id
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - 'groups'
      description: 'Get information about the group document folder.'
      responses:
        '200':
          description: 'Returns a single complete group document folder object.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/group-document-folder-schema'
        '400':
          description: 'The supplied UUID was malformed.'
        '403':
          description: 'User is not authorized to show this group document folder.'
        '404':
          description: 'The UUID does not correspond to an existing group document folder.'
    put:
      tags:
        - 'groups'
      description: 'Update group document folder information.'
      responses:
        '200':
          description: 'The group document folder information was updated successfully.'
        '400':
          description: 'The supplied UUID or JSON was malformed.'
        '403':
          description: 'User is not authorized to update this group document folder.'
        '404':
          description: 'The UUID does not correspond to an existing group document folder.'
        '422':
          description: 'The group document folder was not updated due to a Drupal validation failure or a JSON schema validation failure.'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/group-document-folder-schema-update'
        required: true
    delete:
      tags:
        - 'groups'
      description: 'Delete a group document folder.'
      responses:
        '200':
          description: 'The group document folder was successfully deleted.'
        '400':
          description: 'The supplied UUID was malformed.'
        '403':
          description: 'User is not authorized to delete this group document folder.'
        '404':
          description: 'The UUID does not correspond to an existing group document folder.'
  /posts:
    get:
      tags:
        - posts
      parameters:
        - description: Filter by external ID.
          in: query
          name: external_id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: >
            List of posts matching the filter criteria, or an empty array if
            none were found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/uuid-list-schema'
      description: Search for posts.
    post:
      tags:
        - posts
      responses:
        '201':
          description: The post was created successfully.
          headers:
            Location:
              description: |
                The URL at which the newly provisioned post may be retrieved.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/successful-post-response-schema'
        '400':
          description: The post was not saved due to malformed JSON.
        '422':
          description: |
            The post was not saved due to Drupal validation failure or JSON
            schema validation failure.
      description: Create a post.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/post-schema-create'
        required: true
  /posts/list:
    get:
      summary: List of posts.
      tags:
        - posts
      parameters:
        - description: Field to sort by
          in: query
          name: sort
          schema:
            type: string
            enum:
              - timestamp
              - comment_count
              - likes_count
            default: timestamp
        - description: Sort order
          in: query
          name: order
          schema:
            type: string
            enum:
              - asc
              - desc
            default: desc
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
      responses:
        '200':
          description: List of posts.
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    description: Count of results.
                    type: integer
                    example: 50
                  results:
                    description: The results set.
                    type: array
                    items:
                      $ref: '#/components/schemas/post-schema'
        '400':
          description: An invalid query parameter was supplied.
        '403':
          description: The user does not have permission to view a list of posts.
      description: List of posts. An empty array is returned if no posts are found.
  '/posts/{post_id}':
    parameters:
      - description: The Invotra UUID of the post.
        in: path
        name: post_id
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - posts
      responses:
        '200':
          description: Returns a single complete post object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/post-schema'
        '400':
          description: The supplied UUID was malformed.
        '404':
          description: The UUID does not correspond to an existing post.
      description: Get information about the post.
    put:
      tags:
        - posts
      responses:
        '200':
          description: The post information was updated successfully.
        '400':
          description: The supplied UUID or JSON was malformed.
        '404':
          description: The UUID does not correspond to an existing post.
        '422':
          description: |
            The post was not updated due to a Drupal validation failure or a
            JSON schema validation failure.
      description: Update post information.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/post-schema-base'
        required: true
  '/posts/{post_id}/replies':
    parameters:
      - description: The Invotra UUID of the parent post. Currently this must be a top-level post in its group. This restriction may be relaxed in a future API version.
        in: path
        name: post_id
        required: true
        schema:
          type: string
          format: uuid
    get:
      summary: Get the replies to a post.
      tags:
        - posts
      parameters:
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
      responses:
        '200':
          description: |
            List of post replies. If there are no replies, an empty array.
          content:
            application/json:
              schema:
                type: object
                required:
                  - count
                  - results
                properties:
                  count:
                    description: Count of results.
                    type: integer
                    example: 50
                  results:
                    description: The results set.
                    type: array
                    items:
                      $ref: '#/components/schemas/post-schema'
        '400':
          description: The supplied UUID was malformed.
        '403':
          description: The user does not have access to the parent post, perhaps because the post is in a private or secret group of which the user is not a member.
        '404':
          description: The UUID does not correspond to an existing post, or the post is not a top-level post in its group.
      description: "Get a list of post replies. The replies are returned in thread order, old-to-new. Replies to a post appear after the post but before the next post at the same level, and posts are ordered oldest-to-newest within each level."
  '/posts/categories':
    get:
      tags:
        - posts
      responses:
        '200':
          description: >
            List of posts categories.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/post-category-schema'
      description: List post categories.
  '/posts/{post_id}/likes':
    parameters:
      - description: The Invotra UUID of the post.
        in: path
        name: post_id
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - posts
      parameters:
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
      responses:
        '200':
          description: |
            List of likes for a post.
          content:
            application/json:
              schema:
                type: object
                required:
                  - count
                  - results
                properties:
                  count:
                    description: Count of results.
                    type: integer
                    example: 50
                  results:
                    description: The results set.
                    type: array
                    items:
                      $ref: '#/components/schemas/user-schema'
        '400':
          description: The supplied UUID was malformed.
        '403':
          description: 'Access was denied because the user tried to list the likes of a post in a group that is private or secret and the user is not a member.'
        '404':
          description: The UUID does not correspond to an existing post.
      description: Get a list of users who have liked a post.
  '/posts/{post_id}/like':
    parameters:
      - description: The Invotra UUID of the post.
        in: path
        name: post_id
        required: true
        schema:
          type: string
          format: uuid
    delete:
      tags:
        - posts
      responses:
        '200':
          description: The user unliked the post.
        '400':
          description: The UUID was malformed.
        '403':
          description: 'Access was denied because the user tried to remove their like from their own post, or the post is in a group that is private or secret and the user is not a member.'
        '404':
          description: |
            The user, post or like does not exist.
      description: Remove the current user's like from a post.
    get:
      tags:
        - posts
      responses:
        '200':
          description: |
            Like status returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/common-status-schema'
        '400':
          description: The UUID was malformed.
        '403':
          description: 'Access was denied because the user tried to check if they liked a post in a group that is private or secret and the user is not a member.'
        '404':
          description: The post does not exist.
      description: Check if the current user has liked a post.
    put:
      tags:
        - posts
      responses:
        '200':
          description: The user liked this post.
        '400':
          description: The UUID was malformed.
        '403':
          description: 'Access was denied because the user tried to like their own post, or the post is in a group that is private or secret and the user is not a member.'
        '404':
          description: The user or post does not exist.
      description: Like a post as the current user.
  '/posts/{post_id}/report':
    parameters:
      - description: The Invotra UUID of the post.
        in: path
        name: post_id
        required: true
        schema:
          type: string
          format: uuid
    delete:
      tags:
        - posts
      responses:
        '200':
          description: The user removed their report flag from the post.
        '400':
          description: The UUID was malformed.
        '403':
          description: 'Access was denied because the user tried to remove the report flag of their own post, or the post is in a group that is private or secret and the user is not a member.'
        '404':
          description: |
            The user, post or report flag does not exist.
      description: Remove the current user's report flag from a post.
    get:
      tags:
        - posts
      responses:
        '200':
          description: |
            Report status returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/common-status-schema'
        '400':
          description: The UUID was malformed.
        '403':
          description: 'Access was denied because the user tried to view the report status of a post in a group that is private or secret and the user is not a member.'
        '404':
          description: The post does not exist.
      description: Check if the current user has reported a post.
    put:
      tags:
        - posts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/post-report-schema-create'
        required: true
      responses:
        '200':
          description: The user reported this post as inappropriate.
        '400':
          description: The UUID or request body JSON was malformed.
        '403':
          description: 'Access was denied because the user tried to report their own post, or the post is in a group that is private or secret and the user is not a member.'
        '404':
          description: The user or post does not exist.
        '422':
          description: JSON schema validation failure
      description: Report a post as the current user.
  '/blogs':
    post:
      tags:
        - 'blogs'
      description: 'Provision a new blog.'
      responses:
        '201':
          description: 'The blog was created successfully.'
          headers:
            Location:
              description: 'The URL at which the newly provisioned blog may be retrieved.'
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/successful-post-response-schema'
        '400':
          description: 'The blog was not saved due to malformed JSON.'
        '403':
          description: 'User is not authorized to create a blog.'
        '422':
          description: 'The blog was not saved due to Drupal validation failure or JSON schema validation failure.'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/blog-schema-create'
        required: true
  '/blogs/list':
    get:
      tags:
        - 'blogs'
      description: 'Search for blogs. An empty array is returned if no blogs where found.'
      parameters:
        - name: author_uuid
          description: 'Filter on Invotra UUID of the author.'
          in: query
          schema:
            type: string
            format: uuid
            example: '01234567-89ab-cdef-1234-56789abcdef0'
        - name: created_date
          description: 'Filter on date created. Format: YYYY-MM-DD.'
          in: query
          schema:
            type: string
            example: '2012-12-25'
        - name: updated_date
          description: 'Filter on date updated. Format: YYYY-MM-DD.'
          in: query
          schema:
            type: string
            example: '2012-12-25'
        - name: state
          description: 'Filter the list of blogs on a comma seperated list of states. Valid states are "published" and "unpublished", you may inlude both. The default when not supplied is "published" only.'
          in: query
          schema:
            type: string
            example: 'unpublished'
        - name: sort
          description: 'Field to sort by.'
          in: query
          schema:
            type: string
            enum:
              - timestamp_created
              - timestamp_updated
            default: timestamp_created
        - name: order
          description: 'Sort order.'
          in: query
          schema:
            type: string
            enum:
              - asc
              - desc
            default: desc
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
      responses:
        '200':
          description: 'List of blogs matching the filter criteria.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    description: 'Count of results.'
                    type: integer
                    example: 50
                  results:
                    description: 'The results set.'
                    type: array
                    items:
                      $ref: '#/components/schemas/blog-schema'
        '403':
          description: 'User is not authorized to list blogs.'
  '/blogs/{blog_id}':
    parameters:
      - description: 'The Invotra UUID of the blog.'
        in: path
        name: blog_id
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - 'blogs'
      description: 'Get information about the blog.'
      responses:
        '200':
          description: 'Returns a single complete blog object.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/blog-schema'
        '400':
          description: 'The supplied UUID was malformed.'
        '403':
          description: 'User is not authorized to show this blog.'
        '404':
          description: 'The UUID does not correspond to an existing blog.'
    put:
      tags:
        - 'blogs'
      description: 'Update blog information.'
      responses:
        '200':
          description: 'The blog information was updated successfully.'
        '400':
          description: 'The supplied UUID or JSON was malformed.'
        '403':
          description: 'User is not authorized to update this blog.'
        '404':
          description: 'The UUID does not correspond to an existing blog.'
        '422':
          description: 'The blog was not updated due to a Drupal validation failure or a JSON schema validation failure.'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/blog-schema-update'
        required: true
    delete:
      tags:
        - 'blogs'
      description: 'Delete a blog.'
      responses:
        '200':
          description: 'The blog was successfully deleted.'
        '400':
          description: 'The supplied UUID was malformed.'
        '403':
          description: 'User is not authorized to delete this blog.'
        '404':
          description: 'The UUID does not correspond to an existing blog.'
  '/custom_content':
    post:
      tags:
        - 'custom content'
      description: 'Provision a new custom content.'
      responses:
        '201':
          description: 'The custom content was created successfully.'
          headers:
            Location:
              description: 'The URL at which the newly provisioned custom content may be retrieved.'
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/successful-post-response-schema'
        '400':
          description: 'The custom content was not saved due to malformed JSON.'
        '403':
          description: 'User is not authorized to create a custom content.'
        '422':
          description: 'The custom content was not saved due to Drupal validation failure or JSON schema validation failure.'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/custom-content-schema-create'
        required: true
  '/custom_content/list':
    get:
      tags:
        - 'custom content'
      description: 'Search for custom content. An empty array is returned if no custom content was found.'
      parameters:
        - name: author_uuid
          description: 'Filter on Invotra UUID of the author.'
          in: query
          schema:
            type: string
            format: uuid
            example: '01234567-89ab-cdef-1234-56789abcdef0'
        - name: created_date
          description: 'Filter on date created. Format: YYYY-MM-DD.'
          in: query
          schema:
            type: string
            example: '2012-12-25'
        - name: updated_date
          description: 'Filter on date updated. Format: YYYY-MM-DD.'
          in: query
          schema:
            type: string
            example: '2012-12-25'
        - name: custom_content_type
          description: 'Filter by the custom content type machine name. Matches on whole words.'
          in: query
          schema:
            type: string
            example: 'guideline'
        - description: 'Filter by external ID.'
          in: query
          name: external_id
          schema:
            type: string
            example: 'ABC123'
        - name: state
          description: 'Filter the list of custom content on a comma seperated list of states. Valid statuses are "draft", "needs_review", "reviewed", "published", and "unpublished". You may include multiple. The default when not supplied is "published" only.'
          in: query
          schema:
            type: string
            example: 'unpublished'
        - name: sort
          description: 'Field to sort by.'
          in: query
          schema:
            type: string
            enum:
              - timestamp_created
              - timestamp_updated
            default: timestamp_created
        - name: order
          description: 'Sort order.'
          in: query
          schema:
            type: string
            enum:
              - asc
              - desc
            default: desc
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
      responses:
        '200':
          description: 'List of custom content matching the filter criteria.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    description: 'Count of results.'
                    type: integer
                    example: 50
                  results:
                    description: 'The results set.'
                    type: array
                    items:
                      $ref: '#/components/schemas/custom-content-schema'
        '403':
          description: 'User is not authorized to list custom content.'
  '/custom_content/{custom_content_id}':
    parameters:
      - description: 'The Invotra UUID of the custom content.'
        in: path
        name: custom_content_id
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - 'custom content'
      description: 'Get information about the custom content.'
      responses:
        '200':
          description: 'Returns a single complete custom content object.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/custom-content-schema'
        '400':
          description: 'The supplied UUID was malformed.'
        '403':
          description: 'User is not authorized to show this custom content.'
        '404':
          description: 'The UUID does not correspond to an existing custom content.'
    put:
      tags:
        - 'custom content'
      description: 'Update custom content information.'
      responses:
        '200':
          description: 'The custom content information was updated successfully.'
        '400':
          description: 'The supplied UUID or JSON was malformed.'
        '403':
          description: 'User is not authorized to update this custom content.'
        '404':
          description: 'The UUID does not correspond to an existing custom content.'
        '422':
          description: 'The custom content was not updated due to a Drupal validation failure or a JSON schema validation failure.'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/custom-content-schema-update'
        required: true
    delete:
      tags:
        - 'custom content'
      description: 'Delete custom content.'
      responses:
        '200':
          description: 'The custom content was successfully deleted.'
        '400':
          description: 'The supplied UUID was malformed.'
        '403':
          description: 'User is not authorized to delete this custom content.'
        '404':
          description: 'The UUID does not correspond to an existing custom content.'
  '/galleries':
    post:
      tags:
        - 'galleries'
      description: 'Provision a new gallery.'
      responses:
        '201':
          description: 'The gallery was created successfully.'
          headers:
            Location:
              description: 'The URL at which the newly provisioned gallery may be retrieved.'
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/successful-post-response-schema'
        '400':
          description: 'The gallery was not saved due to malformed JSON.'
        '403':
          description: 'User is not authorized to create a gallery.'
        '422':
          description: 'The gallery was not saved due to Drupal validation failure or JSON schema validation failure.'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/gallery-schema-create'
        required: true
  '/galleries/list':
    get:
      tags:
        - 'galleries'
      description: 'Search for galleries. An empty array is returned if no galleries where found.'
      parameters:
        - name: author_uuid
          description: 'Filter on Invotra UUID of the author.'
          in: query
          schema:
            type: string
            format: uuid
            example: '01234567-89ab-cdef-1234-56789abcdef0'
        - name: created_date
          description: 'Filter on date created. Format: YYYY-MM-DD.'
          in: query
          schema:
            type: string
            example: '2012-12-25'
        - name: updated_date
          description: 'Filter on date updated. Format: YYYY-MM-DD.'
          in: query
          schema:
            type: string
            example: '2012-12-25'
        - name: state
          description: 'Filter the list of galleries on a comma seperated list of states. Valid statuses are "draft", "needs_review", "reviewed", "published", and "unpublished". You may include multiple. The default when not supplied is "published" only.'
          in: query
          schema:
            type: string
            example: 'unpublished'
        - name: sort
          description: 'Field to sort by.'
          in: query
          schema:
            type: string
            enum:
              - timestamp_created
              - timestamp_updated
            default: timestamp_created
        - name: order
          description: 'Sort order.'
          in: query
          schema:
            type: string
            enum:
              - asc
              - desc
            default: desc
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
      responses:
        '200':
          description: 'List of galleries matching the filter criteria.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    description: 'Count of results.'
                    type: integer
                    example: 50
                  results:
                    description: 'The results set.'
                    type: array
                    items:
                      $ref: '#/components/schemas/gallery-schema'
        '403':
          description: 'User is not authorized to list galleries.'
  '/galleries/{gallery_id}':
    parameters:
      - description: 'The Invotra UUID of the gallery.'
        in: path
        name: gallery_id
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - 'galleries'
      description: 'Get information about the gallery.'
      responses:
        '200':
          description: 'Returns a single complete gallery object.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/gallery-schema'
        '400':
          description: 'The supplied UUID was malformed.'
        '403':
          description: 'User is not authorized to show this gallery.'
        '404':
          description: 'The UUID does not correspond to an existing gallery.'
    put:
      tags:
        - 'galleries'
      description: 'Update gallery information.'
      responses:
        '200':
          description: 'The gallery information was updated successfully.'
        '400':
          description: 'The supplied UUID or JSON was malformed.'
        '403':
          description: 'User is not authorized to update this gallery.'
        '404':
          description: 'The UUID does not correspond to an existing gallery.'
        '422':
          description: 'The gallery was not updated due to a Drupal validation failure or a JSON schema validation failure.'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/gallery-schema-update'
        required: true
    delete:
      tags:
        - 'galleries'
      description: 'Delete a gallery.'
      responses:
        '200':
          description: 'The gallery was successfully deleted.'
        '400':
          description: 'The supplied UUID was malformed.'
        '403':
          description: 'User is not authorized to delete this gallery.'
        '404':
          description: 'The UUID does not correspond to an existing gallery.'
  '/group_polls':
    post:
      tags:
        - 'group polls'
      description: 'Provision a new group poll.'
      responses:
        '201':
          description: 'The group poll was created successfully.'
          headers:
            Location:
              description: 'The URL at which the newly provisioned group poll may be retrieved.'
              schema:
                type: string
                format: uri
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/successful-post-response-schema'
        '400':
          description: 'The group poll was not saved due to malformed JSON.'
        '403':
          description: 'User is not authorized to create a group poll.'
        '422':
          description: 'The group poll was not saved due to Drupal validation failure or JSON schema validation failure.'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/group-poll-schema-create'
        required: true
  '/group_polls/list':
    get:
      tags:
        - 'group polls'
      description: 'Search for group polls. An empty array is returned if no group polls where found.'
      parameters:
        - name: author_uuid
          description: 'Filter on Invotra UUID of the author.'
          in: query
          schema:
            type: string
            format: uuid
            example: '01234567-89ab-cdef-1234-56789abcdef0'
        - name: group_uuid
          description: 'Filter on Invotra UUID of the group.'
          in: query
          schema:
            type: string
            format: uuid
            example: '01234567-89ab-cdef-1234-56789abcdef0'
        - name: created_date
          description: 'Filter on date created. Format: YYYY-MM-DD.'
          in: query
          schema:
            type: string
            example: '2012-12-25'
        - name: updated_date
          description: 'Filter on date updated. Format: YYYY-MM-DD.'
          in: query
          schema:
            type: string
            example: '2012-12-25'
        - name: sort
          description: 'Field to sort by.'
          in: query
          schema:
            type: string
            enum:
              - timestamp_created
              - timestamp_updated
            default: timestamp_created
        - name: order
          description: 'Sort order.'
          in: query
          schema:
            type: string
            enum:
              - asc
              - desc
            default: desc
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
      responses:
        '200':
          description: 'List of group polls matching the filter criteria.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    description: 'Count of results.'
                    type: integer
                    example: 50
                  results:
                    description: 'The results set.'
                    type: array
                    items:
                      $ref: '#/components/schemas/group-poll-schema'
        '403':
          description: 'User is not authorized to list group polls.'
  '/group_polls/{group_poll_id}':
    parameters:
      - description: 'The Invotra UUID of the group poll.'
        in: path
        name: group_poll_id
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - 'group polls'
      description: 'Get information about the group poll.'
      responses:
        '200':
          description: 'Returns a single complete group poll object.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/group-poll-schema'
        '400':
          description: 'The supplied UUID was malformed.'
        '403':
          description: 'User is not authorized to show this group poll.'
        '404':
          description: 'The UUID does not correspond to an existing group poll.'
    delete:
      tags:
        - 'group polls'
      description: 'Delete a group poll.'
      responses:
        '200':
          description: 'The group poll was successfully deleted.'
        '400':
          description: 'The supplied UUID was malformed.'
        '403':
          description: 'User is not authorized to delete this group poll.'
        '404':
          description: 'The UUID does not correspond to an existing group poll.'
  '/lists':
    post:
      tags:
        - 'lists'
      description: 'Provision a new list.'
      responses:
        '201':
          description: 'The list was created successfully.'
          headers:
            Location:
              description: 'The URL at which the newly provisioned list may be retrieved.'
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/successful-post-response-schema'
        '400':
          description: 'The list was not saved due to malformed JSON.'
        '403':
          description: 'User is not authorized to create a list.'
        '422':
          description: 'The list was not saved due to Drupal validation failure or JSON schema validation failure.'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/list-schema-create'
        required: true
  '/lists/list':
    get:
      tags:
        - 'lists'
      description: 'Search for lists. An empty array is returned if no lists where found.'
      parameters:
        - name: author_uuid
          description: 'Filter on Invotra UUID of the author.'
          in: query
          schema:
            type: string
            format: uuid
            example: '01234567-89ab-cdef-1234-56789abcdef0'
        - name: created_date
          description: 'Filter on date created. Format: YYYY-MM-DD.'
          in: query
          schema:
            type: string
            example: '2012-12-25'
        - name: updated_date
          description: 'Filter on date updated. Format: YYYY-MM-DD.'
          in: query
          schema:
            type: string
            example: '2012-12-25'
        - name: state
          description: 'Filter the list of lists on a comma seperated list of states. Valid statuses are "draft", "needs_review", "reviewed", "published", and "unpublished". You may include multiple. The default when not supplied is "published" only.'
          in: query
          schema:
            type: string
            example: 'unpublished'
        - name: sort
          description: 'Field to sort by.'
          in: query
          schema:
            type: string
            enum:
              - timestamp_created
              - timestamp_updated
            default: timestamp_created
        - name: order
          description: 'Sort order.'
          in: query
          schema:
            type: string
            enum:
              - asc
              - desc
            default: desc
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
      responses:
        '200':
          description: 'List of lists matching the filter criteria.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    description: 'Count of results.'
                    type: integer
                    example: 50
                  results:
                    description: 'The results set.'
                    type: array
                    items:
                      $ref: '#/components/schemas/list-schema'
        '403':
          description: 'User is not authorized to list lists.'
  '/lists/{list_id}':
    parameters:
      - description: 'The Invotra UUID of the list.'
        in: path
        name: list_id
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - 'lists'
      description: 'Get information about the list.'
      responses:
        '200':
          description: 'Returns a single complete list object.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/list-schema'
        '400':
          description: 'The supplied UUID was malformed.'
        '403':
          description: 'User is not authorized to show this list.'
        '404':
          description: 'The UUID does not correspond to an existing list.'
    put:
      tags:
        - 'lists'
      description: 'Update list information.'
      responses:
        '200':
          description: 'The list information was updated successfully.'
        '400':
          description: 'The supplied UUID or JSON was malformed.'
        '403':
          description: 'User is not authorized to update this list.'
        '404':
          description: 'The UUID does not correspond to an existing list.'
        '422':
          description: 'The list was not updated due to a Drupal validation failure or a JSON schema validation failure.'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/list-schema-update'
        required: true
    delete:
      tags:
        - 'lists'
      description: 'Delete a list.'
      responses:
        '200':
          description: 'The list was successfully deleted.'
        '400':
          description: 'The supplied UUID was malformed.'
        '403':
          description: 'User is not authorized to delete this list.'
        '404':
          description: 'The UUID does not correspond to an existing list.'
  '/messages':
    post:
      tags:
        - 'messages'
      description: 'Provision a new message.'
      responses:
        '201':
          description: 'The message was created successfully.'
          headers:
            Location:
              description: 'The URL at which the newly provisioned message may be retrieved.'
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/successful-post-response-schema'
        '400':
          description: 'The message was not saved due to malformed JSON.'
        '403':
          description: 'User is not authorized to create a message.'
        '422':
          description: 'The message was not saved due to Drupal validation failure or JSON schema validation failure.'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/message-schema-create'
        required: true
  '/messages/list':
    get:
      tags:
        - 'messages'
      description: 'Search for messages. An empty array is returned if no messages where found.'
      parameters:
        - name: author_uuid
          description: 'Filter on Invotra UUID of the author.'
          in: query
          schema:
            type: string
            format: uuid
            example: '01234567-89ab-cdef-1234-56789abcdef0'
        - name: created_date
          description: 'Filter on date created. Format: YYYY-MM-DD.'
          in: query
          schema:
            type: string
            example: '2012-12-25'
        - name: updated_date
          description: 'Filter on date updated. Format: YYYY-MM-DD.'
          in: query
          schema:
            type: string
            example: '2012-12-25'
        - name: sort
          description: 'Field to sort by.'
          in: query
          schema:
            type: string
            enum:
              - timestamp_created
              - timestamp_updated
            default: timestamp_created
        - name: order
          description: 'Sort order.'
          in: query
          schema:
            type: string
            enum:
              - asc
              - desc
            default: desc
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
      responses:
        '200':
          description: 'List of messages matching the filter criteria.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    description: 'Count of results.'
                    type: integer
                    example: 50
                  results:
                    description: 'The results set.'
                    type: array
                    items:
                      $ref: '#/components/schemas/message-schema'
        '403':
          description: 'User is not authorized to list messages.'
  '/messages/{message_id}':
    parameters:
      - description: 'The Invotra UUID of the message.'
        in: path
        name: message_id
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - 'messages'
      description: 'Get information about the message.'
      responses:
        '200':
          description: 'Returns a single complete message object.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/message-schema'
        '400':
          description: 'The supplied UUID was malformed.'
        '403':
          description: 'User is not authorized to show this message.'
        '404':
          description: 'The UUID does not correspond to an existing message.'
    put:
      tags:
        - 'messages'
      description: 'Update message information.'
      responses:
        '200':
          description: 'The message information was updated successfully.'
        '400':
          description: 'The supplied UUID or JSON was malformed.'
        '403':
          description: 'User is not authorized to update this message.'
        '404':
          description: 'The UUID does not correspond to an existing message.'
        '422':
          description: 'The message was not updated due to a Drupal validation failure or a JSON schema validation failure.'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/message-schema-update'
        required: true
    delete:
      tags:
        - 'messages'
      description: 'Delete a message.'
      responses:
        '200':
          description: 'The message was successfully deleted.'
        '400':
          description: 'The supplied UUID was malformed.'
        '403':
          description: 'User is not authorized to delete this message.'
        '404':
          description: 'The UUID does not correspond to an existing message.'
  '/news':
    post:
      tags:
        - 'news'
      description: 'Provision a new news.'
      responses:
        '201':
          description: 'The news was created successfully.'
          headers:
            Location:
              description: 'The URL at which the newly provisioned news may be retrieved.'
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/successful-post-response-schema'
        '400':
          description: 'The news was not saved due to malformed JSON.'
        '403':
          description: 'User is not authorized to create a news.'
        '422':
          description: 'The news was not saved due to Drupal validation failure or JSON schema validation failure.'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/news-schema-create'
        required: true
  '/news/list':
    get:
      tags:
        - 'news'
      description: 'Search for news. An empty array is returned if no news where found.'
      parameters:
        - name: author_uuid
          description: 'Filter on Invotra UUID of the author.'
          in: query
          schema:
            type: string
            format: uuid
            example: '01234567-89ab-cdef-1234-56789abcdef0'
        - name: created_date
          description: 'Filter on date created. Format: YYYY-MM-DD.'
          in: query
          schema:
            type: string
            example: '2012-12-25'
        - name: updated_date
          description: 'Filter on date updated. Format: YYYY-MM-DD.'
          in: query
          schema:
            type: string
            example: '2012-12-25'
        - name: state
          description: 'Filter the list of news on a comma seperated list of states. Valid statuses are "draft", "needs_review", "reviewed", "published", and "unpublished". You may include multiple. The default when not supplied is "published" only.'
          in: query
          schema:
            type: string
            example: 'unpublished'
        - name: sort
          description: 'Field to sort by.'
          in: query
          schema:
            type: string
            enum:
              - timestamp_created
              - timestamp_updated
            default: timestamp_created
        - name: order
          description: 'Sort order.'
          in: query
          schema:
            type: string
            enum:
              - asc
              - desc
            default: desc
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
      responses:
        '200':
          description: 'List of news matching the filter criteria.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    description: 'Count of results.'
                    type: integer
                    example: 50
                  results:
                    description: 'The results set.'
                    type: array
                    items:
                      $ref: '#/components/schemas/news-schema'
        '403':
          description: 'User is not authorized to list news.'
  '/news/{news_id}':
    parameters:
      - description: 'The Invotra UUID of the news.'
        in: path
        name: news_id
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - 'news'
      description: 'Get information about the news.'
      responses:
        '200':
          description: 'Returns a single complete news object.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/news-schema'
        '400':
          description: 'The supplied UUID was malformed.'
        '403':
          description: 'User is not authorized to show this news.'
        '404':
          description: 'The UUID does not correspond to an existing news.'
    put:
      tags:
        - 'news'
      description: 'Update news information.'
      responses:
        '200':
          description: 'The news information was updated successfully.'
        '400':
          description: 'The supplied UUID or JSON was malformed.'
        '403':
          description: 'User is not authorized to update this news.'
        '404':
          description: 'The UUID does not correspond to an existing news.'
        '422':
          description: 'The news was not updated due to a Drupal validation failure or a JSON schema validation failure.'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/news-schema-update'
        required: true
    delete:
      tags:
        - 'news'
      description: 'Delete a news.'
      responses:
        '200':
          description: 'The news was successfully deleted.'
        '400':
          description: 'The supplied UUID was malformed.'
        '403':
          description: 'User is not authorized to delete this news.'
        '404':
          description: 'The UUID does not correspond to an existing news.'
  '/pages':
    post:
      tags:
        - 'pages'
      description: 'Provision a new page.'
      responses:
        '201':
          description: 'The page was created successfully.'
          headers:
            Location:
              description: 'The URL at which the newly provisioned page may be retrieved.'
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/successful-post-response-schema'
        '400':
          description: 'The page was not saved due to malformed JSON.'
        '403':
          description: 'User is not authorized to create a page.'
        '422':
          description: 'The page was not saved due to Drupal validation failure or JSON schema validation failure.'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/page-schema-create'
        required: true
  '/pages/list':
    get:
      tags:
        - 'pages'
      description: 'Search for pages. An empty array is returned if no pages where found.'
      parameters:
        - name: author_uuid
          description: 'Filter on Invotra UUID of the author.'
          in: query
          schema:
            type: string
            format: uuid
            example: '01234567-89ab-cdef-1234-56789abcdef0'
        - name: created_date
          description: 'Filter on date created. Format: YYYY-MM-DD.'
          in: query
          schema:
            type: string
            example: '2012-12-25'
        - name: updated_date
          description: 'Filter on date updated. Format: YYYY-MM-DD.'
          in: query
          schema:
            type: string
            example: '2012-12-25'
        - name: state
          description: 'Filter the list of custom content on a comma seperated list of states. Valid statuses are "draft", "needs_review", "reviewed", "published", and "unpublished". You may include multiple. The default when not supplied is "published" only.'
          in: query
          schema:
            type: string
            example: 'unpublished'
        - name: sort
          description: 'Field to sort by.'
          in: query
          schema:
            type: string
            enum:
              - timestamp_created
              - timestamp_updated
            default: timestamp_created
        - name: order
          description: 'Sort order.'
          in: query
          schema:
            type: string
            enum:
              - asc
              - desc
            default: desc
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
      responses:
        '200':
          description: 'List of pages matching the filter criteria.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    description: 'Count of results.'
                    type: integer
                    example: 50
                  results:
                    description: 'The results set.'
                    type: array
                    items:
                      $ref: '#/components/schemas/page-schema'
        '403':
          description: 'User is not authorized to list pages.'
  '/pages/{page_id}':
    parameters:
      - description: 'The Invotra UUID of the page.'
        in: path
        name: page_id
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - 'pages'
      description: 'Get information about the page.'
      responses:
        '200':
          description: 'Returns a single complete page object.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/page-schema'
        '400':
          description: 'The supplied UUID was malformed.'
        '403':
          description: 'User is not authorized to show this page.'
        '404':
          description: 'The UUID does not correspond to an existing page.'
    put:
      tags:
        - 'pages'
      description: 'Update page information.'
      responses:
        '200':
          description: 'The page information was updated successfully.'
        '400':
          description: 'The supplied UUID or JSON was malformed.'
        '403':
          description: 'User is not authorized to update this page.'
        '404':
          description: 'The UUID does not correspond to an existing page.'
        '422':
          description: 'The page was not updated due to a Drupal validation failure or a JSON schema validation failure.'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/page-schema-update'
        required: true
    delete:
      tags:
        - 'pages'
      description: 'Delete a page.'
      responses:
        '200':
          description: 'The page was successfully deleted.'
        '400':
          description: 'The supplied UUID was malformed.'
        '403':
          description: 'User is not authorized to delete this page.'
        '404':
          description: 'The UUID does not correspond to an existing page.'
  '/policies':
    post:
      tags:
        - 'policies'
      description: 'Provision a new policy.'
      responses:
        '201':
          description: 'The policy was created successfully.'
          headers:
            Location:
              description: 'The URL at which the newly provisioned policy may be retrieved.'
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/successful-post-response-schema'
        '400':
          description: 'The policy was not saved due to malformed JSON.'
        '403':
          description: 'User is not authorized to create a policy.'
        '422':
          description: 'The policy was not saved due to Drupal validation failure or JSON schema validation failure.'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/policy-schema-create'
        required: true
  '/policies/list':
    get:
      tags:
        - 'policies'
      description: 'Search for policies. An empty array is returned if no policies where found.'
      parameters:
        - name: author_uuid
          description: 'Filter on Invotra UUID of the author.'
          in: query
          schema:
            type: string
            format: uuid
            example: '01234567-89ab-cdef-1234-56789abcdef0'
        - name: created_date
          description: 'Filter on date created. Format: YYYY-MM-DD.'
          in: query
          schema:
            type: string
            example: '2012-12-25'
        - name: updated_date
          description: 'Filter on date updated. Format: YYYY-MM-DD.'
          in: query
          schema:
            type: string
            example: '2012-12-25'
        - name: state
          description: 'Filter the list of custom content on a comma seperated list of states. Valid statuses are "draft", "needs_review", "reviewed", "published", and "unpublished". You may include multiple. The default when not supplied is "published" only.'
          in: query
          schema:
            type: string
            example: 'unpublished'
        - name: sort
          description: 'Field to sort by.'
          in: query
          schema:
            type: string
            enum:
              - timestamp_created
              - timestamp_updated
            default: timestamp_created
        - name: order
          description: 'Sort order.'
          in: query
          schema:
            type: string
            enum:
              - asc
              - desc
            default: desc
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
      responses:
        '200':
          description: 'List of policies matching the filter criteria.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    description: 'Count of results.'
                    type: integer
                    example: 50
                  results:
                    description: 'The results set.'
                    type: array
                    items:
                      $ref: '#/components/schemas/policy-schema'
        '403':
          description: 'User is not authorized to list policies.'
  '/policies/{policy_id}':
    parameters:
      - description: 'The Invotra UUID of the policy.'
        in: path
        name: policy_id
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - 'policies'
      description: 'Get information about the policy.'
      responses:
        '200':
          description: 'Returns a single complete policy object.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/policy-schema'
        '400':
          description: 'The supplied UUID was malformed.'
        '403':
          description: 'User is not authorized to show this policy.'
        '404':
          description: 'The UUID does not correspond to an existing policy.'
    put:
      tags:
        - 'policies'
      description: 'Update policy information.'
      responses:
        '200':
          description: 'The policy information was updated successfully.'
        '400':
          description: 'The supplied UUID or JSON was malformed.'
        '403':
          description: 'User is not authorized to update this policy.'
        '404':
          description: 'The UUID does not correspond to an existing policy.'
        '422':
          description: 'The policy was not updated due to a Drupal validation failure or a JSON schema validation failure.'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/policy-schema-update'
        required: true
    delete:
      tags:
        - 'policies'
      description: 'Delete a policy.'
      responses:
        '200':
          description: 'The policy was successfully deleted.'
        '400':
          description: 'The supplied UUID was malformed.'
        '403':
          description: 'User is not authorized to delete this policy.'
        '404':
          description: 'The UUID does not correspond to an existing policy.'
  '/polls':
    post:
      tags:
        - 'polls'
      description: 'Provision a new poll.'
      responses:
        '201':
          description: 'The poll was created successfully.'
          headers:
            Location:
              description: 'The URL at which the newly provisioned poll may be retrieved.'
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/successful-post-response-schema'
        '400':
          description: 'The poll was not saved due to malformed JSON.'
        '403':
          description: 'User is not authorized to create a poll.'
        '422':
          description: 'The poll was not saved due to Drupal validation failure or JSON schema validation failure.'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/poll-schema-create'
        required: true
  '/polls/list':
    get:
      tags:
        - 'polls'
      description: 'Search for polls. An empty array is returned if no polls where found.'
      parameters:
        - name: author_uuid
          description: 'Filter on Invotra UUID of the author.'
          in: query
          schema:
            type: string
            format: uuid
            example: '01234567-89ab-cdef-1234-56789abcdef0'
        - name: created_date
          description: 'Filter on date created. Format: YYYY-MM-DD.'
          in: query
          schema:
            type: string
            example: '2012-12-25'
        - name: updated_date
          description: 'Filter on date updated. Format: YYYY-MM-DD.'
          in: query
          schema:
            type: string
            example: '2012-12-25'
        - name: state
          description: 'Filter the list of custom content on a comma seperated list of states. Valid statuses are "draft", "needs_review", "reviewed", "published", and "unpublished". You may include multiple. The default when not supplied is "published" only.'
          in: query
          schema:
            type: string
            example: 'unpublished'
        - name: sort
          description: 'Field to sort by.'
          in: query
          schema:
            type: string
            enum:
              - timestamp_created
              - timestamp_updated
            default: timestamp_created
        - name: order
          description: 'Sort order.'
          in: query
          schema:
            type: string
            enum:
              - asc
              - desc
            default: desc
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
      responses:
        '200':
          description: 'List of polls matching the filter criteria.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    description: 'Count of results.'
                    type: integer
                    example: 50
                  results:
                    description: 'The results set.'
                    type: array
                    items:
                      $ref: '#/components/schemas/poll-schema'
        '403':
          description: 'User is not authorized to list polls.'
  '/polls/{poll_id}':
    parameters:
      - description: 'The Invotra UUID of the poll.'
        in: path
        name: poll_id
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - 'polls'
      description: 'Get information about the poll.'
      responses:
        '200':
          description: 'Returns a single complete poll object.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/poll-schema'
        '400':
          description: 'The supplied UUID was malformed.'
        '403':
          description: 'User is not authorized to show this poll.'
        '404':
          description: 'The UUID does not correspond to an existing poll.'
    put:
      tags:
        - 'polls'
      description: 'Update poll information.'
      responses:
        '200':
          description: 'The poll information was updated successfully.'
        '400':
          description: 'The supplied UUID or JSON was malformed.'
        '403':
          description: 'User is not authorized to update this poll.'
        '404':
          description: 'The UUID does not correspond to an existing poll.'
        '422':
          description: 'The poll was not updated due to a Drupal validation failure or a JSON schema validation failure.'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/poll-schema-update'
        required: true
    delete:
      tags:
        - 'polls'
      description: 'Delete a poll.'
      responses:
        '200':
          description: 'The poll was successfully deleted.'
        '400':
          description: 'The supplied UUID was malformed.'
        '403':
          description: 'User is not authorized to delete this poll.'
        '404':
          description: 'The UUID does not correspond to an existing poll.'
  '/promotions':
    post:
      tags:
        - 'promotions'
      description: 'Provision a new promotion.'
      responses:
        '201':
          description: 'The promotion was created successfully.'
          headers:
            Location:
              description: 'The URL at which the newly provisioned promotion may be retrieved.'
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/successful-post-response-schema'
        '400':
          description: 'The promotion was not saved due to malformed JSON.'
        '403':
          description: 'User is not authorized to create a promotion.'
        '422':
          description: 'The promotion was not saved due to Drupal validation failure or JSON schema validation failure.'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/promotion-schema-create'
        required: true
  '/promotions/list':
    get:
      tags:
        - 'promotions'
      description: 'Search for promotions. An empty array is returned if no promotions where found.'
      parameters:
        - name: author_uuid
          description: 'Filter on Invotra UUID of the author.'
          in: query
          schema:
            type: string
            format: uuid
            example: '01234567-89ab-cdef-1234-56789abcdef0'
        - name: created_date
          description: 'Filter on date created. Format: YYYY-MM-DD.'
          in: query
          schema:
            type: string
            example: '2012-12-25'
        - name: updated_date
          description: 'Filter on date updated. Format: YYYY-MM-DD.'
          in: query
          schema:
            type: string
            example: '2012-12-25'
        - name: state
          description: 'Filter the list of custom content on a comma seperated list of states. Valid statuses are "draft", "needs_review", "reviewed", "published", and "unpublished". You may include multiple. The default when not supplied is "published" only.'
          in: query
          schema:
            type: string
            example: 'unpublished'
        - name: sort
          description: 'Field to sort by.'
          in: query
          schema:
            type: string
            enum:
              - timestamp_created
              - timestamp_updated
            default: timestamp_created
        - name: order
          description: 'Sort order.'
          in: query
          schema:
            type: string
            enum:
              - asc
              - desc
            default: desc
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
      responses:
        '200':
          description: 'List of promotions matching the filter criteria.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    description: 'Count of results.'
                    type: integer
                    example: 50
                  results:
                    description: 'The results set.'
                    type: array
                    items:
                      $ref: '#/components/schemas/promotion-schema'
        '403':
          description: 'User is not authorized to list promotions.'
  '/promotions/{promotion_id}':
    parameters:
      - description: 'The Invotra UUID of the promotion.'
        in: path
        name: promotion_id
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - 'promotions'
      description: 'Get information about the promotion.'
      responses:
        '200':
          description: 'Returns a single complete promotion object.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/promotion-schema'
        '400':
          description: 'The supplied UUID was malformed.'
        '403':
          description: 'User is not authorized to show this promotion.'
        '404':
          description: 'The UUID does not correspond to an existing promotion.'
    put:
      tags:
        - 'promotions'
      description: 'Update promotion information.'
      responses:
        '200':
          description: 'The promotion information was updated successfully.'
        '400':
          description: 'The supplied UUID or JSON was malformed.'
        '403':
          description: 'User is not authorized to update this promotion.'
        '404':
          description: 'The UUID does not correspond to an existing promotion.'
        '422':
          description: 'The promotion was not updated due to a Drupal validation failure or a JSON schema validation failure.'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/promotion-schema-update'
        required: true
    delete:
      tags:
        - 'promotions'
      description: 'Delete a promotion.'
      responses:
        '200':
          description: 'The promotion was successfully deleted.'
        '400':
          description: 'The supplied UUID was malformed.'
        '403':
          description: 'User is not authorized to delete this promotion.'
        '404':
          description: 'The UUID does not correspond to an existing promotion.'
  '/manuals':
    get:
      description: Get a listing of all manuals
      tags:
        - manuals
      parameters:
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
      responses:
        '200':
          description: Returns a listing of manuals
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    description: Total count of manuals
                    type: integer
                    example: 248
                  results:
                    description: An array of manuals
                    type: array
                    items:
                      allOf:
                        - $ref: '#/components/schemas/manual-listing-schema'
  '/manuals/{manual_page_id}':
    parameters:
      - description: The Invotra UUID of a manual page.
        in: path
        name: manual_page_id
        required: true
        schema:
          type: string
          format: uuid
          example: '01234567-89ab-cdef-1234-56789abcdef0'
    get:
      description: Get a manual page, including the root manual page
      tags:
        - manuals
      responses:
        '200':
          description: Returns a single complete manual page object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/manual-page-schema'
        '400':
          description: The UUID or request body JSON was malformed.
        '403':
          description: User is not authorized to show this manual.
        '404':
          description: No manual page with that UUID was found.
  '/manuals/pages':
    get:
      description: Get all pages in a manual or manual page.
      tags:
        - manuals
      parameters:
        - name: cursor
          description: The paging cursor.
          in: query
          schema:
            type: string
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Returns a list of manual pages.
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    description: An array of manual pages
                    type: array
                    items:
                      allOf:
                        - $ref: '#/components/schemas/manual-page-listing-schema'
                  cursor:
                    description: The cursor to pass back to the endpoint for the next items.
                    type: string
        '400':
          description: The UUID was malformed.
        '401':
          description: A correct secret token was not supplied.
        '403':
          description: The user does not have access to the requested manual page.
        '404':
          description: No manual page with that UUID was found.
  '/pdf-export/{content_id}':
    get:
      description: Get content in HTML for PDF export.
      tags:
        - pdf export
      parameters:
        - name: content_id
          description: The Invotra UUID of content.
          in: path
          required: true
          schema:
            type: string
            format: uuid
            example: '01234567-89ab-cdef-1234-56789abcdef0'
        - name: workflow
          description: Include workflow history in HTML.
          in: query
          schema:
            type: boolean
            default: false
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Returns content in HTML.
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/html-response-schema'
        '400':
          description: The UUID or request body JSON was malformed.
        '401':
          description: An incorrect or malformed token was provided.
        '403':
          description: The user does not have access to the requested content.
        '404':
          description: No content with that UUID was found.
  /comments/list:
    get:
      tags:
        - comments
      description: 'Search for comments. An empty array is returned if no comments are found.'
      parameters:
        - name: content_type
          description: 'Filter on content type.'
          in: query
          schema:
            type: string
            example: 'blog'
        - name: author_uuid
          description: 'Filter on Invotra UUID of the author.'
          in: query
          schema:
            type: string
            format: uuid
            example: '01234567-89ab-cdef-1234-56789abcdef0'
        - name: created_date
          description: 'Filter on date created. Format: YYYY-MM-DD.'
          in: query
          schema:
            type: string
            example: '2012-12-25'
        - name: updated_date
          description: 'Filter on date updated. Format: YYYY-MM-DD.'
          in: query
          schema:
            type: string
            example: '2012-12-25'
        - name: category
          description: 'Filter on category (Only for post comments).'
          in: query
          schema:
            type: string
            example: 'idea'
        - name: sort
          description: 'Field to sort by.'
          in: query
          schema:
            type: string
            enum:
              - timestamp_created
              - timestamp_updated
            default: timestamp_created
        - name: order
          description: 'Sort order.'
          in: query
          schema:
            type: string
            enum:
              - asc
              - desc
            default: desc
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
      responses:
        '200':
          description: 'List of comments matching the filter criteria.'
          content:
            application/json:
              schema:
                type: object
                required:
                  - count
                  - results
                properties:
                  count:
                    description: 'Count of results.'
                    type: integer
                    example: 50
                  results:
                    description: 'The results set.'
                    allOf:
                      - $ref: '#/components/schemas/comment-schema'
        '403':
          description: 'User is not authorized to list comments.'
  /files:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/file-schema-create'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/file-schema-create'
        required: true
      tags:
        - files
      responses:
        '201':
          description: The file was created successfully.
          headers:
            Location:
              description: |
                The URL at which the file entity may be retrieved.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/successful-post-response-with-message-schema'
        '400':
          description: The file was not saved due to malformed JSON.
        '422':
          description: |
            The file was not saved due to Drupal validation failure or JSON
            schema validation failure.
      description: Provision a new file.
  '/files/{file_id}':
    parameters:
      - description: The Invotra UUID of the file.
        in: path
        name: file_id
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - files
      responses:
        '200':
          description: Returns a single complete file object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/file-schema'
        '400':
          description: The supplied UUID was malformed.
        '404':
          description: The UUID does not correspond to an existing file.
      description: Get information about the file.
    put:
      tags:
        - files
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/file-schema-update'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/file-schema-update'
        required: true
      responses:
        '200':
          description: The file was updated successfully.
        '400':
          description: The supplied UUID or JSON was malformed.
        '404':
          description: The UUID does not correspond to an existing file.
        '422':
          description: |
            The file was not updated due to a Drupal validation failure or a
            JSON schema validation failure.
  /job_roles:
    get:
      tags:
        - job roles
      parameters:
        - description: Filter by external ID.
          in: query
          name: external_id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: >
            List of job roles matching the filter criteria, or an empty array if
            none were found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/uuid-list-schema'
      description: Search for job roles.
    post:
      tags:
        - job roles
      responses:
        '201':
          description: The job role was created successfully.
          headers:
            Location:
              description: >
                The URL at which the newly provisioned job role may be
                retrieved.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/successful-post-response-with-message-schema'
        '400':
          description: The job role was not saved due to malformed JSON.
        '422':
          description: |
            The job role was not saved due to Drupal validation failure or JSON
            schema validation failure.
      description: Provision a new job role.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/job-role-schema-create'
        required: true
  '/job_roles/list':
    get:
      tags:
        - 'job roles'
      description: 'Search for job roles. An empty array is returned if no job roles are found.'
      parameters:
        - name: title
          description: 'Filter by title. Matches on whole words.'
          in: query
          schema:
            type: string
        - description: 'Filter by external ID.'
          in: query
          name: external_id
          schema:
            type: string
        - name: status
          description: 'Filter the list of job roles on a comma seperated list of statuses. Valid statuses are "published" and "unpublished", you may inlude both. The default when not supplied is "published" only.'
          in: query
          schema:
            type: string
        - name: valid_parents_for
          description: 'Filter out invalid parents (self and children) for the specified Invotra UUID of the Job Role.'
          in: query
          schema:
            type: string
            format: uuid
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
      responses:
        '200':
          description: 'List of job roles matching the filter criteria.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    description: 'Count of results.'
                    type: integer
                    example: 50
                  results:
                    description: 'The results set.'
                    type: array
                    items:
                      allOf:
                        - $ref: '#/components/schemas/job-role-list-schema'
        '403':
          description: 'User is not authorized to list job roles.'
  '/job_roles/{job_role_id}':
    parameters:
      - description: The Invotra UUID of the job role.
        in: path
        name: job_role_id
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - job roles
      responses:
        '200':
          description: Returns a single complete job role object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/job-role-schema'
        '400':
          description: The supplied UUID was malformed.
        '404':
          description: The UUID does not correspond to an existing job role.
      description: Get information about the job role.
    put:
      tags:
        - job roles
      responses:
        '200':
          description: The job role information was updated successfully.
        '400':
          description: The supplied UUID or JSON was malformed.
        '404':
          description: The UUID does not correspond to an existing job role.
        '422':
          description: |
            The job role was not updated due to a Drupal validation failure or a
            JSON schema validation failure.
      description: Update job role information.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/job-role-schema'
        required: true
    delete:
      tags:
        - job roles
      description: Remove job role information.
      responses:
        '200':
          description: The job role was removed successfully.
        '400':
          description: The supplied UUID or JSON was malformed.
        '403':
          description: The user does not have permission to remove this job role.
        '404':
          description: The UUID does not correspond to an existing job role.
  /locations:
    get:
      tags:
        - locations
      parameters:
        - description: Filter by external ID.
          in: query
          name: external_id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: >
            List of locations matching the filter criteria, or an empty array if
            none were found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/location-uuid-list-schema'
      description: Search for locations.
  /locations/list:
    get:
      tags:
        - locations
      parameters:
        - name: title
          description: Filter by title. Matches on whole words.
          in: query
          schema:
            type: string
        - name: autocomplete
          description: Autocomplete term. Matches on location name, per letter, from the start of the word.
          in: query
          schema:
            type: string
        - name: users_fulltext_search
          description: Filter the list of locations to those that include users matching a search term. This is useful when you have already searched for users and want to refine your search by location (like a faceted search). Like the fulltext_search parameter of /users/search, this matches on whole words.
          in: query
          schema:
            type: string
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
      responses:
        '200':
          description: List of locations matching the filter criteria.
          content:
            application/json:
              schema:
                type: object
                required:
                  - count
                  - results
                properties:
                  count:
                    description: Count of results.
                    type: integer
                    example: 50
                  results:
                    description: The results set.
                    allOf:
                      - $ref: '#/components/schemas/location-uuid-title-context-list-schema'
      description: 'Search for locations. An empty array is returned if no locations are found.'
  /locations/sites:
    post:
      tags:
        - locations
      responses:
        '201':
          description: The location was created successfully.
          headers:
            Location:
              description: >
                The URL at which the newly provisioned location may be
                retrieved.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/successful-post-response-with-message-schema'
        '400':
          description: The location was not saved due to malformed JSON.
        '422':
          description: |
            The location was not saved due to Drupal validation failure or JSON
            schema validation failure.
      description: Provision a new location.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/location-site-schema-create'
        required: true
  '/locations/sites/{location_id}':
    parameters:
      - description: The Invotra UUID of the location.
        in: path
        name: location_id
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - locations
      responses:
        '200':
          description: Returns a single complete location object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/location-site-schema'
        '400':
          description: The supplied UUID was malformed.
        '404':
          description: >-
            The UUID does not correspond to an existing location, or the
            location is not a site.
      description: Get information about the location.
    put:
      tags:
        - locations
      responses:
        '200':
          description: The location information was updated successfully.
        '400':
          description: The supplied UUID or JSON was malformed.
        '404':
          description: >-
            The UUID does not correspond to an existing location, or the
            location is not a site.
        '422':
          description: |
            The location was not updated due to a Drupal validation failure or a
            JSON schema validation failure.
      description: Update location information.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/location-site-schema-update'
        required: true
    delete:
      tags:
        - locations
      description: Remove location information
      responses:
        '200':
          description: The location information was removed successfully.
        '400':
          description: The supplied UUID or JSON was malformed.
        '403':
          description: The user does not have permission to remove this location.
        '404':
          description: The UUID does not correspond to an existing location, or the location is not a site.
  /locations/buildings:
    post:
      tags:
        - locations
      responses:
        '201':
          description: The location was created successfully.
          headers:
            Location:
              description: >
                The URL at which the newly provisioned location may be
                retrieved.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/successful-post-response-with-message-schema'
        '400':
          description: The location was not saved due to malformed JSON.
        '422':
          description: |
            The location was not saved due to Drupal validation failure or JSON
            schema validation failure.
      description: Provision a new location.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/location-building-schema-create'
        required: true
  '/locations/buildings/{location_id}':
    parameters:
      - description: The Invotra UUID of the location.
        in: path
        name: location_id
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - locations
      responses:
        '200':
          description: Returns a single complete location object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/location-building-schema'
        '400':
          description: The supplied UUID was malformed.
        '404':
          description: >-
            The UUID does not correspond to an existing location, or the
            location is not a building.
      description: Get information about the location.
    put:
      tags:
        - locations
      responses:
        '200':
          description: The location information was updated successfully.
        '400':
          description: The supplied UUID or JSON was malformed.
        '404':
          description: >-
            The UUID does not correspond to an existing location, or the
            location is not a building.
        '422':
          description: |
            The location was not updated due to a Drupal validation failure or a
            JSON schema validation failure.
      description: Update location information.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/location-building-schema-update'
        required: true
    delete:
      tags:
      - locations
      description: Remove location information
      responses:
        '200':
          description: The location information was removed successfully.
        '400':
          description: The supplied UUID or JSON was malformed.
        '403':
          description: The user does not have permission to remove this location.
        '404':
          description: The UUID does not correspond to an existing location, or the location is not a building.
  /locations/floors:
    post:
      tags:
        - locations
      responses:
        '201':
          description: The location was created successfully.
          headers:
            Location:
              description: >
                The URL at which the newly provisioned location may be
                retrieved.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/successful-post-response-with-message-schema'
        '400':
          description: The location was not saved due to malformed JSON.
        '422':
          description: |
            The location was not saved due to Drupal validation failure or JSON
            schema validation failure.
      description: Provision a new location.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/location-floor-schema-create'
        required: true
  '/locations/floors/{location_id}':
    parameters:
      - description: The Invotra UUID of the location.
        in: path
        name: location_id
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - locations
      responses:
        '200':
          description: Returns a single complete location object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/location-floor-schema'
        '400':
          description: The supplied UUID was malformed.
        '404':
          description: >-
            The UUID does not correspond to an existing location, or the
            location is not a floor.
      description: Get information about the location.
    put:
      tags:
        - locations
      responses:
        '200':
          description: The location information was updated successfully.
        '400':
          description: The supplied UUID or JSON was malformed.
        '404':
          description: >-
            The UUID does not correspond to an existing location, or the
            location is not a floor.
        '422':
          description: |
            The location was not updated due to a Drupal validation failure or a
            JSON schema validation failure.
      description: Update location information.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/location-floor-schema-update'
        required: true
    delete:
      tags:
      - locations
      description: Remove location information
      responses:
        '200':
          description: The location information was removed successfully.
        '400':
          description: The supplied UUID or JSON was malformed.
        '403':
          description: The user does not have permission to remove this location.
        '404':
          description: The UUID does not correspond to an existing location, or the location is not a floor.
  /locations/spaces:
    post:
      tags:
        - locations
      responses:
        '201':
          description: The location was created successfully.
          headers:
            Location:
              description: >
                The URL at which the newly provisioned location may be
                retrieved.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/successful-post-response-with-message-schema'
        '400':
          description: The location was not saved due to malformed JSON.
        '422':
          description: |
            The location was not saved due to Drupal validation failure or JSON
            schema validation failure.
      description: Provision a new location.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/location-space-schema-create'
        required: true
  '/locations/spaces/{location_id}':
    parameters:
      - description: The Invotra UUID of the location.
        in: path
        name: location_id
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - locations
      responses:
        '200':
          description: Returns a single complete location object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/location-space-schema'
        '400':
          description: The supplied UUID was malformed.
        '404':
          description: >-
            The UUID does not correspond to an existing location, or the
            location is not a space.
      description: Get information about the location.
    put:
      tags:
        - locations
      responses:
        '200':
          description: The location information was updated successfully.
        '400':
          description: The supplied UUID or JSON was malformed.
        '404':
          description: >-
            The UUID does not correspond to an existing location, or the
            location is not a space.
        '422':
          description: |
            The location was not updated due to a Drupal validation failure or a
            JSON schema validation failure.
      description: Update location information.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/location-space-schema-update'
        required: true
    delete:
      tags:
      - locations
      description: Remove location information
      responses:
        '200':
          description: The location information was removed successfully.
        '400':
          description: The supplied UUID or JSON was malformed.
        '403':
          description: The user does not have permission to remove this location.
        '404':
          description: The UUID does not correspond to an existing location, or the location is not a space.
  '/badges':
    post:
      tags:
        - 'badges'
      description: 'Provision a new badge.'
      responses:
        '201':
          description: 'The badge was created successfully.'
          headers:
            Location:
              description: 'The URL at which the newly provisioned badge may be retrieved.'
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/successful-post-response-schema'
        '400':
          description: 'The badge was not saved due to malformed JSON.'
        '403':
          description: 'User is not authorized to create a badge.'
        '422':
          description: 'The badge was not saved due to Drupal validation failure or JSON schema validation failure.'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/badge-schema-create'
        required: true
  '/badges/list':
    get:
      tags:
        - 'badges'
      description: 'Search for badges. An empty array is returned if no badges are found.'
      parameters:
        - name: name
          description: 'Filter by name. Matches on whole words.'
          in: query
          schema:
            type: string
        - description: 'Filter by external ID.'
          in: query
          name: external_id
          schema:
            type: string
        - name: status
          description: 'Filter the list of badges on a comma seperated list of statuses. Valid statuses are "published" and "unpublished", you may inlude both. The default when not supplied is "published" only.'
          in: query
          schema:
            type: string
        - name: valid_parents_for
          description: 'Filter out invalid parents (self and children) for the specified Invotra UUID of the badge.'
          in: query
          schema:
            type: string
            format: uuid
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
      responses:
        '200':
          description: 'List of badges matching the filter criteria.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    description: 'Count of results.'
                    type: integer
                    example: 50
                  results:
                    description: 'The results set.'
                    type: array
                    items:
                      allOf:
                        - $ref: '#/components/schemas/badge-schema'
        '403':
          description: 'User is not authorized to list badges.'
  '/badges/{badge_id}':
    parameters:
      - description: 'The Invotra UUID of the badge.'
        in: path
        name: badge_id
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - 'badges'
      description: 'Get information about the badge.'
      responses:
        '200':
          description: 'Returns a single complete badge object.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/badge-schema'
        '400':
          description: 'The supplied UUID was malformed.'
        '403':
          description: 'User is not authorized to show this badge.'
        '404':
          description: 'The UUID does not correspond to an existing badge.'
    put:
      tags:
        - 'badges'
      description: 'Update badge information.'
      responses:
        '200':
          description: 'The badge information was updated successfully.'
        '400':
          description: 'The supplied UUID or JSON was malformed.'
        '403':
          description: 'User is not authorized to update this badge.'
        '404':
          description: 'The UUID does not correspond to an existing badge.'
        '422':
          description: 'The badge was not updated due to a Drupal validation failure or a JSON schema validation failure.'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/badge-schema-update'
        required: true
    delete:
      tags:
        - 'badges'
      description: 'Delete a badge.'
      responses:
        '200':
          description: 'The badge was successfully deleted.'
        '400':
          description: 'The supplied UUID was malformed.'
        '403':
          description: 'User is not authorized to delete this badge.'
        '404':
          description: 'The UUID does not correspond to an existing badge.'
  '/content_categories':
    post:
      tags:
        - 'content categories'
      description: 'Provision a new content category.'
      responses:
        '201':
          description: 'The content category was created successfully.'
          headers:
            Location:
              description: 'The URL at which the newly provisioned content category may be retrieved.'
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/successful-post-response-schema'
        '400':
          description: 'The content category was not saved due to malformed JSON.'
        '403':
          description: 'User is not authorized to create a content category.'
        '422':
          description: 'The content category was not saved due to Drupal validation failure or JSON schema validation failure.'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/content-category-schema-create'
        required: true
  '/content_categories/list':
    get:
      tags:
        - 'content categories'
      description: 'Search for content categories. An empty array is returned if no content categories are found.'
      parameters:
        - name: name
          description: 'Filter by name. Matches on whole words.'
          in: query
          schema:
            type: string
        - description: 'Filter by external ID.'
          in: query
          name: external_id
          schema:
            type: string
        - name: status
          description: 'Filter the list of content categories on a comma seperated list of statuses. Valid statuses are "published" and "unpublished", you may inlude both. The default when not supplied is "published" only.'
          in: query
          schema:
            type: string
        - name: valid_parents_for
          description: 'Filter out invalid parents (self and children) for the specified Invotra UUID of the content category.'
          in: query
          schema:
            type: string
            format: uuid
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
      responses:
        '200':
          description: 'List of content categories matching the filter criteria.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    description: 'Count of results.'
                    type: integer
                    example: 50
                  results:
                    description: 'The results set.'
                    type: array
                    items:
                      allOf:
                        - $ref: '#/components/schemas/content-category-schema'
        '403':
          description: 'User is not authorized to list content categories.'
  '/content_categories/{content_category_id}':
    parameters:
      - description: 'The Invotra UUID of the content category.'
        in: path
        name: content_category_id
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - 'content categories'
      description: 'Get information about the content category.'
      responses:
        '200':
          description: 'Returns a single complete content category object.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/content-category-schema'
        '400':
          description: 'The supplied UUID was malformed.'
        '403':
          description: 'User is not authorized to show this content category.'
        '404':
          description: 'The UUID does not correspond to an existing content category.'
    put:
      tags:
        - 'content categories'
      description: 'Update content category information.'
      responses:
        '200':
          description: 'The content category information was updated successfully.'
        '400':
          description: 'The supplied UUID or JSON was malformed.'
        '403':
          description: 'User is not authorized to update this content category.'
        '404':
          description: 'The UUID does not correspond to an existing content category.'
        '422':
          description: 'The content category was not updated due to a Drupal validation failure or a JSON schema validation failure.'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/content-category-schema-common'
        required: true
    delete:
      tags:
        - 'content categories'
      description: 'Delete a content category.'
      responses:
        '200':
          description: 'The content category was successfully deleted.'
        '400':
          description: 'The supplied UUID was malformed.'
        '403':
          description: 'User is not authorized to delete this content category.'
        '404':
          description: 'The UUID does not correspond to an existing content category.'
  '/content_types':
    post:
      tags:
        - 'content types'
      description: 'Provision a new content type.'
      responses:
        '201':
          description: 'The content type was created successfully.'
          headers:
            Location:
              description: 'The URL at which the newly provisioned content type may be retrieved.'
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/successful-post-response-schema'
        '400':
          description: 'The content type was not saved due to malformed JSON.'
        '403':
          description: 'User is not authorized to create a content type.'
        '422':
          description: 'The content type was not saved due to Drupal validation failure or JSON schema validation failure.'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/content-type-schema-create'
        required: true
  '/content_types/list':
    get:
      tags:
        - 'content types'
      description: 'Search for content types. An empty array is returned if no content types are found.'
      parameters:
        - name: name
          description: 'Filter by name. Matches on whole words.'
          in: query
          schema:
            type: string
        - description: 'Filter by external ID.'
          in: query
          name: external_id
          schema:
            type: string
        - name: status
          description: 'Filter the list of content types on a comma seperated list of statuses. Valid statuses are "published" and "unpublished", you may inlude both. The default when not supplied is "published" only.'
          in: query
          schema:
            type: string
        - name: valid_parents_for
          description: 'Filter out invalid parents (self and children) for the specified Invotra UUID of the content type.'
          in: query
          schema:
            type: string
            format: uuid
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
      responses:
        '200':
          description: 'List of content types matching the filter criteria.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    description: 'Count of results.'
                    type: integer
                    example: 50
                  results:
                    description: 'The results set.'
                    type: array
                    items:
                      allOf:
                        - $ref: '#/components/schemas/content-type-schema'
        '403':
          description: 'User is not authorized to list content types.'
  '/content_types/{content_type_id}':
    parameters:
      - description: 'The Invotra UUID of the content type.'
        in: path
        name: content_type_id
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - 'content types'
      description: 'Get information about the content type.'
      responses:
        '200':
          description: 'Returns a single complete content type object.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/content-type-schema'
        '400':
          description: 'The supplied UUID was malformed.'
        '403':
          description: 'User is not authorized to show this content type.'
        '404':
          description: 'The UUID does not correspond to an existing content type.'
    put:
      tags:
        - 'content types'
      description: 'Update content type information.'
      responses:
        '200':
          description: 'The content type information was updated successfully.'
        '400':
          description: 'The supplied UUID or JSON was malformed.'
        '403':
          description: 'User is not authorized to update this content type.'
        '404':
          description: 'The UUID does not correspond to an existing content type.'
        '422':
          description: 'The content type was not updated due to a Drupal validation failure or a JSON schema validation failure.'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/content-type-schema-update'
        required: true
    delete:
      tags:
        - 'content types'
      description: 'Delete a content type.'
      responses:
        '200':
          description: 'The content type was successfully deleted.'
        '400':
          description: 'The supplied UUID was malformed.'
        '403':
          description: 'User is not authorized to delete this content type.'
        '404':
          description: 'The UUID does not correspond to an existing content type.'
  '/countries':
    post:
      tags:
        - 'countries'
      description: 'Provision a new country.'
      responses:
        '201':
          description: 'The country was created successfully.'
          headers:
            Location:
              description: 'The URL at which the newly provisioned country may be retrieved.'
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/successful-post-response-schema'
        '400':
          description: 'The country was not saved due to malformed JSON.'
        '403':
          description: 'User is not authorized to create a country.'
        '422':
          description: 'The country was not saved due to Drupal validation failure or JSON schema validation failure.'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/country-schema-create'
        required: true
  '/countries/list':
    get:
      tags:
        - 'countries'
      description: 'Search for countries. An empty array is returned if no countries are found.'
      parameters:
        - name: name
          description: 'Filter by name. Matches on whole words.'
          in: query
          schema:
            type: string
        - description: 'Filter by external ID.'
          in: query
          name: external_id
          schema:
            type: string
        - name: status
          description: 'Filter the list of countries on a comma seperated list of statuses. Valid statuses are "published" and "unpublished", you may inlude both. The default when not supplied is "published" only.'
          in: query
          schema:
            type: string
        - name: valid_parents_for
          description: 'Filter out invalid parents (self and children) for the specified Invotra UUID of the country.'
          in: query
          schema:
            type: string
            format: uuid
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
      responses:
        '200':
          description: 'List of countries matching the filter criteria.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    description: 'Count of results.'
                    type: integer
                    example: 50
                  results:
                    description: 'The results set.'
                    type: array
                    items:
                      allOf:
                        - $ref: '#/components/schemas/country-schema'
        '403':
          description: 'User is not authorized to list countries.'
  '/countries/{country_id}':
    parameters:
      - description: 'The Invotra UUID of the country.'
        in: path
        name: country_id
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - 'countries'
      description: 'Get information about the country.'
      responses:
        '200':
          description: 'Returns a single complete country object.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/country-schema'
        '400':
          description: 'The supplied UUID was malformed.'
        '403':
          description: 'User is not authorized to show this country.'
        '404':
          description: 'The UUID does not correspond to an existing country.'
    put:
      tags:
        - 'countries'
      description: 'Update country information.'
      responses:
        '200':
          description: 'The country information was updated successfully.'
        '400':
          description: 'The supplied UUID or JSON was malformed.'
        '403':
          description: 'User is not authorized to update this country.'
        '404':
          description: 'The UUID does not correspond to an existing country.'
        '422':
          description: 'The country was not updated due to a Drupal validation failure or a JSON schema validation failure.'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/country-schema-common'
        required: true
    delete:
      tags:
        - 'countries'
      description: 'Delete a country.'
      responses:
        '200':
          description: 'The country was successfully deleted.'
        '400':
          description: 'The supplied UUID was malformed.'
        '403':
          description: 'User is not authorized to delete this country.'
        '404':
          description: 'The UUID does not correspond to an existing country.'
  '/event_statuses':
    post:
      tags:
        - 'event statuses'
      description: 'Provision a new event status.'
      responses:
        '201':
          description: 'The event status was created successfully.'
          headers:
            Location:
              description: 'The URL at which the newly provisioned event status may be retrieved.'
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/successful-post-response-schema'
        '400':
          description: 'The event status was not saved due to malformed JSON.'
        '403':
          description: 'User is not authorized to create an event status.'
        '422':
          description: 'The event status was not saved due to Drupal validation failure or JSON schema validation failure.'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/event-status-schema-create'
        required: true
  '/event_statuses/list':
    get:
      tags:
        - 'event statuses'
      description: 'Search for event statuses. An empty array is returned if no event statuses are found.'
      parameters:
        - name: name
          description: 'Filter by name. Matches on whole words.'
          in: query
          schema:
            type: string
        - description: 'Filter by external ID.'
          in: query
          name: external_id
          schema:
            type: string
        - name: status
          description: 'Filter the list of event statuses on a comma seperated list of statuses. Valid statuses are "published" and "unpublished", you may inlude both. The default when not supplied is "published" only.'
          in: query
          schema:
            type: string
        - name: valid_parents_for
          description: 'Filter out invalid parents (self and children) for the specified Invotra UUID of the event status.'
          in: query
          schema:
            type: string
            format: uuid
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
      responses:
        '200':
          description: 'List of event statuses matching the filter criteria.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    description: 'Count of results.'
                    type: integer
                    example: 50
                  results:
                    description: 'The results set.'
                    type: array
                    items:
                      allOf:
                        - $ref: '#/components/schemas/event-status-schema'
        '403':
          description: 'User is not authorized to list event statuses.'
  '/event_statuses/{event_status_id}':
    parameters:
      - description: 'The Invotra UUID of the event status.'
        in: path
        name: event_status_id
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - 'event statuses'
      description: 'Get information about the event status.'
      responses:
        '200':
          description: 'Returns a single complete event status object.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/event-status-schema'
        '400':
          description: 'The supplied UUID was malformed.'
        '403':
          description: 'User is not authorized to show this event status.'
        '404':
          description: 'The UUID does not correspond to an existing event status.'
    put:
      tags:
        - 'event statuses'
      description: 'Update event status information.'
      responses:
        '200':
          description: 'The event status information was updated successfully.'
        '400':
          description: 'The supplied UUID or JSON was malformed.'
        '403':
          description: 'User is not authorized to update this event status.'
        '404':
          description: 'The UUID does not correspond to an existing event status.'
        '422':
          description: 'The event status was not updated due to a Drupal validation failure or a JSON schema validation failure.'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/event-status-schema-common'
        required: true
    delete:
      tags:
        - 'event statuses'
      description: 'Delete an event status.'
      responses:
        '200':
          description: 'The event status was successfully deleted.'
        '400':
          description: 'The supplied UUID was malformed.'
        '403':
          description: 'User is not authorized to delete this event status.'
        '404':
          description: 'The UUID does not correspond to an existing event status.'
  '/event_topics':
    post:
      tags:
        - 'event topics'
      description: 'Provision a new event topic.'
      responses:
        '201':
          description: 'The event topic was created successfully.'
          headers:
            Location:
              description: 'The URL at which the newly provisioned event topic may be retrieved.'
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/successful-post-response-schema'
        '400':
          description: 'The event topic was not saved due to malformed JSON.'
        '403':
          description: 'User is not authorized to create an event topic.'
        '422':
          description: 'The event topic was not saved due to Drupal validation failure or JSON schema validation failure.'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/event-topic-schema-create'
        required: true
  '/event_topics/list':
    get:
      tags:
        - 'event topics'
      description: 'Search for event topics. An empty array is returned if no event topics are found.'
      parameters:
        - name: name
          description: 'Filter by name. Matches on whole words.'
          in: query
          schema:
            type: string
        - description: 'Filter by external ID.'
          in: query
          name: external_id
          schema:
            type: string
        - name: status
          description: 'Filter the list of event topics on a comma seperated list of statuses. Valid statuses are "published" and "unpublished", you may inlude both. The default when not supplied is "published" only.'
          in: query
          schema:
            type: string
        - name: valid_parents_for
          description: 'Filter out invalid parents (self and children) for the specified Invotra UUID of the event topic.'
          in: query
          schema:
            type: string
            format: uuid
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
      responses:
        '200':
          description: 'List of event topics matching the filter criteria.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    description: 'Count of results.'
                    type: integer
                    example: 50
                  results:
                    description: 'The results set.'
                    type: array
                    items:
                      allOf:
                        - $ref: '#/components/schemas/event-topic-schema'
        '403':
          description: 'User is not authorized to list event topics.'
  '/event_topics/{event_topic_id}':
    parameters:
      - description: 'The Invotra UUID of the event topic.'
        in: path
        name: event_topic_id
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - 'event topics'
      description: 'Get information about the event topic.'
      responses:
        '200':
          description: 'Returns a single complete event topic object.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/event-topic-schema'
        '400':
          description: 'The supplied UUID was malformed.'
        '403':
          description: 'User is not authorized to show this event topic.'
        '404':
          description: 'The UUID does not correspond to an existing event topic.'
    put:
      tags:
        - 'event topics'
      description: 'Update event topic information.'
      responses:
        '200':
          description: 'The event topic information was updated successfully.'
        '400':
          description: 'The supplied UUID or JSON was malformed.'
        '403':
          description: 'User is not authorized to update this event topic.'
        '404':
          description: 'The UUID does not correspond to an existing event topic.'
        '422':
          description: 'The event topic was not updated due to a Drupal validation failure or a JSON schema validation failure.'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/event-topic-schema-common'
        required: true
    delete:
      tags:
        - 'event topics'
      description: 'Delete an event topic.'
      responses:
        '200':
          description: 'The event topic was successfully deleted.'
        '400':
          description: 'The supplied UUID was malformed.'
        '403':
          description: 'User is not authorized to delete this event topic.'
        '404':
          description: 'The UUID does not correspond to an existing event topic.'
  '/free_skills':
    post:
      tags:
        - 'free skills'
      description: 'Provision a new free skill.'
      responses:
        '201':
          description: 'The free skill was created successfully.'
          headers:
            Location:
              description: 'The URL at which the newly provisioned free skill may be retrieved.'
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/successful-post-response-schema'
        '400':
          description: 'The free skill was not saved due to malformed JSON.'
        '403':
          description: 'User is not authorized to create a free skill.'
        '422':
          description: 'The free skill was not saved due to Drupal validation failure or JSON schema validation failure.'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/free-skill-schema-create'
        required: true
  '/free_skills/list':
    get:
      tags:
        - 'free skills'
      description: 'Search for free skills. An empty array is returned if no free skills are found.'
      parameters:
        - name: name
          description: 'Filter by name. Matches on whole words.'
          in: query
          schema:
            type: string
        - description: 'Filter by external ID.'
          in: query
          name: external_id
          schema:
            type: string
        - name: status
          description: 'Filter the list of free skills on a comma seperated list of statuses. Valid statuses are "published" and "unpublished", you may inlude both. The default when not supplied is "published" only.'
          in: query
          schema:
            type: string
        - name: valid_parents_for
          description: 'Filter out invalid parents (self and children) for the specified Invotra UUID of the free skill.'
          in: query
          schema:
            type: string
            format: uuid
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
      responses:
        '200':
          description: 'List of free skills matching the filter criteria.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    description: 'Count of results.'
                    type: integer
                    example: 50
                  results:
                    description: 'The results set.'
                    type: array
                    items:
                      allOf:
                        - $ref: '#/components/schemas/free-skill-schema'
        '403':
          description: 'User is not authorized to list free skills.'
  '/free_skills/{free_skill_id}':
    parameters:
      - description: 'The Invotra UUID of the free skill.'
        in: path
        name: free_skill_id
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - 'free skills'
      description: 'Get information about the free skill.'
      responses:
        '200':
          description: 'Returns a single complete free skill object.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/free-skill-schema'
        '400':
          description: 'The supplied UUID was malformed.'
        '403':
          description: 'User is not authorized to show this free skill.'
        '404':
          description: 'The UUID does not correspond to an existing free skill.'
    put:
      tags:
        - 'free skills'
      description: 'Update free skill information.'
      responses:
        '200':
          description: 'The free skill information was updated successfully.'
        '400':
          description: 'The supplied UUID or JSON was malformed.'
        '403':
          description: 'User is not authorized to update this free skill.'
        '404':
          description: 'The UUID does not correspond to an existing free skill.'
        '422':
          description: 'The free skill was not updated due to a Drupal validation failure or a JSON schema validation failure.'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/free-skill-schema-common'
        required: true
    delete:
      tags:
        - 'free skills'
      description: 'Delete a free skill.'
      responses:
        '200':
          description: 'The free skill was successfully deleted.'
        '400':
          description: 'The supplied UUID was malformed.'
        '403':
          description: 'User is not authorized to delete this free skill.'
        '404':
          description: 'The UUID does not correspond to an existing free skill.'
  '/general_topics':
    post:
      tags:
        - 'general topics'
      description: 'Provision a new general topic.'
      responses:
        '201':
          description: 'The general topic was created successfully.'
          headers:
            Location:
              description: 'The URL at which the newly provisioned general topic may be retrieved.'
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/successful-post-response-schema'
        '400':
          description: 'The general topic was not saved due to malformed JSON.'
        '403':
          description: 'User is not authorized to create a general topic.'
        '422':
          description: 'The general topic was not saved due to Drupal validation failure or JSON schema validation failure.'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/general-topic-schema-create'
        required: true
  '/general_topics/list':
    get:
      tags:
        - 'general topics'
      description: 'Search for general topics. An empty array is returned if no general topics are found.'
      parameters:
        - name: name
          description: 'Filter by name. Matches on whole words.'
          in: query
          schema:
            type: string
        - description: 'Filter by external ID.'
          in: query
          name: external_id
          schema:
            type: string
        - name: status
          description: 'Filter the list of general topics on a comma seperated list of statuses. Valid statuses are "published" and "unpublished", you may inlude both. The default when not supplied is "published" only.'
          in: query
          schema:
            type: string
        - name: valid_parents_for
          description: 'Filter out invalid parents (self and children) for the specified Invotra UUID of the general topic.'
          in: query
          schema:
            type: string
            format: uuid
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
      responses:
        '200':
          description: 'List of general topics matching the filter criteria.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    description: 'Count of results.'
                    type: integer
                    example: 50
                  results:
                    description: 'The results set.'
                    type: array
                    items:
                      allOf:
                        - $ref: '#/components/schemas/general-topic-schema'
        '403':
          description: 'User is not authorized to list general topics.'
  '/general_topics/{general_topic_id}':
    parameters:
      - description: 'The Invotra UUID of the general topic.'
        in: path
        name: general_topic_id
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - 'general topics'
      description: 'Get information about the general topic.'
      responses:
        '200':
          description: 'Returns a single complete general topic object.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/general-topic-schema'
        '400':
          description: 'The supplied UUID was malformed.'
        '403':
          description: 'User is not authorized to show this general topic.'
        '404':
          description: 'The UUID does not correspond to an existing general topic.'
    put:
      tags:
        - 'general topics'
      description: 'Update general topic information.'
      responses:
        '200':
          description: 'The general topic information was updated successfully.'
        '400':
          description: 'The supplied UUID or JSON was malformed.'
        '403':
          description: 'User is not authorized to update this general topic.'
        '404':
          description: 'The UUID does not correspond to an existing general topic.'
        '422':
          description: 'The general topic was not updated due to a Drupal validation failure or a JSON schema validation failure.'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/general-topic-schema-common'
        required: true
    delete:
      tags:
        - 'general topics'
      description: 'Delete a general topic.'
      responses:
        '200':
          description: 'The general topic was successfully deleted.'
        '400':
          description: 'The supplied UUID was malformed.'
        '403':
          description: 'User is not authorized to delete this general topic.'
        '404':
          description: 'The UUID does not correspond to an existing general topic.'
  '/grades':
    post:
      tags:
        - 'grades'
      description: 'Provision a new grade.'
      responses:
        '201':
          description: 'The grade was created successfully.'
          headers:
            Location:
              description: 'The URL at which the newly provisioned grade may be retrieved.'
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/successful-post-response-schema'
        '400':
          description: 'The grade was not saved due to malformed JSON.'
        '403':
          description: 'User is not authorized to create a grade.'
        '422':
          description: 'The grade was not saved due to Drupal validation failure or JSON schema validation failure.'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/grade-schema-create'
        required: true
  '/grades/list':
    get:
      tags:
        - 'grades'
      description: 'Search for grades. An empty array is returned if no grades are found.'
      parameters:
        - name: name
          description: 'Filter by name. Matches on whole words.'
          in: query
          schema:
            type: string
        - description: 'Filter by external ID.'
          in: query
          name: external_id
          schema:
            type: string
        - name: status
          description: 'Filter the list of grades on a comma seperated list of statuses. Valid statuses are "published" and "unpublished", you may inlude both. The default when not supplied is "published" only.'
          in: query
          schema:
            type: string
        - name: valid_parents_for
          description: 'Filter out invalid parents (self and children) for the specified Invotra UUID of the grade.'
          in: query
          schema:
            type: string
            format: uuid
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
      responses:
        '200':
          description: 'List of grades matching the filter criteria.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    description: 'Count of results.'
                    type: integer
                    example: 50
                  results:
                    description: 'The results set.'
                    type: array
                    items:
                      allOf:
                        - $ref: '#/components/schemas/grade-schema'
        '403':
          description: 'User is not authorized to list grades.'
  '/grades/{grade_id}':
    parameters:
      - description: 'The Invotra UUID of the grade.'
        in: path
        name: grade_id
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - 'grades'
      description: 'Get information about the grade.'
      responses:
        '200':
          description: 'Returns a single complete grade object.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/grade-schema'
        '400':
          description: 'The supplied UUID was malformed.'
        '403':
          description: 'User is not authorized to show this grade.'
        '404':
          description: 'The UUID does not correspond to an existing grade.'
    put:
      tags:
        - 'grades'
      description: 'Update grade information.'
      responses:
        '200':
          description: 'The grade information was updated successfully.'
        '400':
          description: 'The supplied UUID or JSON was malformed.'
        '403':
          description: 'User is not authorized to update this grade.'
        '404':
          description: 'The UUID does not correspond to an existing grade.'
        '422':
          description: 'The grade was not updated due to a Drupal validation failure or a JSON schema validation failure.'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/grade-schema-common'
        required: true
    delete:
      tags:
        - 'grades'
      description: 'Delete a grade.'
      responses:
        '200':
          description: 'The grade was successfully deleted.'
        '400':
          description: 'The supplied UUID was malformed.'
        '403':
          description: 'User is not authorized to delete this grade.'
        '404':
          description: 'The UUID does not correspond to an existing grade.'
  '/group_categories':
    post:
      tags:
        - 'group categories'
      description: 'Provision a new group category.'
      responses:
        '201':
          description: 'The group category was created successfully.'
          headers:
            Location:
              description: 'The URL at which the newly provisioned group category may be retrieved.'
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/successful-post-response-schema'
        '400':
          description: 'The group category was not saved due to malformed JSON.'
        '403':
          description: 'User is not authorized to create a group category.'
        '422':
          description: 'The group category was not saved due to Drupal validation failure or JSON schema validation failure.'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/group-category-schema-create'
        required: true
  '/group_categories/list':
    get:
      tags:
        - 'group categories'
      description: 'Search for group categories. An empty array is returned if no group categories are found.'
      parameters:
        - name: name
          description: 'Filter by name. Matches on whole words.'
          in: query
          schema:
            type: string
        - description: 'Filter by external ID.'
          in: query
          name: external_id
          schema:
            type: string
        - name: status
          description: 'Filter the list of group categories on a comma seperated list of statuses. Valid statuses are "published" and "unpublished", you may inlude both. The default when not supplied is "published" only.'
          in: query
          schema:
            type: string
        - name: valid_parents_for
          description: 'Filter out invalid parents (self and children) for the specified Invotra UUID of the group category.'
          in: query
          schema:
            type: string
            format: uuid
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
      responses:
        '200':
          description: 'List of group categories matching the filter criteria.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    description: 'Count of results.'
                    type: integer
                    example: 50
                  results:
                    description: 'The results set.'
                    type: array
                    items:
                      allOf:
                        - $ref: '#/components/schemas/group-category-schema'
        '403':
          description: 'User is not authorized to list group categories.'
  '/group_categories/{group_category_id}':
    parameters:
      - description: 'The Invotra UUID of the group category.'
        in: path
        name: group_category_id
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - 'group categories'
      description: 'Get information about the group category.'
      responses:
        '200':
          description: 'Returns a single complete group category object.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/group-category-schema'
        '400':
          description: 'The supplied UUID was malformed.'
        '403':
          description: 'User is not authorized to show this group category.'
        '404':
          description: 'The UUID does not correspond to an existing group category.'
    put:
      tags:
        - 'group categories'
      description: 'Update group category information.'
      responses:
        '200':
          description: 'The group category information was updated successfully.'
        '400':
          description: 'The supplied UUID or JSON was malformed.'
        '403':
          description: 'User is not authorized to update this group category.'
        '404':
          description: 'The UUID does not correspond to an existing group category.'
        '422':
          description: 'The group category was not updated due to a Drupal validation failure or a JSON schema validation failure.'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/group-category-schema-common'
        required: true
    delete:
      tags:
        - 'group categories'
      description: 'Delete a group category.'
      responses:
        '200':
          description: 'The group category was successfully deleted.'
        '400':
          description: 'The supplied UUID was malformed.'
        '403':
          description: 'User is not authorized to delete this group category.'
        '404':
          description: 'The UUID does not correspond to an existing group category.'
  '/idea_categories':
    post:
      tags:
        - 'idea categories'
      description: 'Provision a new idea category.'
      responses:
        '201':
          description: 'The idea category was created successfully.'
          headers:
            Location:
              description: 'The URL at which the newly provisioned idea category may be retrieved.'
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/successful-post-response-schema'
        '400':
          description: 'The idea category was not saved due to malformed JSON.'
        '403':
          description: 'User is not authorized to create an idea category.'
        '422':
          description: 'The idea category was not saved due to Drupal validation failure or JSON schema validation failure.'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/idea-category-schema-create'
        required: true
  '/idea_categories/list':
    get:
      tags:
        - 'idea categories'
      description: 'Search for idea categories. An empty array is returned if no idea categories are found.'
      parameters:
        - name: name
          description: 'Filter by name. Matches on whole words.'
          in: query
          schema:
            type: string
        - description: 'Filter by external ID.'
          in: query
          name: external_id
          schema:
            type: string
        - name: status
          description: 'Filter the list of idea categories on a comma seperated list of statuses. Valid statuses are "published" and "unpublished", you may inlude both. The default when not supplied is "published" only.'
          in: query
          schema:
            type: string
        - name: valid_parents_for
          description: 'Filter out invalid parents (self and children) for the specified Invotra UUID of the idea category.'
          in: query
          schema:
            type: string
            format: uuid
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
      responses:
        '200':
          description: 'List of idea categories matching the filter criteria.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    description: 'Count of results.'
                    type: integer
                    example: 50
                  results:
                    description: 'The results set.'
                    type: array
                    items:
                      allOf:
                        - $ref: '#/components/schemas/idea-category-schema'
        '403':
          description: 'User is not authorized to list idea categories.'
  '/idea_categories/{idea_category_id}':
    parameters:
      - description: 'The Invotra UUID of the idea category.'
        in: path
        name: idea_category_id
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - 'idea categories'
      description: 'Get information about the idea category.'
      responses:
        '200':
          description: 'Returns a single complete idea category object.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/idea-category-schema'
        '400':
          description: 'The supplied UUID was malformed.'
        '403':
          description: 'User is not authorized to show this idea category.'
        '404':
          description: 'The UUID does not correspond to an existing idea category.'
    put:
      tags:
        - 'idea categories'
      description: 'Update idea category information.'
      responses:
        '200':
          description: 'The idea category information was updated successfully.'
        '400':
          description: 'The supplied UUID or JSON was malformed.'
        '403':
          description: 'User is not authorized to update this idea category.'
        '404':
          description: 'The UUID does not correspond to an existing idea category.'
        '422':
          description: 'The idea category was not updated due to a Drupal validation failure or a JSON schema validation failure.'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/idea-category-schema-common'
        required: true
    delete:
      tags:
        - 'idea categories'
      description: 'Delete an idea category.'
      responses:
        '200':
          description: 'The idea category was successfully deleted.'
        '400':
          description: 'The supplied UUID was malformed.'
        '403':
          description: 'User is not authorized to delete this idea category.'
        '404':
          description: 'The UUID does not correspond to an existing idea category.'
  '/interests':
    post:
      tags:
        - 'interests'
      description: 'Provision a new interest.'
      responses:
        '201':
          description: 'The interest was created successfully.'
          headers:
            Location:
              description: 'The URL at which the newly provisioned interest may be retrieved.'
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/successful-post-response-schema'
        '400':
          description: 'The interest was not saved due to malformed JSON.'
        '403':
          description: 'User is not authorized to create an interest.'
        '422':
          description: 'The interest was not saved due to Drupal validation failure or JSON schema validation failure.'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/interest-schema-create'
        required: true
  '/interests/list':
    get:
      tags:
        - 'interests'
      description: 'Search for interests. An empty array is returned if no interests are found.'
      parameters:
        - name: name
          description: 'Filter by name. Matches on whole words.'
          in: query
          schema:
            type: string
        - description: 'Filter by external ID.'
          in: query
          name: external_id
          schema:
            type: string
        - name: status
          description: 'Filter the list of interests on a comma seperated list of statuses. Valid statuses are "published" and "unpublished", you may inlude both. The default when not supplied is "published" only.'
          in: query
          schema:
            type: string
        - name: valid_parents_for
          description: 'Filter out invalid parents (self and children) for the specified Invotra UUID of the interest.'
          in: query
          schema:
            type: string
            format: uuid
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
      responses:
        '200':
          description: 'List of interests matching the filter criteria.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    description: 'Count of results.'
                    type: integer
                    example: 50
                  results:
                    description: 'The results set.'
                    type: array
                    items:
                      allOf:
                        - $ref: '#/components/schemas/interest-schema'
        '403':
          description: 'User is not authorized to list interests.'
  '/interests/{interest_id}':
    parameters:
      - description: 'The Invotra UUID of the interest.'
        in: path
        name: interest_id
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - 'interests'
      description: 'Get information about the interest.'
      responses:
        '200':
          description: 'Returns a single complete interest object.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/interest-schema'
        '400':
          description: 'The supplied UUID was malformed.'
        '403':
          description: 'User is not authorized to show this interest.'
        '404':
          description: 'The UUID does not correspond to an existing interest.'
    put:
      tags:
        - 'interests'
      description: 'Update interest information.'
      responses:
        '200':
          description: 'The interest information was updated successfully.'
        '400':
          description: 'The supplied UUID or JSON was malformed.'
        '403':
          description: 'User is not authorized to update this interest.'
        '404':
          description: 'The UUID does not correspond to an existing interest.'
        '422':
          description: 'The interest was not updated due to a Drupal validation failure or a JSON schema validation failure.'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/interest-schema-common'
        required: true
    delete:
      tags:
        - 'interests'
      description: 'Delete an interest.'
      responses:
        '200':
          description: 'The interest was successfully deleted.'
        '400':
          description: 'The supplied UUID was malformed.'
        '403':
          description: 'User is not authorized to delete this interest.'
        '404':
          description: 'The UUID does not correspond to an existing interest.'
  '/message_types':
    post:
      tags:
        - 'message types'
      description: 'Provision a new message type.'
      responses:
        '201':
          description: 'The message type was created successfully.'
          headers:
            Location:
              description: 'The URL at which the newly provisioned message type may be retrieved.'
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/successful-post-response-schema'
        '400':
          description: 'The message type was not saved due to malformed JSON.'
        '403':
          description: 'User is not authorized to create a message type.'
        '422':
          description: 'The message type was not saved due to Drupal validation failure or JSON schema validation failure.'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/message-type-schema-create'
        required: true
  '/message_types/list':
    get:
      tags:
        - 'message types'
      description: 'Search for message types. An empty array is returned if no message types are found.'
      parameters:
        - name: name
          description: 'Filter by name. Matches on whole words.'
          in: query
          schema:
            type: string
        - description: 'Filter by external ID.'
          in: query
          name: external_id
          schema:
            type: string
        - name: status
          description: 'Filter the list of message types on a comma seperated list of statuses. Valid statuses are "published" and "unpublished", you may inlude both. The default when not supplied is "published" only.'
          in: query
          schema:
            type: string
        - name: valid_parents_for
          description: 'Filter out invalid parents (self and children) for the specified Invotra UUID of the message type.'
          in: query
          schema:
            type: string
            format: uuid
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
      responses:
        '200':
          description: 'List of message types matching the filter criteria.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    description: 'Count of results.'
                    type: integer
                    example: 50
                  results:
                    description: 'The results set.'
                    type: array
                    items:
                      allOf:
                        - $ref: '#/components/schemas/message-type-schema'
        '403':
          description: 'User is not authorized to list message types.'
  '/message_types/{message_type_id}':
    parameters:
      - description: 'The Invotra UUID of the message type.'
        in: path
        name: message_type_id
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - 'message types'
      description: 'Get information about the message type.'
      responses:
        '200':
          description: 'Returns a single complete message type object.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/message-type-schema'
        '400':
          description: 'The supplied UUID was malformed.'
        '403':
          description: 'User is not authorized to show this message type.'
        '404':
          description: 'The UUID does not correspond to an existing message type.'
    put:
      tags:
        - 'message types'
      description: 'Update message type information.'
      responses:
        '200':
          description: 'The message type information was updated successfully.'
        '400':
          description: 'The supplied UUID or JSON was malformed.'
        '403':
          description: 'User is not authorized to update this message type.'
        '404':
          description: 'The UUID does not correspond to an existing message type.'
        '422':
          description: 'The message type was not updated due to a Drupal validation failure or a JSON schema validation failure.'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/message-type-schema-update'
        required: true
    delete:
      tags:
        - 'message types'
      description: 'Delete a message type.'
      responses:
        '200':
          description: 'The message type was successfully deleted.'
        '400':
          description: 'The supplied UUID was malformed.'
        '403':
          description: 'User is not authorized to delete this message type.'
        '404':
          description: 'The UUID does not correspond to an existing message type.'
  '/organisational_skills':
    post:
      tags:
        - 'organisational skills'
      description: 'Provision a new organisational skill.'
      responses:
        '201':
          description: 'The organisational skill was created successfully.'
          headers:
            Location:
              description: 'The URL at which the newly provisioned organisational skill may be retrieved.'
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/successful-post-response-schema'
        '400':
          description: 'The organisational skill was not saved due to malformed JSON.'
        '403':
          description: 'User is not authorized to create an organisational skill.'
        '422':
          description: 'The organisational skill was not saved due to Drupal validation failure or JSON schema validation failure.'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/organisational-skill-schema-create'
        required: true
  '/organisational_skills/list':
    get:
      tags:
        - 'organisational skills'
      description: 'Search for organisational skills. An empty array is returned if no organisational skills are found.'
      parameters:
        - name: name
          description: 'Filter by name. Matches on whole words.'
          in: query
          schema:
            type: string
        - description: 'Filter by external ID.'
          in: query
          name: external_id
          schema:
            type: string
        - name: status
          description: 'Filter the list of organisational skills on a comma seperated list of statuses. Valid statuses are "published" and "unpublished", you may inlude both. The default when not supplied is "published" only.'
          in: query
          schema:
            type: string
        - name: valid_parents_for
          description: 'Filter out invalid parents (self and children) for the specified Invotra UUID of the organisational skill.'
          in: query
          schema:
            type: string
            format: uuid
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
      responses:
        '200':
          description: 'List of organisational skills matching the filter criteria.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    description: 'Count of results.'
                    type: integer
                    example: 50
                  results:
                    description: 'The results set.'
                    type: array
                    items:
                      allOf:
                        - $ref: '#/components/schemas/organisational-skill-schema'
        '403':
          description: 'User is not authorized to list organisational skills.'
  '/organisational_skills/{organisational_skill_id}':
    parameters:
      - description: 'The Invotra UUID of the organisational skill.'
        in: path
        name: organisational_skill_id
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - 'organisational skills'
      description: 'Get information about the organisational skill.'
      responses:
        '200':
          description: 'Returns a single complete organisational skill object.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/organisational-skill-schema'
        '400':
          description: 'The supplied UUID was malformed.'
        '403':
          description: 'User is not authorized to show this organisational skill.'
        '404':
          description: 'The UUID does not correspond to an existing organisational skill.'
    put:
      tags:
        - 'organisational skills'
      description: 'Update organisational skill information.'
      responses:
        '200':
          description: 'The organisational skill information was updated successfully.'
        '400':
          description: 'The supplied UUID or JSON was malformed.'
        '403':
          description: 'User is not authorized to update this organisational skill.'
        '404':
          description: 'The UUID does not correspond to an existing organisational skill.'
        '422':
          description: 'The organisational skill was not updated due to a Drupal validation failure or a JSON schema validation failure.'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/organisational-skill-schema-common'
        required: true
    delete:
      tags:
        - 'organisational skills'
      description: 'Delete an organisational skill.'
      responses:
        '200':
          description: 'The organisational skill was successfully deleted.'
        '400':
          description: 'The supplied UUID was malformed.'
        '403':
          description: 'User is not authorized to delete this organisational skill.'
        '404':
          description: 'The UUID does not correspond to an existing organisational skill.'
  '/person_types':
    post:
      tags:
        - 'person types'
      description: 'Provision a new person type.'
      responses:
        '201':
          description: 'The person type was created successfully.'
          headers:
            Location:
              description: 'The URL at which the newly provisioned person type may be retrieved.'
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/successful-post-response-schema'
        '400':
          description: 'The person type was not saved due to malformed JSON.'
        '403':
          description: 'User is not authorized to create a person type.'
        '422':
          description: 'The person type was not saved due to Drupal validation failure or JSON schema validation failure.'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/person-type-schema-create'
        required: true
  '/person_types/list':
    get:
      tags:
        - 'person types'
      description: 'Search for person types. An empty array is returned if no person types are found.'
      parameters:
        - name: name
          description: 'Filter by name. Matches on whole words.'
          in: query
          schema:
            type: string
        - description: 'Filter by external ID.'
          in: query
          name: external_id
          schema:
            type: string
        - name: status
          description: 'Filter the list of person types on a comma seperated list of statuses. Valid statuses are "published" and "unpublished", you may inlude both. The default when not supplied is "published" only.'
          in: query
          schema:
            type: string
        - name: valid_parents_for
          description: 'Filter out invalid parents (self and children) for the specified Invotra UUID of the person type.'
          in: query
          schema:
            type: string
            format: uuid
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
      responses:
        '200':
          description: 'List of person types matching the filter criteria.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    description: 'Count of results.'
                    type: integer
                    example: 50
                  results:
                    description: 'The results set.'
                    type: array
                    items:
                      allOf:
                        - $ref: '#/components/schemas/person-type-schema'
        '403':
          description: 'User is not authorized to list person types.'
  '/person_types/{person_type_id}':
    parameters:
      - description: 'The Invotra UUID of the person type.'
        in: path
        name: person_type_id
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - 'person types'
      description: 'Get information about the person type.'
      responses:
        '200':
          description: 'Returns a single complete person type object.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/person-type-schema'
        '400':
          description: 'The supplied UUID was malformed.'
        '403':
          description: 'User is not authorized to show this person type.'
        '404':
          description: 'The UUID does not correspond to an existing person type.'
    put:
      tags:
        - 'person types'
      description: 'Update person type information.'
      responses:
        '200':
          description: 'The person type information was updated successfully.'
        '400':
          description: 'The supplied UUID or JSON was malformed.'
        '403':
          description: 'User is not authorized to update this person type.'
        '404':
          description: 'The UUID does not correspond to an existing person type.'
        '422':
          description: 'The person type was not updated due to a Drupal validation failure or a JSON schema validation failure.'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/person-type-schema-common'
        required: true
    delete:
      tags:
        - 'person types'
      description: 'Delete a person type.'
      responses:
        '200':
          description: 'The person type was successfully deleted.'
        '400':
          description: 'The supplied UUID was malformed.'
        '403':
          description: 'User is not authorized to delete this person type.'
        '404':
          description: 'The UUID does not correspond to an existing person type.'
  '/policy_types':
    post:
      tags:
        - 'policy types'
      description: 'Provision a new policy type.'
      responses:
        '201':
          description: 'The policy type was created successfully.'
          headers:
            Location:
              description: 'The URL at which the newly provisioned policy type may be retrieved.'
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/successful-post-response-schema'
        '400':
          description: 'The policy type was not saved due to malformed JSON.'
        '403':
          description: 'User is not authorized to create a policy type.'
        '422':
          description: 'The policy type was not saved due to Drupal validation failure or JSON schema validation failure.'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/policy-type-schema-create'
        required: true
  '/policy_types/list':
    get:
      tags:
        - 'policy types'
      description: 'Search for policy types. An empty array is returned if no policy types are found.'
      parameters:
        - name: name
          description: 'Filter by name. Matches on whole words.'
          in: query
          schema:
            type: string
        - description: 'Filter by external ID.'
          in: query
          name: external_id
          schema:
            type: string
        - name: status
          description: 'Filter the list of policy types on a comma seperated list of statuses. Valid statuses are "published" and "unpublished", you may inlude both. The default when not supplied is "published" only.'
          in: query
          schema:
            type: string
        - name: valid_parents_for
          description: 'Filter out invalid parents (self and children) for the specified Invotra UUID of the policy type.'
          in: query
          schema:
            type: string
            format: uuid
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
      responses:
        '200':
          description: 'List of policy types matching the filter criteria.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    description: 'Count of results.'
                    type: integer
                    example: 50
                  results:
                    description: 'The results set.'
                    type: array
                    items:
                      allOf:
                        - $ref: '#/components/schemas/policy-type-schema'
        '403':
          description: 'User is not authorized to list policy types.'
  '/policy_types/{policy_type_id}':
    parameters:
      - description: 'The Invotra UUID of the policy type.'
        in: path
        name: policy_type_id
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - 'policy types'
      description: 'Get information about the policy type.'
      responses:
        '200':
          description: 'Returns a single complete policy type object.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/policy-type-schema'
        '400':
          description: 'The supplied UUID was malformed.'
        '403':
          description: 'User is not authorized to show this policy type.'
        '404':
          description: 'The UUID does not correspond to an existing policy type.'
    put:
      tags:
        - 'policy types'
      description: 'Update policy type information.'
      responses:
        '200':
          description: 'The policy type information was updated successfully.'
        '400':
          description: 'The supplied UUID or JSON was malformed.'
        '403':
          description: 'User is not authorized to update this policy type.'
        '404':
          description: 'The UUID does not correspond to an existing policy type.'
        '422':
          description: 'The policy type was not updated due to a Drupal validation failure or a JSON schema validation failure.'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/policy-type-schema-common'
        required: true
    delete:
      tags:
        - 'policy types'
      description: 'Delete a policy type.'
      responses:
        '200':
          description: 'The policy type was successfully deleted.'
        '400':
          description: 'The supplied UUID was malformed.'
        '403':
          description: 'User is not authorized to delete this policy type.'
        '404':
          description: 'The UUID does not correspond to an existing policy type.'
  '/primary_categories':
    post:
      tags:
        - 'primary categories'
      description: 'Provision a new primary category.'
      responses:
        '201':
          description: 'The primary category was created successfully.'
          headers:
            Location:
              description: 'The URL at which the newly provisioned primary category may be retrieved.'
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/successful-post-response-schema'
        '400':
          description: 'The primary category was not saved due to malformed JSON.'
        '403':
          description: 'User is not authorized to create a primary category.'
        '422':
          description: 'The primary category was not saved due to Drupal validation failure or JSON schema validation failure.'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/primary-category-schema-create'
        required: true
  '/primary_categories/list':
    get:
      tags:
        - 'primary categories'
      description: 'Search for primary categories. An empty array is returned if no primary categories are found.'
      parameters:
        - name: name
          description: 'Filter by name. Matches on whole words.'
          in: query
          schema:
            type: string
        - description: 'Filter by external ID.'
          in: query
          name: external_id
          schema:
            type: string
        - name: status
          description: 'Filter the list of primary categories on a comma seperated list of statuses. Valid statuses are "published" and "unpublished", you may inlude both. The default when not supplied is "published" only.'
          in: query
          schema:
            type: string
        - name: valid_parents_for
          description: 'Filter out invalid parents (self and children) for the specified Invotra UUID of the primary category.'
          in: query
          schema:
            type: string
            format: uuid
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
      responses:
        '200':
          description: 'List of primary categories matching the filter criteria.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    description: 'Count of results.'
                    type: integer
                    example: 50
                  results:
                    description: 'The results set.'
                    type: array
                    items:
                      allOf:
                        - $ref: '#/components/schemas/primary-category-schema'
        '403':
          description: 'User is not authorized to list primary categories.'
  '/primary_categories/{primary_category_id}':
    parameters:
      - description: 'The Invotra UUID of the primary category.'
        in: path
        name: primary_category_id
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - 'primary categories'
      description: 'Get information about the primary category.'
      responses:
        '200':
          description: 'Returns a single complete primary category object.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/primary-category-schema'
        '400':
          description: 'The supplied UUID was malformed.'
        '403':
          description: 'User is not authorized to show this primary category.'
        '404':
          description: 'The UUID does not correspond to an existing primary category.'
    put:
      tags:
        - 'primary categories'
      description: 'Update primary category information.'
      responses:
        '200':
          description: 'The primary category information was updated successfully.'
        '400':
          description: 'The supplied UUID or JSON was malformed.'
        '403':
          description: 'User is not authorized to update this primary category.'
        '404':
          description: 'The UUID does not correspond to an existing primary category.'
        '422':
          description: 'The primary category was not updated due to a Drupal validation failure or a JSON schema validation failure.'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/primary-category-schema-common'
        required: true
    delete:
      tags:
        - 'primary categories'
      description: 'Delete a primary category.'
      responses:
        '200':
          description: 'The primary category was successfully deleted.'
        '400':
          description: 'The supplied UUID was malformed.'
        '403':
          description: 'User is not authorized to delete this primary category.'
        '404':
          description: 'The UUID does not correspond to an existing primary category.'
  '/projects':
    post:
      tags:
        - 'projects'
      description: 'Provision a new project.'
      responses:
        '201':
          description: 'The project was created successfully.'
          headers:
            Location:
              description: 'The URL at which the newly provisioned project may be retrieved.'
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/successful-post-response-schema'
        '400':
          description: 'The project was not saved due to malformed JSON.'
        '403':
          description: 'User is not authorized to create a project.'
        '422':
          description: 'The project was not saved due to Drupal validation failure or JSON schema validation failure.'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/project-schema-create'
        required: true
  '/projects/list':
    get:
      tags:
        - 'projects'
      description: 'Search for projects. An empty array is returned if no projects are found.'
      parameters:
        - name: name
          description: 'Filter by name. Matches on whole words.'
          in: query
          schema:
            type: string
        - description: 'Filter by external ID.'
          in: query
          name: external_id
          schema:
            type: string
        - name: status
          description: 'Filter the list of projects on a comma seperated list of statuses. Valid statuses are "published" and "unpublished", you may inlude both. The default when not supplied is "published" only.'
          in: query
          schema:
            type: string
        - name: valid_parents_for
          description: 'Filter out invalid parents (self and children) for the specified Invotra UUID of the project.'
          in: query
          schema:
            type: string
            format: uuid
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
      responses:
        '200':
          description: 'List of projects matching the filter criteria.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    description: 'Count of results.'
                    type: integer
                    example: 50
                  results:
                    description: 'The results set.'
                    type: array
                    items:
                      allOf:
                        - $ref: '#/components/schemas/project-schema'
        '403':
          description: 'User is not authorized to list projects.'
  '/projects/{project_id}':
    parameters:
      - description: 'The Invotra UUID of the project.'
        in: path
        name: project_id
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - 'projects'
      description: 'Get information about the project.'
      responses:
        '200':
          description: 'Returns a single complete project object.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/project-schema'
        '400':
          description: 'The supplied UUID was malformed.'
        '403':
          description: 'User is not authorized to show this project.'
        '404':
          description: 'The UUID does not correspond to an existing project.'
    put:
      tags:
        - 'projects'
      description: 'Update project information.'
      responses:
        '200':
          description: 'The project information was updated successfully.'
        '400':
          description: 'The supplied UUID or JSON was malformed.'
        '403':
          description: 'User is not authorized to update this project.'
        '404':
          description: 'The UUID does not correspond to an existing project.'
        '422':
          description: 'The project was not updated due to a Drupal validation failure or a JSON schema validation failure.'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/project-schema-common'
        required: true
    delete:
      tags:
        - 'projects'
      description: 'Delete a project.'
      responses:
        '200':
          description: 'The project was successfully deleted.'
        '400':
          description: 'The supplied UUID was malformed.'
        '403':
          description: 'User is not authorized to delete this project.'
        '404':
          description: 'The UUID does not correspond to an existing project.'
  '/query_categories':
    post:
      tags:
        - 'query categories'
      description: 'Provision a new query category.'
      responses:
        '201':
          description: 'The query category was created successfully.'
          headers:
            Location:
              description: 'The URL at which the newly provisioned query category may be retrieved.'
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/successful-post-response-schema'
        '400':
          description: 'The query category was not saved due to malformed JSON.'
        '403':
          description: 'User is not authorized to create a query category.'
        '422':
          description: 'The query category was not saved due to Drupal validation failure or JSON schema validation failure.'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/query-category-schema-create'
        required: true
  '/query_categories/list':
    get:
      tags:
        - 'query categories'
      description: 'Search for query categories. An empty array is returned if no query categories are found.'
      parameters:
        - name: name
          description: 'Filter by name. Matches on whole words.'
          in: query
          schema:
            type: string
        - description: 'Filter by external ID.'
          in: query
          name: external_id
          schema:
            type: string
        - name: status
          description: 'Filter the list of query categories on a comma seperated list of statuses. Valid statuses are "published" and "unpublished", you may inlude both. The default when not supplied is "published" only.'
          in: query
          schema:
            type: string
        - name: valid_parents_for
          description: 'Filter out invalid parents (self and children) for the specified Invotra UUID of the query category.'
          in: query
          schema:
            type: string
            format: uuid
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
      responses:
        '200':
          description: 'List of query categories matching the filter criteria.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    description: 'Count of results.'
                    type: integer
                    example: 50
                  results:
                    description: 'The results set.'
                    type: array
                    items:
                      allOf:
                        - $ref: '#/components/schemas/query-category-schema'
        '403':
          description: 'User is not authorized to list query categories.'
  '/query_categories/{query_category_id}':
    parameters:
      - description: 'The Invotra UUID of the query category.'
        in: path
        name: query_category_id
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - 'query categories'
      description: 'Get information about the query category.'
      responses:
        '200':
          description: 'Returns a single complete query category object.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/query-category-schema'
        '400':
          description: 'The supplied UUID was malformed.'
        '403':
          description: 'User is not authorized to show this query category.'
        '404':
          description: 'The UUID does not correspond to an existing query category.'
    put:
      tags:
        - 'query categories'
      description: 'Update query category information.'
      responses:
        '200':
          description: 'The query category information was updated successfully.'
        '400':
          description: 'The supplied UUID or JSON was malformed.'
        '403':
          description: 'User is not authorized to update this query category.'
        '404':
          description: 'The UUID does not correspond to an existing query category.'
        '422':
          description: 'The query category was not updated due to a Drupal validation failure or a JSON schema validation failure.'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/query-category-schema-common'
        required: true
    delete:
      tags:
        - 'query categories'
      description: 'Delete a query category.'
      responses:
        '200':
          description: 'The query category was successfully deleted.'
        '400':
          description: 'The supplied UUID was malformed.'
        '403':
          description: 'User is not authorized to delete this query category.'
        '404':
          description: 'The UUID does not correspond to an existing query category.'
  '/regions':
    post:
      tags:
        - 'regions'
      description: 'Provision a new region.'
      responses:
        '201':
          description: 'The region was created successfully.'
          headers:
            Location:
              description: 'The URL at which the newly provisioned region may be retrieved.'
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/successful-post-response-schema'
        '400':
          description: 'The region was not saved due to malformed JSON.'
        '403':
          description: 'User is not authorized to create a region.'
        '422':
          description: 'The region was not saved due to Drupal validation failure or JSON schema validation failure.'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/region-schema-create'
        required: true
  '/regions/list':
    get:
      tags:
        - 'regions'
      description: 'Search for regions. An empty array is returned if no regions are found.'
      parameters:
        - name: name
          description: 'Filter by name. Matches on whole words.'
          in: query
          schema:
            type: string
        - description: 'Filter by external ID.'
          in: query
          name: external_id
          schema:
            type: string
        - name: status
          description: 'Filter the list of regions on a comma seperated list of statuses. Valid statuses are "published" and "unpublished", you may inlude both. The default when not supplied is "published" only.'
          in: query
          schema:
            type: string
        - name: valid_parents_for
          description: 'Filter out invalid parents (self and children) for the specified Invotra UUID of the region.'
          in: query
          schema:
            type: string
            format: uuid
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
      responses:
        '200':
          description: 'List of regions matching the filter criteria.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    description: 'Count of results.'
                    type: integer
                    example: 50
                  results:
                    description: 'The results set.'
                    type: array
                    items:
                      allOf:
                        - $ref: '#/components/schemas/region-schema'
        '403':
          description: 'User is not authorized to list regions.'
  '/regions/{region_id}':
    parameters:
      - description: 'The Invotra UUID of the region.'
        in: path
        name: region_id
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - 'regions'
      description: 'Get information about the region.'
      responses:
        '200':
          description: 'Returns a single complete region object.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/region-schema'
        '400':
          description: 'The supplied UUID was malformed.'
        '403':
          description: 'User is not authorized to show this region.'
        '404':
          description: 'The UUID does not correspond to an existing region.'
    put:
      tags:
        - 'regions'
      description: 'Update region information.'
      responses:
        '200':
          description: 'The region information was updated successfully.'
        '400':
          description: 'The supplied UUID or JSON was malformed.'
        '403':
          description: 'User is not authorized to update this region.'
        '404':
          description: 'The UUID does not correspond to an existing region.'
        '422':
          description: 'The region was not updated due to a Drupal validation failure or a JSON schema validation failure.'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/region-schema-common'
        required: true
    delete:
      tags:
        - 'regions'
      description: 'Delete a region.'
      responses:
        '200':
          description: 'The region was successfully deleted.'
        '400':
          description: 'The supplied UUID was malformed.'
        '403':
          description: 'User is not authorized to delete this region.'
        '404':
          description: 'The UUID does not correspond to an existing region.'
  '/search_highlights':
    post:
      tags:
        - 'search highlights'
      description: 'Provision a new search highlight.'
      responses:
        '201':
          description: 'The search highlight was created successfully.'
          headers:
            Location:
              description: 'The URL at which the newly provisioned search highlight may be retrieved.'
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/successful-post-response-schema'
        '400':
          description: 'The search highlight was not saved due to malformed JSON.'
        '403':
          description: 'User is not authorized to create a search highlight.'
        '422':
          description: 'The search highlight was not saved due to Drupal validation failure or JSON schema validation failure.'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/search-highlight-schema-create'
        required: true
  '/search_highlights/list':
    get:
      tags:
        - 'search highlights'
      description: 'Search for search highlights. An empty array is returned if no search highlights are found.'
      parameters:
        - name: name
          description: 'Filter by name. Matches on whole words.'
          in: query
          schema:
            type: string
        - description: 'Filter by external ID.'
          in: query
          name: external_id
          schema:
            type: string
        - name: status
          description: 'Filter the list of search highlights on a comma seperated list of statuses. Valid statuses are "published" and "unpublished", you may inlude both. The default when not supplied is "published" only.'
          in: query
          schema:
            type: string
        - name: valid_parents_for
          description: 'Filter out invalid parents (self and children) for the specified Invotra UUID of the search highlight.'
          in: query
          schema:
            type: string
            format: uuid
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
      responses:
        '200':
          description: 'List of search highlights matching the filter criteria.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    description: 'Count of results.'
                    type: integer
                    example: 50
                  results:
                    description: 'The results set.'
                    type: array
                    items:
                      allOf:
                        - $ref: '#/components/schemas/search-highlight-schema'
        '403':
          description: 'User is not authorized to list search highlights.'
  '/search_highlights/{search_highlight_id}':
    parameters:
      - description: 'The Invotra UUID of the search highlight.'
        in: path
        name: search_highlight_id
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - 'search highlights'
      description: 'Get information about the search highlight.'
      responses:
        '200':
          description: 'Returns a single complete search highlight object.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/search-highlight-schema'
        '400':
          description: 'The supplied UUID was malformed.'
        '403':
          description: 'User is not authorized to show this search highlight.'
        '404':
          description: 'The UUID does not correspond to an existing search highlight.'
    put:
      tags:
        - 'search highlights'
      description: 'Update search highlight information.'
      responses:
        '200':
          description: 'The search highlight information was updated successfully.'
        '400':
          description: 'The supplied UUID or JSON was malformed.'
        '403':
          description: 'User is not authorized to update this search highlight.'
        '404':
          description: 'The UUID does not correspond to an existing search highlight.'
        '422':
          description: 'The search highlight was not updated due to a Drupal validation failure or a JSON schema validation failure.'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/search-highlight-schema-common'
        required: true
    delete:
      tags:
        - 'search highlights'
      description: 'Delete a search highlight.'
      responses:
        '200':
          description: 'The search highlight was successfully deleted.'
        '400':
          description: 'The supplied UUID was malformed.'
        '403':
          description: 'User is not authorized to delete this search highlight.'
        '404':
          description: 'The UUID does not correspond to an existing search highlight.'
  '/security_classifications':
    post:
      tags:
        - 'security classifications'
      description: 'Provision a new security classification.'
      responses:
        '201':
          description: 'The security classification was created successfully.'
          headers:
            Location:
              description: 'The URL at which the newly provisioned security classification may be retrieved.'
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/successful-post-response-schema'
        '400':
          description: 'The security classification was not saved due to malformed JSON.'
        '403':
          description: 'User is not authorized to create a security classification.'
        '422':
          description: 'The security classification was not saved due to Drupal validation failure or JSON schema validation failure.'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/security-classification-schema-create'
        required: true
  '/security_classifications/list':
    get:
      tags:
        - 'security classifications'
      description: 'Search for security classifications. An empty array is returned if no security classifications are found.'
      parameters:
        - name: name
          description: 'Filter by name. Matches on whole words.'
          in: query
          schema:
            type: string
        - description: 'Filter by external ID.'
          in: query
          name: external_id
          schema:
            type: string
        - name: status
          description: 'Filter the list of security classifications on a comma seperated list of statuses. Valid statuses are "published" and "unpublished", you may inlude both. The default when not supplied is "published" only.'
          in: query
          schema:
            type: string
        - name: valid_parents_for
          description: 'Filter out invalid parents (self and children) for the specified Invotra UUID of the security classification.'
          in: query
          schema:
            type: string
            format: uuid
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
      responses:
        '200':
          description: 'List of security classifications matching the filter criteria.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    description: 'Count of results.'
                    type: integer
                    example: 50
                  results:
                    description: 'The results set.'
                    type: array
                    items:
                      allOf:
                        - $ref: '#/components/schemas/security-classification-schema'
        '403':
          description: 'User is not authorized to list security classifications.'
  '/security_classifications/{security_classification_id}':
    parameters:
      - description: 'The Invotra UUID of the security classification.'
        in: path
        name: security_classification_id
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - 'security classifications'
      description: 'Get information about the security classification.'
      responses:
        '200':
          description: 'Returns a single complete security classification object.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/security-classification-schema'
        '400':
          description: 'The supplied UUID was malformed.'
        '403':
          description: 'User is not authorized to show this security classification.'
        '404':
          description: 'The UUID does not correspond to an existing security classification.'
    put:
      tags:
        - 'security classifications'
      description: 'Update security classification information.'
      responses:
        '200':
          description: 'The security classification information was updated successfully.'
        '400':
          description: 'The supplied UUID or JSON was malformed.'
        '403':
          description: 'User is not authorized to update this security classification.'
        '404':
          description: 'The UUID does not correspond to an existing security classification.'
        '422':
          description: 'The security classification was not updated due to a Drupal validation failure or a JSON schema validation failure.'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/security-classification-schema-common'
        required: true
    delete:
      tags:
        - 'security classifications'
      description: 'Delete a security classification.'
      responses:
        '200':
          description: 'The security classification was successfully deleted.'
        '400':
          description: 'The supplied UUID was malformed.'
        '403':
          description: 'User is not authorized to delete this security classification.'
        '404':
          description: 'The UUID does not correspond to an existing security classification.'
  '/titles':
    post:
      tags:
        - 'titles'
      description: 'Provision a new title.'
      responses:
        '201':
          description: 'The title was created successfully.'
          headers:
            Location:
              description: 'The URL at which the newly provisioned title may be retrieved.'
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/successful-post-response-schema'
        '400':
          description: 'The title was not saved due to malformed JSON.'
        '403':
          description: 'User is not authorized to create a title.'
        '422':
          description: 'The title was not saved due to Drupal validation failure or JSON schema validation failure.'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/title-schema-create'
        required: true
  '/titles/list':
    get:
      tags:
        - 'titles'
      description: 'Search for titles. An empty array is returned if no titles are found.'
      parameters:
        - name: name
          description: 'Filter by name. Matches on whole words.'
          in: query
          schema:
            type: string
        - description: 'Filter by external ID.'
          in: query
          name: external_id
          schema:
            type: string
        - name: status
          description: 'Filter the list of titles on a comma seperated list of statuses. Valid statuses are "published" and "unpublished", you may inlude both. The default when not supplied is "published" only.'
          in: query
          schema:
            type: string
        - name: valid_parents_for
          description: 'Filter out invalid parents (self and children) for the specified Invotra UUID of the title.'
          in: query
          schema:
            type: string
            format: uuid
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
      responses:
        '200':
          description: 'List of titles matching the filter criteria.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    description: 'Count of results.'
                    type: integer
                    example: 50
                  results:
                    description: 'The results set.'
                    type: array
                    items:
                      allOf:
                        - $ref: '#/components/schemas/title-schema'
        '403':
          description: 'User is not authorized to list titles.'
  '/titles/{title_id}':
    parameters:
      - description: 'The Invotra UUID of the title.'
        in: path
        name: title_id
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - 'titles'
      description: 'Get information about the title.'
      responses:
        '200':
          description: 'Returns a single complete title object.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/title-schema'
        '400':
          description: 'The supplied UUID was malformed.'
        '403':
          description: 'User is not authorized to show this title.'
        '404':
          description: 'The UUID does not correspond to an existing title.'
    put:
      tags:
        - 'titles'
      description: 'Update title information.'
      responses:
        '200':
          description: 'The title information was updated successfully.'
        '400':
          description: 'The supplied UUID or JSON was malformed.'
        '403':
          description: 'User is not authorized to update this title.'
        '404':
          description: 'The UUID does not correspond to an existing title.'
        '422':
          description: 'The title was not updated due to a Drupal validation failure or a JSON schema validation failure.'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/title-schema-common'
        required: true
    delete:
      tags:
        - 'titles'
      description: 'Delete a title.'
      responses:
        '200':
          description: 'The title was successfully deleted.'
        '400':
          description: 'The supplied UUID was malformed.'
        '403':
          description: 'User is not authorized to delete this title.'
        '404':
          description: 'The UUID does not correspond to an existing title.'
  '/user_categories':
    post:
      tags:
        - 'user categories'
      description: 'Provision a new user category.'
      responses:
        '201':
          description: 'The user category was created successfully.'
          headers:
            Location:
              description: 'The URL at which the newly provisioned user category may be retrieved.'
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/successful-post-response-schema'
        '400':
          description: 'The user category was not saved due to malformed JSON.'
        '403':
          description: 'User is not authorized to create a user category.'
        '422':
          description: 'The user category was not saved due to Drupal validation failure or JSON schema validation failure.'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/user-category-schema-create'
        required: true
  '/user_categories/list':
    get:
      tags:
        - 'user categories'
      description: 'Search for user categories. An empty array is returned if no user categories are found.'
      parameters:
        - name: name
          description: 'Filter by name. Matches on whole words.'
          in: query
          schema:
            type: string
        - description: 'Filter by external ID.'
          in: query
          name: external_id
          schema:
            type: string
        - name: status
          description: 'Filter the list of user categories on a comma seperated list of statuses. Valid statuses are "published" and "unpublished", you may inlude both. The default when not supplied is "published" only.'
          in: query
          schema:
            type: string
        - name: valid_parents_for
          description: 'Filter out invalid parents (self and children) for the specified Invotra UUID of the user category.'
          in: query
          schema:
            type: string
            format: uuid
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
      responses:
        '200':
          description: 'List of user categories matching the filter criteria.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    description: 'Count of results.'
                    type: integer
                    example: 50
                  results:
                    description: 'The results set.'
                    type: array
                    items:
                      allOf:
                        - $ref: '#/components/schemas/user-category-schema'
        '403':
          description: 'User is not authorized to list user categories.'
  '/user_categories/{user_category_id}':
    parameters:
      - description: 'The Invotra UUID of the user category.'
        in: path
        name: user_category_id
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - 'user categories'
      description: 'Get information about the user category.'
      responses:
        '200':
          description: 'Returns a single complete user category object.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user-category-schema'
        '400':
          description: 'The supplied UUID was malformed.'
        '403':
          description: 'User is not authorized to show this user category.'
        '404':
          description: 'The UUID does not correspond to an existing user category.'
    put:
      tags:
        - 'user categories'
      description: 'Update user category information.'
      responses:
        '200':
          description: 'The user category information was updated successfully.'
        '400':
          description: 'The supplied UUID or JSON was malformed.'
        '403':
          description: 'User is not authorized to update this user category.'
        '404':
          description: 'The UUID does not correspond to an existing user category.'
        '422':
          description: 'The user category was not updated due to a Drupal validation failure or a JSON schema validation failure.'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/user-category-schema-common'
        required: true
    delete:
      tags:
        - 'user categories'
      description: 'Delete a user category.'
      responses:
        '200':
          description: 'The user category was successfully deleted.'
        '400':
          description: 'The supplied UUID was malformed.'
        '403':
          description: 'User is not authorized to delete this user category.'
        '404':
          description: 'The UUID does not correspond to an existing user category.'
  /notifications:
    get:
      tags:
        - notifications
      parameters:
        - description: Filter the notifications for the mobile app. If true, this will return notifications with entity type user, and entity type node and bundle type post only.
          in: query
          name: app_notifications_only
          schema:
            type: boolean
            default: false
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
      responses:
        '200':
          description: List of a users notifications.
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    description: Count of results.
                    type: integer
                    example: 50
                  results:
                    description: The results set.
                    type: array
                    items:
                      $ref: '#/components/schemas/notification-item-schema'
      description: Retrieve notifications for a user.
  '/notifications/{notification_id}':
    parameters:
      - description: The Invotra UUID of the notification.
        in: path
        name: notification_id
        required: true
        schema:
          type: string
          format: uuid
    put:
      tags:
        - notifications
      responses:
        '200':
          description: The user marked the notification as read.
        '400':
          description: The UUID was malformed.
        '404':
          description: |
            The notification does not exist.
      description: Mark a notification as read.
  '/notifications/clear_all':
    parameters:
      - description: Marks all notifications for the mobile app as read. If true, this will mark as read notifications with entity type user, and entity type node and bundle type post only.
        in: query
        name: app_notifications_only
        schema:
          type: boolean
          default: false
    post:
      tags:
        - notifications
      responses:
        '204':
          description: The user marked the notifications as read.
        '403':
          description: User is not authorized to clear all notifications.
      description: Clear all notifications for the current user.
  /notifications/register/{service_id}:
    parameters:
      - description: Identifying name of the notification service to be used.
        in: path
        name: service_id
        required: true
        schema:
          type: string
          enum:
            - apns
            - fcm
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/push-notifications-schema'
        required: true
      tags:
        - notifications
      description: Register a token and device id to identify the user with a push notification service.
      responses:
        '200':
          description: The token and device id was already registered.
        '201':
          description: The token and device id was registered successfully.
        '404':
          description: Unknown service.
    delete:
      tags:
        - notifications
      description: 'Deregister the device the user is using for push notifications.'
      parameters:
        - in: query
          name: device_id
          required: true
          description: 'The unique device id of the device the user is using.'
          example: 'adcd1234'
          schema:
            type: string
        - in: query
          name: platform
          required: true
          description: 'The platform the of the device the user is using.'
          example: 'ios'
          schema:
            type: string
            enum:
              - ios
              - android
      responses:
        '200':
          description: 'The device id was deregistered.'
        '404':
          description: 'The device id was not found or the service was unknown.'
  /feeds/status:
    get:
      tags:
        - feeds
      responses:
        '200':
          description: Feed item status for user retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/feed-status-schema'
      description: Check if any new feed items are available for a user.
    put:
      tags:
        - feeds
      responses:
        '200':
          description: Feed item status for user updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/feed-status-schema'
      description: Set the feed as read for a user. You should only set this to 0.
  /feeds:
    get:
      tags:
        - feeds
      parameters:
        - in: query
          name: page
          required: true
          description: Page to pull results from.
          schema:
            type: integer
        - in: query
          description: Filter the feed for the mobile app. Returns only group related messages.
          name: app_feeds_only
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: Returns the feed for a user.
          content:
            application/json:
              schema:
                type: object
                required:
                  - count
                  - results
                properties:
                  count:
                    description: Count of results.
                    type: integer
                    example: 50
                  results:
                    description: The results set.
                    type: array
                    items:
                      $ref: '#/components/schemas/feed-schema'
      description: Returns the feed for a user.
components:
  securitySchemes:
    APIKeyHeader:
      type: apiKey
      in: header
      name: X-API-Key
    SessionCookieHeader:
      type: apiKey
      name: SSESS{name}
      in: cookie
    BearerAuth:
      type: http
      scheme: bearer
  parameters:
    offsetParam:
      in: query
      name: offset
      required: false
      schema:
        type: integer
        minimum: 0
        default: 0
      description: The number of items to skip before starting to collect the result set.
    limitParam:
      in: query
      name: limit
      required: false
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 25
      description: The numbers of items to return. If the value specified is more than the maximum, the result count will be limited to the maximum.
  schemas:
    successful-post-response-schema:
      type: object
      properties:
        uuid:
          description: The UUID of the entity
          type: string
          format: uuid
          example: 01234567-89ab-cdef-1234-56789abcdef0
          readOnly: true
      required:
        - uuid
    successful-post-response-with-message-schema:
      type: object
      allOf:
        - $ref: '#/components/schemas/successful-post-response-schema'
        - properties:
            message:
              description: The message included in the response.
              type: string
              example: The post was created successfully.
              deprecated: true
      required:
        - message
        - uuid
    pdf-export-completion-schema:
      type: object
      properties:
        url:
          description: The S3 URL of resulting PDF.
          type: string
          example: http://s3.amazon.com/...
      required:
        - url
    pdf-export-error-schema:
      type: object
      properties:
        error:
          description: The human-readable error response.
          type: string
      required:
        - error
    branding-schema:
      properties:
        logo:
          description: The logo for the site.
          type: string
          format: url
          example: 'https://dev.invotra.com/sites/default/files/logo.png'
        mobile_logo:
          description: The mobile logo for the site.
          type: string
          format: url
          example: 'https://dev.invotra.com/sites/default/files/mobile_logo.png'
        navigation_first_level_nav_link:
          description: This is the colour for the main navigation text. Any CSS colour allowed.
          type: string
          example: '#FFFFFF'
        navigation_menu_background_colour:
          description: This is the colour for the main navigation background. Any CSS colour allowed.
          type: string
          example: '#FFFFFF'
        toolbar_background_colour:
          description: This is the colour for the toolbar background. Any CSS colour allowed.
          type: string
          example: '#FFFFFF'
        toolbar_text_colour:
          description: This is the colour for the toolbar text. Any CSS colour allowed.
          type: string
          example: '#FFFFFF'
        mobile_icons_colour:
          description: This is the colour for the mobile icons on the toolbar. Any CSS colour allowed.
          type: string
          example: '#FFFFFF'
        standard_button_normal_state_colour:
          description: This is the standard button colour. Any CSS colour allowed.
          type: string
          example: '#FFFFFF'
        standard_button_normal_state_border_colour:
          description: This is the standard button border colour. Any CSS colour allowed.
          type: string
          example: '#FFFFFF'
        standard_button_normal_state_text_colour:
          description: This is the standard button text colour. Any CSS colour allowed.
          type: string
          example: '#FFFFF'
        primary_button_normal_state_colour:
          description: This is the primary button colour. Any CSS colour allowed.
          type: string
          example: '#FFFFFF'
        primary_button_normal_state_border_colour:
          description: This is the primary button border colour. Any CSS colour allowed.
          type: string
          example: '#FFFFFF'
        link_colour:
          description: This is the colour for hyperlinks. Any CSS colour allowed.
          type: string
          example: '#FFFFFF'
        vertical_tabs_colour:
          description: This is the colour for vertical tabs. Any CSS colour allowed.
          type: string
          example: '#FFFFFF'
      type: object
    status-schema:
      type: object
      properties:
        status:
          description: 'Status of the API.'
          type: string
          enum: ['OK']
        timestamp:
          description: 'Time on the server as a timestamp (in seconds).'
          type: integer
          example: 1563357496
        datetime:
          description: 'Time on the server in a human readable format. The format is not guaranteed to be stable; software should read the timestamp field instead.'
          type: string
          example: 'Wed, 17 Jul 2019 09:58:16 GMT'
    product-options-schema:
      type: object
      required:
        - invotra_notes
        - invotra_notifications_page
      properties:
        invotra_notes:
          type: boolean
        invotra_notifications_page:
          type: boolean
      example:
        invotra_notes: true
        invotra_notifications_page: false
    configuration-schema:
      type: object
      properties:
        analytics:
          type: object
          properties:
            matomo:
              type: object
              properties:
                enabled:
                  type: boolean
                url:
                  type: string
                site_id:
                  type: object
                  properties:
                    desktop:
                      type: integer
                      example: 1
                    mobile:
                      type: integer
                      example: 2
    session-schema:
      required:
        - username
        - password
      properties:
        username:
          description: The username that the user logs in with
          type: string
        password:
          description: The password that the user logs in with
          type: string
    feed-schema:
      required:
        - user_uuid
        - user_image
        - username
        - entity_uuid
        - entity_title
        - entity_body
        - timestamp
        - link
        - short_text
        - topic
        - category
        - category_colour
        - likes
        - comment_count
        - current_user_liked
      properties:
        user_uuid:
          description: This is the uuid of the user who triggered the feed message
          type: string
          format: uuid
          example: 01234567-89ab-cdef-1234-56789abcdef0
        user_image:
          description: This is image of the user who triggered the feed message
          type: string
          format: url
          example: >-
            https://dev.invotra.com/system/files/user-picture/large_avatar/1f0c6cb5-a3c3-4197-bebc-b3e44462dc24/profile.png
        username:
          description: The username of the user who triggered the feed message
          type: string
          example: Dorothy.Whitehead@akagera.com
        display_name:
          description: The display name of the user who triggered the feed message
          type: string
          example: Dorothy Whitehead
        teams:
          description: The user's teams. An array of team names and UUIDs.
          allOf:
            - $ref: '#/components/schemas/title-uuid-list-common-schema'
        locations:
          description: The user's locations. An array of location names and UUIDs.
          allOf:
            - $ref: '#/components/schemas/title-uuid-list-common-schema'
        job_roles:
          description: The user's job roles. An array of job role names and UUIDs.
          allOf:
            - $ref: '#/components/schemas/title-uuid-list-common-schema'
        entity_uuid:
          description: The UUID of the entity that the feed message is about
          type: string
          format: uuid
          example: 01234567-89ab-cdef-1234-56789abcdef0
        entity_title:
          description: The title of the entity that the feed message is about
          type: string
          example: A post about annual leave
        entity_body:
          description: The main body text of the entity
          type: string
          example: I'm taking annual leave next Thursday. Cover to be announced shortly
        entity_type:
          description: The type of entity that the feed message is about
          type: string
          enum:
            - node
            - comment
            - user
        entity_image:
          description: The featured image for this post
          type: object
          allOf:
            - $ref: '#/components/schemas/file-schema'
        timestamp:
          description: This is the timestamp (in seconds) of when the feed message was created
          type: integer
          example: 1510941596
        link:
          description: This is link to the entity that the feed message is about
          type: string
          format: url
          example: >-
            https://dev.invotra.com/uuid/node/1f0c6cb5-a3c3-4197-bebc-b3e44462dc26
        short_text:
          description: >-
            Contextual text for the feed message, with placeholders @user for the user's name and optionally @group for the group name.
          type: string
          example: "@user created the following within @group"
        topic:
          description: 'This is topic of the feed, used for filtering'
          type: string
          enum:
            - people
            - groups
            - content
        category:
          description: The category of a post
          type: string
          enum:
            - Comment
            - Note
            - Done
            - News / Event
            - Suggestion
            - Question
            - To Do
            - Problem / Risk
            - Agreed
            - Decision
        category_colour:
          description: Colour for the category. Any CSS colour allowed.
          type: string
          example: '#FFFFFF'
        likes:
          description: Count of the likes for this feed message
          type: integer
          example: 5
        comment_count:
          description: Count of the comments for this feed message
          type: integer
          example: 5
        current_user_liked:
          description: A flag to determine if the current user has liked this post
          type: boolean
          example: true
        group_name:
          description: This is the name of the group
          type: string
          example: Operations
        group_uuid:
          description: This is the uuid of the group
          type: string
          format: uuid
          example: 01234567-89ab-cdef-1234-56789abcdef0
      type: object
    feed-status-schema:
      required:
        - feed
      type: object
      properties:
        feed:
          description: This is the feed flag
          type: integer
          enum:
            - 0
            - 1
    notification-item-schema:
      required:
        - uuid
      properties:
        uuid:
          description: This is the uuid of the notification
          type: string
          format: uuid
          example: 01234567-89ab-cdef-1234-56789abcdef0
        timestamp:
          description: This is the timestamp (in seconds) of when the notification was created
          type: integer
          example: 1510941596
        image:
          description: This is image of the user who created the notification
          type: string
          example: 'https://dev.invotra.com/files/styles/large_avatar/public/user.png'
        link:
          description: This is link to the notification
          type: string
          example: 'https://dev.invotra.com/post/ill-be-annual-leave'
        message:
          description: This is text description of the notification
          type: string
          example: Bob Matthews mentioned you in a post.
        type:
          description: This is type of the notification
          type: string
          enum:
            - invotra.user.mention
            - invotra.user.follow
            - invotra.comment.reply
            - invotra.post.like
            - invotra.post.comment
            - invotra.comment.like
        status:
          description: Whether the notification has been read or not
          type: boolean
          example: true
        target_uuid:
          description: This is the uuid of the entity that the notification links to
          type: string
          format: uuid
          example: 01234567-89ab-cdef-1234-56789abcdef0
        target_type:
          description: This is the type of the entity that the notification links to
          type: string
          enum:
            - node
            - user
            - comment
        target_subtype:
          description: This is the subtype (or "bundle" in Drupal parlance) of the entity that the notification links to
          type: string
          example: 'group_status'
        title:
          description: The user who generated the notification
          type: string
          example: Bob Matthews
        body:
          description: The subject of the notification
          type: string
          example: mentioned you in a post
      type: object
    team-schema:
      required:
        - uuid
        - title
      properties:
        uuid:
          description: The UUID of the team
          type: string
          format: uuid
          example: 01234567-89ab-cdef-1234-56789abcdef0
          readOnly: true
        title:
          description: This is the name of the team
          type: string
          example: Operations
        description:
          description: 'This is a description of the team, optional.'
          type: string
          example: The operations team
        external_id:
          description: This is used to store the team's external reference id
          type: string
          example: ABC123
        parent_uuid:
          description: 'This is the Invotra UUID of the parent team, optional.'
          type: string
          format: uuid
          example: 01234567-89ab-cdef-1234-56789abcdef0
      type: object
    team-list-schema:
      allOf:
        - $ref: '#/components/schemas/team-schema'
        - properties:
            context:
              type: array
              items:
                $ref: '#/components/schemas/team-schema'
    team-schema-create:
      allOf:
        - $ref: '#/components/schemas/team-schema'
      required:
        - title
      type: object
    user-schema:
      allOf:
        - $ref: '#/components/schemas/user-schema-common'
        - properties:
            authname:
              description: 'The authname (SSO unique ID) of the user.'
              type: object
              properties:
                saml:
                  type: array
                  description: 'SAML authnames. Use unique and unchanging values, preferably GUIDs.'
                  example: ['N2IwNTFmYjYtOGQ2MS00Yjg0LTlhMTgtMzRkY2M5OTFhNDI2']
                  items:
                    type: string
                cognito:
                  type: array
                  description: 'Cognito authnames. The authname format is ALB instance name and Cognito sub joined with colon.'
                  example: ['internal:9a9f0894-8c7e-4854-a30b-2d3e127507b7', 'external:d869e002-5567-47cc-9fc1-5dcdd8280632']
                  items:
                    type: string
    user-schema-common:
      properties:
        uuid:
          description: The UUID of the user
          type: string
          format: uuid
          example: 01234567-89ab-cdef-1234-56789abcdef0
          readOnly: true
        username:
          description: The user's username
          type: string
          example: Dorothy Whitehead
        user_avatar:
          description: The user's image
          type: string
          example: "https://dev.invotra.com/sites/default/files/styles/large_avatar/public/Dorothy%20Whitehead.jpg?itok=6p19"
        email:
          description: Users email address
          format: email
          type: string
          example: dorothy.whitehead@akagera.com
        external_id:
          description: The user's external reference ID
          type: string
          example: ABC123
        roles:
          items:
            default: Organisational user
            description: This is the default Invotra user role
            enum:
              - Organisational user
              - Webmaster
              - Author
              - Moderator
              - Editor
              - Publisher
              - Content reviewer
              - Section manager
              - Previewer
              - Redacted
              - Brand manager
              - Blogger
              - Ideas administrator
              - OU administrator
              - Location admin
              - Content layout manager
              - External user
              - Queries administrator
            type: string
          type: array
          example:
            - Organisational user
            - Webmaster
          uniqueItems: true
        status:
          default: Active
          description: Flag to indicate whether account is active or blocked
          enum:
            - Active
            - Blocked
          type: string
        phone:
          description: The user's telephone number.
          type: string
          example: +1-23-456-789
        mobile:
          description: The user's mobile number.
          type: string
          example: +1-23-456-789
        manager_uuid:
          description: This is the Invotra UUID of the user's manager.
          type: string
          format: uuid
          example: 01234567-89ab-cdef-1234-56789abcdef0
        firstname:
          description: The user's first name
          type: string
          example: Dorothy
        surname:
          description: The user's surname
          type: string
          example: Whitehead
        title:
          default: ''
          description: The user's title
          enum:
            - ''
            - Dr
            - Mr
            - Miss
            - Mrs
            - Ms
          type: string
          example: Mr
        person_type:
          description: This is the Invotra UUID of the user's person type.
          type: string
          format: uuid
          example: 01234567-89ab-cdef-1234-56789abcdef0
        team:
          description: This is the Invotra UUID of the user's team.
          type: string
          format: uuid
          example: 01234567-89ab-cdef-1234-56789abcdef0
          deprecated: true
        location:
          description: This is the Invotra UUID of the user's location.
          type: string
          format: uuid
          example: 01234567-89ab-cdef-1234-56789abcdef0
          deprecated: true
        job_role:
          description: This is the Invotra UUID of the user's job role.
          type: string
          format: uuid
          example: 01234567-89ab-cdef-1234-56789abcdef0
          deprecated: true
        teams:
          description: The user's teams. An array of team names and UUIDs.
          allOf:
            - $ref: '#/components/schemas/title-uuid-list-common-schema'
        locations:
          description: The user's locations. An array of location names and UUIDs.
          allOf:
            - $ref: '#/components/schemas/title-uuid-list-common-schema'
        job_roles:
          description: The user's job roles. An array of job role names and UUIDs.
          allOf:
            - $ref: '#/components/schemas/title-uuid-list-common-schema'
        role_grades:
          description: The user's role grades. An array of role grade names and UUIDs.
          allOf:
            - $ref: '#/components/schemas/title-uuid-list-common-schema'
        user_uuid:
          description: The UUID of the user
          type: string
          format: uuid
          example: 01234567-89ab-cdef-1234-56789abcdef0
          deprecated: true
          readOnly: true
      type: object
    user-schema-update:
      allOf:
        - $ref: '#/components/schemas/user-schema-common'
        - properties:
            job_roles:
              allOf:
                - $ref: '#/components/schemas/title-or-uuid-writable-list-schema'
    user-schema-create:
      allOf:
        - $ref: '#/components/schemas/user-schema-update'
        - properties:
            password:
              description: The password that the user logs in with
              type: string
              writeOnly: true
            authname:
              description: 'The authname (SSO unique ID) of the user.'
              type: object
              properties:
                saml:
                  type: array
                  description: 'SAML authnames. Use unique and unchanging values, preferably GUIDs.'
                  example: ['N2IwNTFmYjYtOGQ2MS00Yjg0LTlhMTgtMzRkY2M5OTFhNDI2']
                  items:
                    type: string
                cognito:
                  type: array
                  description: 'Cognito authnames. The authname format is ALB instance name and Cognito sub joined with colon.'
                  example: ['internal:9a9f0894-8c7e-4854-a30b-2d3e127507b7', 'external:d869e002-5567-47cc-9fc1-5dcdd8280632']
                  items:
                    type: string
        - required:
            - email
            - username
    user-metrics-accessed-schema:
      type: object
      properties:
        access_threshold_users:
          description: 'Users who accessed the site on 4 or more days within a month'
          type: integer
          example: 500
    user-metrics-profiles-schema:
      type: object
      properties:
        user_count:
          description: 'The total number of active users (i.e. not blocked)'
          type: integer
          example: 500
        users_with_profile_photos:
          description: 'Number of active user (i.e. not blocked) profiles with a profile photo'
          type: integer
          example: 500
        users_with_descriptions:
          description: 'Number of active user (i.e. not blocked) profiles with text in the description field'
          type: integer
          example: 500
    user-search-schema:
      allOf:
        - $ref: '#/components/schemas/user-schema'
        - type: object
          properties:
            user_uuid:
              description: This is the uuid of the user
              type: string
              example: 1f0c6cb5-a3c3-4197-bebc-b3e44462dc23
    common-status-schema:
      type: object
      required:
        - status
      properties:
        status:
          description: A boolean flag
          type: boolean
          example: true
    group-membership-status-schema:
      type: object
      required:
        - status
      properties:
        status:
          description: |
            'active', if the user is a member, 'inactive' if not, or 'pending' if they have requested but not yet been granted membership.
          type: string
          enum:
            - active
            - inactive
            - pending
    group-schema:
      required:
        - title
        - description
        - group_category
        - group_category_uuid
        - privacy_setting
        - members_count
        - likes
        - author_uuid
      properties:
        title:
          description: This is the name of the group
          type: string
          example: Security awareness
        description:
          description: This is a description of the group.
          type: string
          example: A group to discuss security awareness.
        group_category:
          description: The category for the group.
          type: string
          example: Security
          readOnly: true
        group_category_uuid:
          description: The uuid of the category
          type: string
          format: uuid
          example: 01234567-89ab-cdef-1234-56789abcdef0
        privacy_setting:
          description: This is the privacy setting for the group.
          type: string
          enum:
            - Public
            - Private
            - Secret
        members_count:
          description: A count of members in group
          type: integer
          example: 150
          readOnly: true
        likes:
          description: Total likes for all content in the group.
          type: integer
          example: 200
          readOnly: true
        author_uuid:
          description: The uuid of the author
          type: string
          format: uuid
          example: 01234567-89ab-cdef-1234-56789abcdef0
          readOnly: true
        external_id:
          description: This is used to store the group's external reference ID.
          type: string
          example: ABC123
        timestamp_created:
          description: 'The timestamp (in seconds) of when the group was created'
          type: integer
          example: 1510941596
        timestamp_updated:
          description: 'The timestamp (in seconds) of when the group was updated'
          type: integer
          example: 1510941596
      type: object
    group-search-schema:
      allOf:
        - $ref: '#/components/schemas/group-schema'
        - type: object
          required:
            - group_uuid
          properties:
            group_uuid:
              description: The UUID of the group.
              type: string
              format: uuid
              example: 01234567-89ab-cdef-1234-56789abcdef0
    group-membership-common-schema:
      type: object
      properties:
        type:
          description: The membership type.
          type: string
          enum:
            - admin
            - member
      required:
        - type
    group-metrics-schema:
      type: object
      properties:
        likes:
          description: Total likes of content and replies across all groups.
          type: integer
          example: 500
        members_count:
          description: Total number of users that are a member of at least one group.
          type: integer
          example: 150
    group-document-folder-schema:
      allOf:
        - type: object
          properties:
            uuid:
              description: 'Invotra UUID of the group document folder.'
              type: string
              format: uuid
              example: '01234567-89ab-cdef-1234-56789abcdef0'
            has_children:
              description: 'Indicates that this group document folder has children.'
              type: boolean
              example: true
        - $ref: '#/components/schemas/group-document-folder-schema-common'
    group-document-folder-schema-update:
      allOf:
        - $ref: '#/components/schemas/group-document-folder-schema-common'
    group-document-folder-schema-create:
      allOf:
        - $ref: '#/components/schemas/group-document-folder-schema-common'
        - type: object
          required:
            - name
    group-document-folder-schema-common:
      type: object
      properties:
        name:
          description: 'Name of the group document folder.'
          type: string
          example: 'Sales Documents'
        external_id:
          description: 'The group document folder external reference id.'
          type: string
          example: 'ABC123'
        parent_uuid:
          description: 'Invotra UUID of the parent group document folder.'
          example: '01234567-89ab-cdef-1234-56789abcdef0'
          type: string
          format: uuid
        weight:
          description: 'Determines the position of a group document folder in the hierarchy in relation to its siblings.'
          type: integer
          example: 3
    post-schema:
      allOf:
        - $ref: '#/components/schemas/post-schema-base'
        - type: object
          required:
            - uuid
            - description
            - author_uuid
            - likes_count
            - comment_count
            - timestamp
          properties:
            uuid:
              type: string
              format: uuid
              description: This is the Invotra UUID of the post.
              example: 01234567-89ab-cdef-1234-56789abcdef0
            parent_uuid:
              type: string
              format: uuid
              description: This is the Invotra UUID of the parent of the post.
              example: 01234567-89ab-cdef-1234-56789abcdef0
            thread_uuid:
              type: string
              format: uuid
              description: This is the Invotra UUID of the root post of this thread (same as uuid if this is the root post).
              example: 01234567-89ab-cdef-1234-56789abcdef0
            group_uuid:
              description: This is the Invotra UUID of the group that the post belongs to.
              example: 01234567-89ab-cdef-1234-56789abcdef0
              type: string
              format: uuid
            description:
              description: The HTML-rendered main body of the post. Do not use this value for editing - use the value in the source field instead.
              type: string
              example: 'Hey <a href="/users/username" data-mentioned-uuid="1f1397e1-c263-4477-84a0-ca6c1c1560fe">@John Smith</a>, check out the latest <a href="/apps/groups/chat?hashtag=security">#security</a> news in this group!'
            pin:
              description: Whether or not this post is pinned.
              type: boolean
            author_uuid:
              description: The uuid of the author
              type: string
              format: uuid
              example: 01234567-89ab-cdef-1234-56789abcdef0
            display_name:
              description: The display name of the author
              type: string
              example: Dorothy Whitehead
            likes_count:
              description: Count of likes on the post
              type: integer
              example: 5
            comment_count:
              description: Count of comments on the post
              type: integer
              example: 5
            attachments_count:
              description: Count of attachments on the post
              type: integer
              example: 5
            timestamp:
              description: This is the timestamp (in seconds) of when the post was created
              type: integer
              example: 1510941596
            depth:
              description: The depth of the post in the hierarchy of replies. Top-level posts are 0, their replies are 1, replies to replies are 2 etc.
              type: integer
              example: 1
            current_user_liked:
              description: A flag to determine if the current user has liked this post
              type: boolean
              example: true
    post-schema-create:
      allOf:
        - $ref: '#/components/schemas/post-schema-base'
        - type: object
          properties:
            parent_uuid:
              type: string
              format: uuid
              description: This is the Invotra UUID of the parent of the post.
              example: 01234567-89ab-cdef-1234-56789abcdef0
            author_uuid:
              description: The uuid of the author
              type: string
              format: uuid
              example: 01234567-89ab-cdef-1234-56789abcdef0
            group_uuid:
              description: This is the Invotra UUID of the group that the post belongs to.
              example: 01234567-89ab-cdef-1234-56789abcdef0
              type: string
              format: uuid
      required:
        - description
        - group_uuid
        - author_uuid
    post-schema-base:
      properties:
        source:
          description: The unrendered main body for the post. This value should be used only for editing and is *NOT* safe to display as-is in any HTML context.
          type: string
          example: 'Hey [@username], check out the latest #security news in this group!'
        external_id:
          description: This is used to store the post's external reference id
          type: string
          example: ABC123
        category:
          description: The category of a post
          type: string
          enum:
            - Comment
            - Note
            - Done
            - News / Event
            - Suggestion
            - Question
            - To Do
            - Problem / Risk
            - Agreed
            - Decision
        featured_image:
          description: The featured image for this post
          type: object
          allOf:
            - $ref: '#/components/schemas/file-schema'
        attachments:
          description: A list of attachments for the post
          type: array
          items:
            allOf:
              - $ref: '#/components/schemas/file-schema'
      type: object
    post-report-schema-create:
      properties:
        reason:
          description: Reason for flagging post as inappropriate
          type: string
          example: I find this offensive
      required:
        - reason
    post-category-schema:
      properties:
        name:
          description: 'Category name'
          type: string
          example: Note
        uuid:
          description: 'This is the Invotra UUID of the category.'
          example: 01234567-89ab-cdef-1234-56789abcdef0
          type: string
          format: uuid
        category_colour:
          description: Colour of the category. Any CSS colour allowed.
          type: string
          example: '#FFFFFF'
      type: object
    blog-schema:
      allOf:
        - type: object
          properties:
            uuid:
              description: 'Invotra UUID of the blog.'
              type: string
              format: uuid
              example: '01234567-89ab-cdef-1234-56789abcdef0'
        - $ref: '#/components/schemas/blog-schema-common'
        - type: object
          properties:
            image:
              description: 'Blog Image.'
              type: object
              allOf:
                - $ref: '#/components/schemas/file-schema'
            author:
              description: 'The author of this blog.'
              type: object
              allOf:
                - $ref: '#/components/schemas/user-trimmed-schema'
            general_topic:
              type: object
              properties:
                uuid:
                  description: 'Invotra UUID of the general topic.'
                  type: string
                  format: uuid
                  example: '01234567-89ab-cdef-1234-56789abcdef0'
                name:
                  description: 'This is the name of the general topic.'
                  type: string
                  example: 'Darts'
            timestamp_created:
              description: 'This is the timestamp (in seconds) of when the blog was created.'
              type: integer
              example: 1510941596
            timestamp_updated:
              description: 'This is the timestamp (in seconds) of when the blog was last updated.'
              type: integer
              example: 1510941696
            comment_count:
              description: 'Count of comments on the blog.'
              type: integer
              example: 5
            likes_count:
              description: 'Count of likes on the blog.'
              type: integer
              example: 5
            published:
              description: 'Published status of the blog.'
              type: boolean
              example: true
    blog-schema-update:
      allOf:
        - $ref: '#/components/schemas/blog-schema-common'
        - type: object
          properties:
            image:
              description: 'The image for this blog.'
              type: object
              properties:
                uuid:
                  description: 'Invotra UUID of the image.'
                  type: string
                  format: uuid
                  example: '01234567-89ab-cdef-1234-56789abcdef0'
            general_topic:
              description: 'The genetal topic of this blog.'
              type: object
              properties:
                uuid:
                  description: 'Invotra UUID of the genetal topic.'
                  type: string
                  format: uuid
                  example: '01234567-89ab-cdef-1234-56789abcdef0'
    blog-schema-create:
      allOf:
        - $ref: '#/components/schemas/blog-schema-common'
        - type: object
          properties:
            image:
              description: 'The image for this blog.'
              type: object
              properties:
                uuid:
                  description: 'Invotra UUID of the image.'
                  type: string
                  format: uuid
                  example: '01234567-89ab-cdef-1234-56789abcdef0'
            general_topic:
              description: 'The general topic of this blog.'
              type: object
              properties:
                uuid:
                  description: 'Invotra UUID of the general topic.'
                  type: string
                  format: uuid
                  example: '01234567-89ab-cdef-1234-56789abcdef0'
          required:
            - title
            - body
            - state
    blog-schema-common:
      type: object
      properties:
        title:
          description: 'Title of the blog.'
          type: string
          example: 'Guidelines for creating a strong password'
        body:
          description: 'The body of the blog.'
          type: string
          example: 'You can create strong passwords using an offline random password generator.'
        state:
          description: 'Indicates the workflow state of the blog.'
          type: string
          enum:
            - 'published'
            - 'unpublished'
    custom-content-schema:
      allOf:
        - type: object
          properties:
            uuid:
              description: 'Invotra UUID of the custom content.'
              type: string
              format: uuid
              example: '01234567-89ab-cdef-1234-56789abcdef0'
        - $ref: '#/components/schemas/custom-content-schema-common'
        - type: object
          properties:
            schedule_date_timestamp:
              description: 'The timestamp of the schedule date (in seconds). If present the content is scheduled for a workflow state change, if not, the workflow state will be changed immediately.'
              type: integer
              example: 1510941596
            site_section:
              description: 'The site section of this custom content.'
              type: object
              properties:
                uuid:
                  description: 'Invotra UUID of the site section.'
                  type: string
                  format: uuid
                  example: '01234567-89ab-cdef-1234-56789abcdef0'
                name:
                  description: 'The name of the site section.'
                  type: string
                  example: 'Operations'
            image:
              description: 'Custom content Image'
              type: object
              allOf:
                - $ref: '#/components/schemas/file-schema'
            author:
              description: 'The author of this custom content. (Will use the authenticated user if not supplied.'
              type: object
              allOf:
                - $ref: '#/components/schemas/user-trimmed-schema'
            attachments:
              description: 'List of attachments on the custom content.'
              type: array
              items:
                $ref: '#/components/schemas/file-schema'
            owner:
              description: 'The owner user of the custom content.'
              type: object
              allOf:
                - $ref: '#/components/schemas/user-trimmed-schema'
            team:
              type: object
              properties:
                uuid:
                  description: 'Invotra UUID of the team.'
                  type: string
                  format: uuid
                  example: '01234567-89ab-cdef-1234-56789abcdef0'
                name:
                  description: This is the name of the team
                  type: string
                  example: Operations
            locations:
              description: 'The locations targeting this custom content.'
              type: array
              items:
                type: object
                properties:
                  uuid:
                    description: 'Invotra UUID of the location.'
                    type: string
                    format: uuid
                    example: '01234567-89ab-cdef-1234-56789abcdef0'
                  name:
                    description: The name of the location.
                    type: string
                    example: Chertsey House
                  type:
                    description: The location type.
                    type: string
                    enum:
                      - site
                      - building
                      - floor
                      - space
            grades:
              description: 'The grades targeting this custom content.'
              type: array
              items:
                type: object
                properties:
                  uuid:
                    description: 'Invotra UUID of the grade.'
                    type: string
                    format: uuid
                    example: '01234567-89ab-cdef-1234-56789abcdef0'
                  name:
                    description: 'Name of the grade.'
                    type: string
                    example: 'Grade 3'
            regions:
              description: 'The regions targeting this custom content.'
              type: array
              items:
                type: object
                properties:
                  uuid:
                    description: 'Invotra UUID of the region.'
                    type: string
                    format: uuid
                    example: '01234567-89ab-cdef-1234-56789abcdef0'
                  name:
                    description: 'Name of the region.'
                    type: string
                    example: 'Midlands'
            timestamp_created:
              description: 'This is the timestamp (in seconds) of when the content was created.'
              type: integer
              example: 1510941596
            timestamp_updated:
              description: 'This is the timestamp (in seconds) of when the content was last updated.'
              type: integer
              example: 1510941696
            comment_count:
              description: 'Count of comments on the content.'
              type: integer
              example: 5
            likes_count:
              description: 'Count of likes on the content.'
              type: integer
              example: 5
            published:
              description: 'Published status for the custom content.'
              type: boolean
              example: true
    custom-content-schema-update:
      allOf:
        - $ref: '#/components/schemas/custom-content-schema-common'
        - type: object
          properties:
            schedule_date_timestamp:
              description: 'The timestamp of the schedule date (in seconds). If present the content is scheduled for a workflow state change, if not, the workflow state will be changed immediately.'
              type: integer
              example: 1510941596
            site_section:
              description: 'The site section of this custom content.'
              type: object
              properties:
                uuid:
                  description: 'Invotra UUID of the site section.'
                  type: string
                  format: uuid
                  example: '01234567-89ab-cdef-1234-56789abcdef0'
            image:
              description: 'The image for this custom content'
              type: object
              properties:
                uuid:
                  description: 'Invotra UUID of the image.'
                  type: string
                  format: uuid
                  example: '01234567-89ab-cdef-1234-56789abcdef0'
            author:
              description: 'The author of this custom content. (Will use the authenticated user if not supplied.'
              type: object
              properties:
                uuid:
                  description: 'Invotra UUID of the user.'
                  type: string
                  format: uuid
                  example: '01234567-89ab-cdef-1234-56789abcdef0'
            attachments:
              description: 'The attatched files of this custom content.'
              type: array
              items:
                type: object
                properties:
                  uuid:
                    description: 'Invotra UUID of the file.'
                    type: string
                    format: uuid
                    example: '01234567-89ab-cdef-1234-56789abcdef0'
            owner:
              description: 'The owner of this custom content.'
              type: object
              properties:
                uuid:
                  description: 'Invotra UUID of the user.'
                  type: string
                  format: uuid
                  example: '01234567-89ab-cdef-1234-56789abcdef0'
            team:
              description: 'The team targeting this custom content.'
              type: object
              properties:
                uuid:
                  description: 'Invotra UUID of the team.'
                  type: string
                  format: uuid
                  example: '01234567-89ab-cdef-1234-56789abcdef0'
            locations:
              description: 'The locations targeting this custom content.'
              type: array
              items:
                type: object
                properties:
                  uuid:
                    description: 'Invotra UUID of the location.'
                    type: string
                    format: uuid
                    example: '01234567-89ab-cdef-1234-56789abcdef0'
            grades:
              description: 'The grades targeting this custom content.'
              type: array
              items:
                type: object
                properties:
                  uuid:
                    description: 'Invotra UUID of the grade.'
                    type: string
                    format: uuid
                    example: '01234567-89ab-cdef-1234-56789abcdef0'
            regions:
              description: 'The regions targeting this custom content.'
              type: array
              items:
                type: object
                properties:
                  uuid:
                    description: 'Invotra UUID of the region.'
                    type: string
                    format: uuid
                    example: '01234567-89ab-cdef-1234-56789abcdef0'
    custom-content-schema-create:
      allOf:
        - $ref: '#/components/schemas/custom-content-schema-common'
        - type: object
          properties:
            site_section:
              description: 'The site section of this custom content.'
              type: object
              properties:
                uuid:
                  description: 'Invotra UUID of the site section.'
                  type: string
                  format: uuid
                  example: '01234567-89ab-cdef-1234-56789abcdef0'
            image:
              description: 'The image for this custom content'
              type: object
              properties:
                uuid:
                  description: 'Invotra UUID of the image.'
                  type: string
                  format: uuid
                  example: '01234567-89ab-cdef-1234-56789abcdef0'
            author:
              description: 'The author of this custom content. (Will use the authenticated user if not supplied.'
              type: object
              properties:
                uuid:
                  description: 'Invotra UUID of the user.'
                  type: string
                  format: uuid
                  example: '01234567-89ab-cdef-1234-56789abcdef0'
            attachments:
              description: 'The attatched files of this custom content.'
              type: array
              items:
                type: object
                properties:
                  uuid:
                    description: 'Invotra UUID of the file.'
                    type: string
                    format: uuid
                    example: '01234567-89ab-cdef-1234-56789abcdef0'
            owner:
              description: 'The owner of this custom content.'
              type: object
              properties:
                uuid:
                  description: 'Invotra UUID of the user.'
                  type: string
                  format: uuid
                  example: '01234567-89ab-cdef-1234-56789abcdef0'
            team:
              description: 'The team targeting this custom content.'
              type: object
              properties:
                uuid:
                  description: 'Invotra UUID of the team.'
                  type: string
                  format: uuid
                  example: '01234567-89ab-cdef-1234-56789abcdef0'
            locations:
              description: 'The locations targeting this custom content.'
              type: array
              items:
                type: object
                properties:
                  uuid:
                    description: 'Invotra UUID of the location.'
                    type: string
                    format: uuid
                    example: '01234567-89ab-cdef-1234-56789abcdef0'
            grades:
              description: 'The grades targeting this custom content.'
              type: array
              items:
                type: object
                properties:
                  uuid:
                    description: 'Invotra UUID of the grade.'
                    type: string
                    format: uuid
                    example: '01234567-89ab-cdef-1234-56789abcdef0'
            regions:
              description: 'The regions targeting this custom content.'
              type: array
              items:
                type: object
                properties:
                  uuid:
                    description: 'Invotra UUID of the region.'
                    type: string
                    format: uuid
                    example: '01234567-89ab-cdef-1234-56789abcdef0'
          required:
            - custom_content_type
            - title
            - body
            - state
            - site_section
            - review_date_timestamp
            - owner
    custom-content-schema-common:
      type: object
      properties:
        custom_content_type:
          description: 'The the custom content type machine name.'
          type: string
          example: 'guideline'
        title:
          description: 'Title of the custom content.'
          type: string
          example: 'Guidelines for creating a strong password'
        body:
          description: 'The body of the custom content.'
          type: string
          example: 'You can create strong passwords using an offline random password generator.'
        state:
          description: 'Indicates the workflow state of the custom content.'
          type: string
          enum:
            - 'draft'
            - 'needs_review'
            - 'reviewed'
            - 'published'
            - 'unpublished'
        review_date_timestamp:
          description: 'The review date timestamp for the custom content (in seconds).'
          type: integer
          example: 1510941596
        related_external_links:
          description: 'Related external links for the custom content'
          type: array
          items:
            type: object
            properties:
              title:
                description: 'The title for the external link.'
                type: string
                example: 'More information on the Invotra site.'
              url:
                description: 'The url for the external link'
                type: string
                example: 'https://dev.invotra.com/info/passwords'
        related_content_links:
          description: 'Related content links for the custom content'
          type: array
          items:
            type: object
            properties:
              type:
                description: 'The type of related content.'
                type: string
                enum:
                  - 'content'
                  - 'site section'
                  - 'file'
              title:
                description: 'The title for the related content.'
                type: string
                example: 'More information here.'
              uuid:
                description: 'Invotra UUID of the related content.'
                type: string
                format: uuid
                example: '01234567-89ab-cdef-1234-56789abcdef0'
        enable_comments:
          description: 'Indicates that comments are enabled for this content.'
          type: boolean
          default: true
          example: true
        featured:
          description: 'Indicates that this content is featured.'
          type: boolean
          default: false
          example: false
        external_id:
          description: 'The custom content external reference id.'
          type: string
          example: 'ABC123'
    gallery-schema:
      allOf:
        - $ref: '#/components/schemas/gallery-schema-common'
        - type: object
          properties:
            uuid:
              description: 'Invotra UUID of the gallery.'
              type: string
              format: uuid
              example: '01234567-89ab-cdef-1234-56789abcdef0'
            site_section:
              description: 'The site section of this gallery.'
              type: object
              properties:
                uuid:
                  description: 'Invotra UUID of the site section.'
                  type: string
                  format: uuid
                  example: '01234567-89ab-cdef-1234-56789abcdef0'
                name:
                  description: 'This is the name of the site section.'
                  type: string
                  example: 'Finance'
            image:
              description: 'Gallery image.'
              type: object
              allOf:
                - $ref: '#/components/schemas/file-schema'
            author:
              description: 'The author of this gallery.'
              type: object
              allOf:
                - $ref: '#/components/schemas/user-trimmed-schema'
            gallery_items:
              description: 'The gallery items.'
              type: array
              items:
                allOf:
                  - $ref: '#/components/schemas/file-schema'
            owner:
              description: 'The owner of this gallery.'
              type: object
              allOf:
                - $ref: '#/components/schemas/user-trimmed-schema'
            team:
              description: 'The team targeting this gallery.'
              type: object
              properties:
                uuid:
                  description: 'Invotra UUID of the team.'
                  type: string
                  format: uuid
                  example: '01234567-89ab-cdef-1234-56789abcdef0'
                name:
                  description: 'This is the name of the team.'
                  type: string
                  example: 'Operations'
            locations:
              description: 'The locations targeting this gallery.'
              type: array
              items:
                allOf:
                  - $ref: '#/components/schemas/location-trimmed-schema'
            grades:
              description: 'The grades targeting this gallery.'
              type: array
              items:
                type: object
                properties:
                  uuid:
                    description: 'Invotra UUID of the grade.'
                    type: string
                    format: uuid
                    example: '01234567-89ab-cdef-1234-56789abcdef0'
                  name:
                    description: 'Name of the grade.'
                    type: string
                    example: 'Grade 3'
            regions:
              description: 'The regions targeting this gallery.'
              type: array
              items:
                type: object
                properties:
                  uuid:
                    description: 'Invotra UUID of the region.'
                    type: string
                    format: uuid
                    example: '01234567-89ab-cdef-1234-56789abcdef0'
                  name:
                    description: 'Name of the region.'
                    type: string
                    example: 'Midlands'
            timestamp_created:
              description: 'This is the timestamp (in seconds) of when the gallery was created.'
              type: integer
              example: 1510941596
            timestamp_updated:
              description: 'This is the timestamp (in seconds) of when the gallery was last updated.'
              type: integer
              example: 1510941696
            comment_count:
              description: 'Count of comments on the gallery.'
              type: integer
              example: 5
            likes_count:
              description: 'Count of likes on the gallery.'
              type: integer
              example: 5
            published:
              description: 'Published status for the gallery.'
              type: boolean
              example: true
    gallery-schema-update:
      allOf:
        - $ref: '#/components/schemas/gallery-schema-common'
        - type: object
          properties:
            site_section:
              description: 'The site section of this gallery.'
              type: object
              properties:
                uuid:
                  description: 'Invotra UUID of the site section.'
                  type: string
                  format: uuid
                  example: '01234567-89ab-cdef-1234-56789abcdef0'
            image:
              description: 'The image for this gallery.'
              type: object
              properties:
                uuid:
                  description: 'Invotra UUID of the image.'
                  type: string
                  format: uuid
                  example: '01234567-89ab-cdef-1234-56789abcdef0'
            author:
              description: 'The author of this gallery.'
              type: object
              properties:
                uuid:
                  description: 'Invotra UUID of the user.'
                  type: string
                  format: uuid
                  example: '01234567-89ab-cdef-1234-56789abcdef0'
            gallery_items:
              description: 'The gallery items.'
              type: object
              properties:
                uuid:
                  description: 'Invotra UUID of the gallery item.'
                  type: string
                  format: uuid
                  example: '01234567-89ab-cdef-1234-56789abcdef0'
            owner:
              description: 'The owner of this gallery.'
              type: object
              properties:
                uuid:
                  description: 'Invotra UUID of the owner user.'
                  type: string
                  format: uuid
                  example: '01234567-89ab-cdef-1234-56789abcdef0'
            team:
              description: 'The team targeting of this gallery.'
              type: object
              properties:
                uuid:
                  description: 'Invotra UUID of the team.'
                  type: string
                  format: uuid
                  example: '01234567-89ab-cdef-1234-56789abcdef0'
            locations:
              description: 'The locations targeting this gallery.'
              type: array
              items:
                type: object
                properties:
                  uuid:
                    description: 'Invotra UUID of the location.'
                    type: string
                    format: uuid
                    example: '01234567-89ab-cdef-1234-56789abcdef0'
            grades:
              description: 'The grades targeting this gallery.'
              type: array
              items:
                type: object
                properties:
                  uuid:
                    description: 'Invotra UUID of the grade.'
                    type: string
                    format: uuid
                    example: '01234567-89ab-cdef-1234-56789abcdef0'
            regions:
              description: 'The regions targeting this gallery.'
              type: array
              items:
                type: object
                properties:
                  uuid:
                    description: 'Invotra UUID of the region.'
                    type: string
                    format: uuid
                    example: '01234567-89ab-cdef-1234-56789abcdef0'
    gallery-schema-create:
      allOf:
        - $ref: '#/components/schemas/gallery-schema-common'
        - type: object
          properties:
            site_section:
              description: 'The site section of this gallery.'
              type: object
              properties:
                uuid:
                  description: 'Invotra UUID of the site section.'
                  type: string
                  format: uuid
                  example: '01234567-89ab-cdef-1234-56789abcdef0'
            image:
              description: 'The image for this gallery.'
              type: object
              properties:
                uuid:
                  description: 'Invotra UUID of the image.'
                  type: string
                  format: uuid
                  example: '01234567-89ab-cdef-1234-56789abcdef0'
            author:
              description: 'The author of this gallery.'
              type: object
              properties:
                uuid:
                  description: 'Invotra UUID of the user.'
                  type: string
                  format: uuid
                  example: '01234567-89ab-cdef-1234-56789abcdef0'
            gallery_items:
              description: 'The gallery items.'
              type: object
              properties:
                uuid:
                  description: 'Invotra UUID of the gallery item.'
                  type: string
                  format: uuid
                  example: '01234567-89ab-cdef-1234-56789abcdef0'
            owner:
              description: 'The owner of this gallery.'
              type: object
              properties:
                uuid:
                  description: 'Invotra UUID of the owner user.'
                  type: string
                  format: uuid
                  example: '01234567-89ab-cdef-1234-56789abcdef0'
            team:
              description: 'The team targeting of this gallery.'
              type: object
              properties:
                uuid:
                  description: 'Invotra UUID of the team.'
                  type: string
                  format: uuid
                  example: '01234567-89ab-cdef-1234-56789abcdef0'
            locations:
              description: 'The locations targeting this gallery.'
              type: array
              items:
                type: object
                properties:
                  uuid:
                    description: 'Invotra UUID of the location.'
                    type: string
                    format: uuid
                    example: '01234567-89ab-cdef-1234-56789abcdef0'
            grades:
              description: 'The grades targeting this gallery.'
              type: array
              items:
                type: object
                properties:
                  uuid:
                    description: 'Invotra UUID of the grade.'
                    type: string
                    format: uuid
                    example: '01234567-89ab-cdef-1234-56789abcdef0'
            regions:
              description: 'The regions targeting this gallery.'
              type: array
              items:
                type: object
                properties:
                  uuid:
                    description: 'Invotra UUID of the region.'
                    type: string
                    format: uuid
                    example: '01234567-89ab-cdef-1234-56789abcdef0'
          required:
            - title
            - body
            - state
            - site_section
            - review_date_timestamp
            - owner
    gallery-schema-common:
      type: object
      properties:
        title:
          description: 'Title of the gallery.'
          type: string
          example: 'Gallery showing the new car park.'
        body:
          description: 'The body of the gallery.'
          type: string
          example: 'The car park is having the line markings repainted, see the pictures.'
        state:
          description: 'Indicates the workflow state of the gallery.'
          type: string
          enum:
            - 'draft'
            - 'needs_review'
            - 'reviewed'
            - 'published'
            - 'unpublished'
        schedule_date_timestamp:
          description: 'The timestamp of the schedule date (in seconds). If present the content is scheduled for a workflow state change, if not, the workflow state will be changed immediately.'
          type: integer
          example: 1510941596
        review_date_timestamp:
          description: 'The review date timestamp for the gallery (in seconds).'
          type: integer
          example: 1510941596
        related_external_links:
          description: 'Related external links for the gallery.'
          type: array
          items:
            type: object
            properties:
              title:
                description: 'The title for the external link.'
                type: string
                example: 'More information on the Invotra site.'
              url:
                description: 'The url for the external link'
                type: string
                example: 'https://dev.invotra.com/info/passwords'
        related_content_links:
          description: 'Related content links for the gallery.'
          type: array
          items:
            type: object
            properties:
              type:
                description: 'The type of related content.'
                type: string
                enum:
                  - 'content'
                  - 'site section'
                  - 'file'
              title:
                description: 'The title for the related content.'
                type: string
                example: 'More information here.'
              uuid:
                description: 'Invotra UUID of the related content.'
                type: string
                format: uuid
                example: '01234567-89ab-cdef-1234-56789abcdef0'
        enable_comments:
          description: 'Indicates that comments are enabled for this content.'
          type: boolean
          default: true
          example: true
        featured:
          description: 'Indicates that this gallery is featured.'
          type: boolean
          default: false
          example: false
        external_id:
          description: 'The gallery external reference id.'
          type: string
          example: 'ABC123'
    group-poll-schema:
      allOf:
        - $ref: '#/components/schemas/group-poll-schema-common'
        - type: object
          properties:
            uuid:
              description: 'Invotra UUID of the group poll.'
              type: string
              format: uuid
              example: '01234567-89ab-cdef-1234-56789abcdef0'
            author:
              description: 'The author of this group poll.'
              type: object
              allOf:
                - $ref: '#/components/schemas/user-trimmed-schema'
            group:
              description: 'The group for this group poll.'
              type: object
              allOf:
                - $ref: '#/components/schemas/group-schema'
            options:
              description: 'The options for this group poll, with vote counts.'
              type: array
              minItems: 2
              maxItems: 26
              items:
                type: object
                properties:
                  option:
                    description: 'The option text.'
                    type: string
                  vote_count:
                    description: 'The current vote count for this option.'
                    type: integer
              example:
                - option: 'Pork'
                  vote_count: 12
                - option: 'Beef'
                  vote_count: 24
                - option: 'Mutton'
                  vote_count: 48
            timestamp_created:
              description: 'This is the timestamp (in seconds) of when the group poll was created.'
              type: integer
              example: 1510941596
            timestamp_updated:
              description: 'This is the timestamp (in seconds) of when the group poll was last updated.'
              type: integer
              example: 1510941696
            comment_count:
              description: 'Count of comments on the group poll.'
              type: integer
              example: 5
            likes_count:
              description: 'Count of likes on the group poll.'
              type: integer
              example: 5
    group-poll-schema-create:
      allOf:
        - $ref: '#/components/schemas/group-poll-schema-common'
        - type: object
          properties:
            author:
              description: 'The author of this group poll. (Will use the authenticated user if not supplied).'
              type: object
              properties:
                uuid:
                  description: 'Invotra UUID of the user.'
                  type: string
                  format: uuid
                  example: '01234567-89ab-cdef-1234-56789abcdef0'
            group:
              description: 'The group for this group poll.'
              type: object
              properties:
                uuid:
                  description: 'Invotra UUID of the group.'
                  type: string
                  format: uuid
                  example: '01234567-89ab-cdef-1234-56789abcdef0'
            options:
              description: 'The options for this group poll.'
              type: array
              minItems: 2
              maxItems: 26
              items:
                type: object
                properties:
                  option:
                    description: 'The option text.'
                    type: string
              example:
                - option: 'Pork'
                - option: 'Beef'
                - option: 'Mutton'
          required:
            - title
            - group
            - options
    group-poll-schema-common:
      type: object
      properties:
        title:
          description: 'Title of the group poll.'
          type: string
          example: 'What is your favorite food?'
    list-schema:
      allOf:
        - type: object
          properties:
            uuid:
              description: 'Invotra UUID of the list.'
              type: string
              format: uuid
              example: '01234567-89ab-cdef-1234-56789abcdef0'
        - $ref: '#/components/schemas/list-schema-common'
        - type: object
          properties:
            site_section:
              description: 'The site section of this list.'
              type: object
              properties:
                uuid:
                  description: 'Invotra UUID of the site section.'
                  type: string
                  format: uuid
                  example: '01234567-89ab-cdef-1234-56789abcdef0'
                name:
                  description: 'The name of the site section.'
                  type: string
                  example: 'Operations'
            author:
              description: 'The author of this list.'
              type: object
              allOf:
                - $ref: '#/components/schemas/user-trimmed-schema'
            general_topic:
              description: 'The general topic of this list.'
              type: object
              properties:
                uuid:
                  description: 'Invotra UUID of the general topic.'
                  type: string
                  format: uuid
                  example: '01234567-89ab-cdef-1234-56789abcdef0'
                name:
                  description: 'This is the name of the general topic.'
                  type: string
                  example: 'Darts'
            team:
              description: 'The team targeting this list.'
              type: object
              properties:
                uuid:
                  description: 'Invotra UUID of the team.'
                  type: string
                  format: uuid
                  example: '01234567-89ab-cdef-1234-56789abcdef0'
                name:
                  description: This is the name of the team
                  type: string
                  example: Operations
            locations:
              description: 'The locations targeting this list.'
              type: array
              items:
                type: object
                properties:
                  uuid:
                    description: 'Invotra UUID of the location.'
                    type: string
                    format: uuid
                    example: '01234567-89ab-cdef-1234-56789abcdef0'
                  name:
                    description: The name of the location.
                    type: string
                    example: Chertsey House
                  type:
                    description: The location type.
                    type: string
                    enum:
                      - site
                      - building
                      - floor
                      - space
            grades:
              description: 'The grades targeting this list.'
              type: array
              items:
                type: object
                properties:
                  uuid:
                    description: 'Invotra UUID of the grade.'
                    type: string
                    format: uuid
                    example: '01234567-89ab-cdef-1234-56789abcdef0'
                  name:
                    description: 'Name of the grade.'
                    type: string
                    example: 'Grade 3'
            regions:
              description: 'The regions targeting this list.'
              type: array
              items:
                type: object
                properties:
                  uuid:
                    description: 'Invotra UUID of the region.'
                    type: string
                    format: uuid
                    example: '01234567-89ab-cdef-1234-56789abcdef0'
                  name:
                    description: 'Name of the region.'
                    type: string
                    example: 'Midlands'
            timestamp_created:
              description: 'This is the timestamp (in seconds) of when the list was created.'
              type: integer
              example: 1510941596
            timestamp_updated:
              description: 'This is the timestamp (in seconds) of when the list was last updated.'
              type: integer
              example: 1510941696
            comment_count:
              description: 'Count of comments on the list.'
              type: integer
              example: 5
            likes_count:
              description: 'Count of likes on the list.'
              type: integer
              example: 5
            published:
              description: 'Published status of the list.'
              type: boolean
              example: true
    list-schema-update:
      allOf:
        - $ref: '#/components/schemas/list-schema-common'
        - type: object
          properties:
            site_section:
              description: 'The site section of this list.'
              type: object
              properties:
                uuid:
                  description: 'Invotra UUID of the site section.'
                  type: string
                  format: uuid
                  example: '01234567-89ab-cdef-1234-56789abcdef0'
            author:
              description: 'The author of this list.'
              type: object
              properties:
                uuid:
                  description: 'Invotra UUID of the user.'
                  type: string
                  format: uuid
                  example: '01234567-89ab-cdef-1234-56789abcdef0'
            general_topic:
              description: 'The general topic of this list.'
              type: object
              properties:
                uuid:
                  description: 'Invotra UUID of the genetal topic.'
                  type: string
                  format: uuid
                  example: '01234567-89ab-cdef-1234-56789abcdef0'
            team:
              description: 'The team targeting this list.'
              type: object
              properties:
                uuid:
                  description: 'Invotra UUID of the team.'
                  type: string
                  format: uuid
                  example: '01234567-89ab-cdef-1234-56789abcdef0'
            locations:
              description: 'The locations targeting this list.'
              type: array
              items:
                type: object
                properties:
                  uuid:
                    description: 'Invotra UUID of the location.'
                    type: string
                    format: uuid
                    example: '01234567-89ab-cdef-1234-56789abcdef0'
            grades:
              description: 'The grades targeting this list.'
              type: array
              items:
                type: object
                properties:
                  uuid:
                    description: 'Invotra UUID of the grade.'
                    type: string
                    format: uuid
                    example: '01234567-89ab-cdef-1234-56789abcdef0'
            regions:
              description: 'The regions targeting this list.'
              type: array
              items:
                type: object
                properties:
                  uuid:
                    description: 'Invotra UUID of the region.'
                    type: string
                    format: uuid
                    example: '01234567-89ab-cdef-1234-56789abcdef0'
    list-schema-create:
      allOf:
        - $ref: '#/components/schemas/list-schema-common'
        - type: object
          properties:
            site_section:
              description: 'The site section of this custom content.'
              type: object
              properties:
                uuid:
                  description: 'Invotra UUID of the site section.'
                  type: string
                  format: uuid
                  example: '01234567-89ab-cdef-1234-56789abcdef0'
            author:
              description: 'The author of this list. (Will use the authenticated user if not supplied).'
              type: object
              properties:
                uuid:
                  description: 'Invotra UUID of the user.'
                  type: string
                  format: uuid
                  example: '01234567-89ab-cdef-1234-56789abcdef0'
            general_topic:
              description: 'The general topic of this list.'
              type: object
              properties:
                uuid:
                  description: 'Invotra UUID of the genetal topic.'
                  type: string
                  format: uuid
                  example: '01234567-89ab-cdef-1234-56789abcdef0'
            team:
              description: 'The team targeting this list.'
              type: object
              properties:
                uuid:
                  description: 'Invotra UUID of the team.'
                  type: string
                  format: uuid
                  example: '01234567-89ab-cdef-1234-56789abcdef0'
            locations:
              description: 'The locations targeting this list.'
              type: array
              items:
                type: object
                properties:
                  uuid:
                    description: 'Invotra UUID of the location.'
                    type: string
                    format: uuid
                    example: '01234567-89ab-cdef-1234-56789abcdef0'
            grades:
              description: 'The grades targeting this list.'
              type: array
              items:
                type: object
                properties:
                  uuid:
                    description: 'Invotra UUID of the grade.'
                    type: string
                    format: uuid
                    example: '01234567-89ab-cdef-1234-56789abcdef0'
            regions:
              description: 'The regions targeting this list.'
              type: array
              items:
                type: object
                properties:
                  uuid:
                    description: 'Invotra UUID of the region.'
                    type: string
                    format: uuid
                    example: '01234567-89ab-cdef-1234-56789abcdef0'
          required:
            - title
            - state
            - site_section
            - review_date_timestamp
            - owner
    list-schema-common:
      type: object
      properties:
        title:
          description: 'Title of the list.'
          type: string
          example: 'Guidelines for creating a strong password'
        body:
          description: 'The body of the list.'
          type: string
          example: 'You can create strong passwords using an online random password generator.'
        state:
          description: 'Indicates the workflow state of the list.'
          type: string
          enum:
            - 'draft'
            - 'needs_review'
            - 'reviewed'
            - 'published'
            - 'unpublished'
        review_date_timestamp:
          description: 'The review date timestamp for the list (in seconds).'
          type: integer
          example: 1510941596
        list:
          description: 'List of content and links in the list.'
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/list-list-content-schema'
              - $ref: '#/components/schemas/list-list-site-section-schema'
              - $ref: '#/components/schemas/list-list-link-schema'
            discriminator:
              propertyName: type
              mapping:
                content: '#/components/schemas/list-list-content-schema'
                site_section: '#/components/schemas/list-list-site-section-schema'
                link: '#/components/schemas/list-list-link-schema'
    list-list-common-schema:
      type: object
      properties:
        type:
          description: 'The type of content in the list.'
          type: string
          enum:
            - 'content'
            - 'site_section'
            - 'link'
        title:
          description: 'Title of the content or link.'
          type: string
          example: 'More information here.'
      required:
      - type
      - content
    list-list-content-schema:
      allOf:
      - $ref: '#/components/schemas/list-list-common-schema'
      - type: object
        properties:
          type:
            example: 'content'
          content:
            type: object
            properties:
              uuid:
                description: 'Invotra UUID of the content.'
                type: string
                format: uuid
                example: '01234567-89ab-cdef-1234-56789abcdef0'
    list-list-site-section-schema:
      allOf:
      - $ref: '#/components/schemas/list-list-common-schema'
      - type: object
        properties:
          type:
            example: 'site_section'
          content:
            type: object
            properties:
              uuid:
                description: 'Invotra UUID of the site section.'
                type: string
                format: uuid
                example: '01234567-89ab-cdef-1234-56789abcdef0'
    list-list-link-schema:
      allOf:
      - $ref: '#/components/schemas/list-list-common-schema'
      - type: object
        properties:
          type:
            example: 'link'
          content:
            type: string
            description: 'The URL of the link.'
            example: 'https://example.com'
    message-schema:
      allOf:
        - $ref: '#/components/schemas/message-schema-common'
        - type: object
          properties:
            uuid:
              description: 'Invotra UUID of the message.'
              type: string
              format: uuid
              example: '01234567-89ab-cdef-1234-56789abcdef0'
            author:
              description: 'The author of this message.'
              type: object
              allOf:
                - $ref: '#/components/schemas/user-trimmed-schema'
            message_type:
              type: object
              properties:
                uuid:
                  description: 'Invotra UUID of the message type.'
                  type: string
                  format: uuid
                  example: '01234567-89ab-cdef-1234-56789abcdef0'
                name:
                  description: 'This is the name of the message type.'
                  type: string
                  example: 'Empowering'
            timestamp_created:
              description: 'This is the timestamp (in seconds) of when the message was created.'
              type: integer
              example: 1510941596
            timestamp_updated:
              description: 'This is the timestamp (in seconds) of when the message was last updated.'
              type: integer
              example: 1510941696
            comment_count:
              description: 'Count of comments on the message.'
              type: integer
              example: 5
            likes_count:
              description: 'Count of likes on the message.'
              type: integer
              example: 5
    message-schema-update:
      allOf:
        - $ref: '#/components/schemas/message-schema-common'
        - type: object
          properties:
            message_type:
              type: object
              properties:
                uuid:
                  description: 'Invotra UUID of the message type.'
                  type: string
                  format: uuid
                  example: '01234567-89ab-cdef-1234-56789abcdef0'
            author:
              description: 'The author of this custom content.'
              type: object
              properties:
                uuid:
                  description: 'Invotra UUID of the user.'
                  type: string
                  format: uuid
                  example: '01234567-89ab-cdef-1234-56789abcdef0'
    message-schema-create:
      allOf:
        - $ref: '#/components/schemas/message-schema-common'
        - type: object
          properties:
            message_type:
              type: object
              properties:
                uuid:
                  description: 'Invotra UUID of the message type.'
                  type: string
                  format: uuid
                  example: '01234567-89ab-cdef-1234-56789abcdef0'
            author:
              description: 'The author of this custom content (Will use the authenticated user if not supplied).'
              type: object
              properties:
                uuid:
                  description: 'Invotra UUID of the user.'
                  type: string
                  format: uuid
                  example: '01234567-89ab-cdef-1234-56789abcdef0'
          required:
            - message_type
            - body
    message-schema-common:
      type: object
      properties:
        body:
          description: 'The body of the message.'
          type: string
          example: 'It is my birthday next week so remember to get me a present.'
    news-schema:
      allOf:
        - $ref: '#/components/schemas/news-schema-common'
        - type: object
          properties:
            uuid:
              description: 'Invotra UUID of the news.'
              type: string
              format: uuid
              example: '01234567-89ab-cdef-1234-56789abcdef0'
            site_section:
              description: 'The site section of this news.'
              type: object
              properties:
                uuid:
                  description: 'Invotra UUID of the site section.'
                  type: string
                  format: uuid
                  example: '01234567-89ab-cdef-1234-56789abcdef0'
                name:
                  description: 'This is the name of the site section.'
                  type: string
                  example: 'Finance'
            image:
              description: 'news Image.'
              type: object
              allOf:
                - $ref: '#/components/schemas/file-schema'
            author:
              description: 'The author of this news.'
              type: object
              allOf:
                - $ref: '#/components/schemas/user-trimmed-schema'
            attachments:
              description: 'A list of attachments for the news.'
              type: array
              items:
                allOf:
                  - $ref: '#/components/schemas/file-schema'
            owner:
              description: 'The owner of this news item.'
              type: object
              allOf:
                - $ref: '#/components/schemas/user-trimmed-schema'
            team:
              type: object
              properties:
                uuid:
                  description: 'Invotra UUID of the team.'
                  type: string
                  format: uuid
                  example: '01234567-89ab-cdef-1234-56789abcdef0'
                name:
                  description: 'This is the name of the team.'
                  type: string
                  example: 'Operations'
            locations:
              description: 'The locations targeting this news item.'
              type: array
              items:
                allOf:
                  - $ref: '#/components/schemas/location-trimmed-schema'
            grades:
              description: 'The grades targeting this news item.'
              type: array
              items:
                type: object
                properties:
                  uuid:
                    description: 'Invotra UUID of the grade.'
                    type: string
                    format: uuid
                    example: '01234567-89ab-cdef-1234-56789abcdef0'
                  name:
                    description: 'Name of the grade.'
                    type: string
                    example: 'Grade 3'
            regions:
              description: 'The regions targeting this custom content.'
              type: array
              items:
                type: object
                properties:
                  uuid:
                    description: 'Invotra UUID of the region.'
                    type: string
                    format: uuid
                    example: '01234567-89ab-cdef-1234-56789abcdef0'
                  name:
                    description: 'Name of the region.'
                    type: string
                    example: 'Midlands'
            timestamp_created:
              description: 'This is the timestamp (in seconds) of when the news was created.'
              type: integer
              example: 1510941596
            timestamp_updated:
              description: 'This is the timestamp (in seconds) of when the news was last updated.'
              type: integer
              example: 1510941696
            comment_count:
              description: 'Count of comments on the news.'
              type: integer
              example: 5
            likes_count:
              description: 'Count of likes on the news.'
              type: integer
              example: 5
            published:
              description: 'Published status for the news.'
              type: boolean
              example: true
    news-schema-update:
      allOf:
        - $ref: '#/components/schemas/news-schema-common'
        - type: object
          properties:
            site_section:
              description: 'The site section of this news.'
              type: object
              properties:
                uuid:
                  description: 'Invotra UUID of the site section.'
                  type: string
                  format: uuid
                  example: '01234567-89ab-cdef-1234-56789abcdef0'
            image:
              description: 'The image for this news.'
              type: object
              properties:
                uuid:
                  description: 'Invotra UUID of the image.'
                  type: string
                  format: uuid
                  example: '01234567-89ab-cdef-1234-56789abcdef0'
            author:
              description: 'The author of this news.'
              type: object
              properties:
                uuid:
                  description: 'Invotra UUID of the user.'
                  type: string
                  format: uuid
                  example: '01234567-89ab-cdef-1234-56789abcdef0'
            attachments:
              description: 'The attatched files of this news item.'
              type: array
              items:
                type: object
                properties:
                  uuid:
                    description: 'Invotra UUID of the file.'
                    type: string
                    format: uuid
                    example: '01234567-89ab-cdef-1234-56789abcdef0'
            owner:
              description: 'The owner of this news item.'
              type: object
              properties:
                uuid:
                  description: 'Invotra UUID of the owner user.'
                  type: string
                  format: uuid
                  example: '01234567-89ab-cdef-1234-56789abcdef0'
            team:
              description: 'The team of this news item.'
              type: object
              properties:
                uuid:
                  description: 'Invotra UUID of the team.'
                  type: string
                  format: uuid
                  example: '01234567-89ab-cdef-1234-56789abcdef0'
            locations:
              description: 'The locations targeting this news item.'
              type: array
              items:
                type: object
                properties:
                  uuid:
                    description: 'Invotra UUID of the location.'
                    type: string
                    format: uuid
                    example: '01234567-89ab-cdef-1234-56789abcdef0'
            grades:
              description: 'The grades targeting this custom content.'
              type: array
              items:
                type: object
                properties:
                  uuid:
                    description: 'Invotra UUID of the grade.'
                    type: string
                    format: uuid
                    example: '01234567-89ab-cdef-1234-56789abcdef0'
            regions:
              description: 'The regions targeting this custom content.'
              type: array
              items:
                type: object
                properties:
                  uuid:
                    description: 'Invotra UUID of the region.'
                    type: string
                    format: uuid
                    example: '01234567-89ab-cdef-1234-56789abcdef0'
    news-schema-create:
      allOf:
        - $ref: '#/components/schemas/news-schema-common'
        - type: object
          properties:
            site_section:
              description: 'The site section of this news.'
              type: object
              properties:
                uuid:
                  description: 'Invotra UUID of the site section.'
                  type: string
                  format: uuid
                  example: '01234567-89ab-cdef-1234-56789abcdef0'
            image:
              description: 'The image for this news.'
              type: object
              properties:
                uuid:
                  description: 'Invotra UUID of the image.'
                  type: string
                  format: uuid
                  example: '01234567-89ab-cdef-1234-56789abcdef0'
            author:
              description: 'The author of this news. (Will use the authenticated user if not supplied).'
              type: object
              properties:
                uuid:
                  description: 'Invotra UUID of the user.'
                  type: string
                  format: uuid
                  example: '01234567-89ab-cdef-1234-56789abcdef0'
            attachments:
              description: 'The attatched files of this news item.'
              type: array
              items:
                type: object
                properties:
                  uuid:
                    description: 'Invotra UUID of the file.'
                    type: string
                    format: uuid
                    example: '01234567-89ab-cdef-1234-56789abcdef0'
            owner:
              description: 'The owner of this news item.'
              type: object
              properties:
                uuid:
                  description: 'Invotra UUID of the owner user.'
                  type: string
                  format: uuid
                  example: '01234567-89ab-cdef-1234-56789abcdef0'
            team:
              description: 'The team of this news item.'
              type: object
              properties:
                uuid:
                  description: 'Invotra UUID of the team.'
                  type: string
                  format: uuid
                  example: '01234567-89ab-cdef-1234-56789abcdef0'
            locations:
              description: 'The locations targeting this news item.'
              type: array
              items:
                type: object
                properties:
                  uuid:
                    description: 'Invotra UUID of the location.'
                    type: string
                    format: uuid
                    example: '01234567-89ab-cdef-1234-56789abcdef0'
            grades:
              description: 'The grades targeting this custom content.'
              type: array
              items:
                type: object
                properties:
                  uuid:
                    description: 'Invotra UUID of the grade.'
                    type: string
                    format: uuid
                    example: '01234567-89ab-cdef-1234-56789abcdef0'
            regions:
              description: 'The regions targeting this custom content.'
              type: array
              items:
                type: object
                properties:
                  uuid:
                    description: 'Invotra UUID of the region.'
                    type: string
                    format: uuid
                    example: '01234567-89ab-cdef-1234-56789abcdef0'
          required:
            - title
            - body
            - state
            - site_section
            - review_date_timestamp
            - owner
    news-schema-common:
      type: object
      properties:
        title:
          description: 'Title of the news.'
          type: string
          example: 'Good news about the car park'
        body:
          description: 'The body of the news.'
          type: string
          example: 'The car park is having the line markings repainted.'
        state:
          description: 'Indicates the workflow state of the news.'
          type: string
          enum:
            - 'draft'
            - 'needs_review'
            - 'reviewed'
            - 'published'
            - 'unpublished'
        schedule_date_timestamp:
          description: 'The timestamp of the schedule date (in seconds). If present the content is scheduled for a workflow state change, if not, the workflow state will be changed immediately.'
          type: integer
          example: 1510941596
        review_date_timestamp:
          description: 'The review date timestamp for the custom content (in seconds).'
          type: integer
          example: 1510941596
        related_external_links:
          description: 'Related external links for the custom content'
          type: array
          items:
            type: object
            properties:
              title:
                description: 'The title for the external link.'
                type: string
                example: 'More information on the Invotra site.'
              url:
                description: 'The url for the external link'
                type: string
                example: 'https://dev.invotra.com/info/passwords'
        related_content_links:
          description: 'Related content links for the custom content'
          type: array
          items:
            type: object
            properties:
              type:
                description: 'The type of related content.'
                type: string
                enum:
                  - 'content'
                  - 'site section'
                  - 'file'
              title:
                description: 'The title for the related content.'
                type: string
                example: 'More information here.'
              uuid:
                description: 'Invotra UUID of the related content.'
                type: string
                format: uuid
                example: '01234567-89ab-cdef-1234-56789abcdef0'
        enable_comments:
          description: 'Indicates that comments are enabled for this content.'
          type: boolean
          default: true
          example: true
        featured:
          description: 'Indicates that this news item is featured.'
          type: boolean
          default: false
          example: false
        external_id:
          description: 'The news item external reference id.'
          type: string
          example: 'ABC123'
    page-schema:
      allOf:
        - type: object
          properties:
            uuid:
              description: 'Invotra UUID of the page.'
              type: string
              format: uuid
              example: '01234567-89ab-cdef-1234-56789abcdef0'
        - $ref: '#/components/schemas/page-schema-common'
        - type: object
          properties:
            site_section:
              description: 'The site section of this page.'
              type: object
              properties:
                uuid:
                  description: 'Invotra UUID of the site section.'
                  type: string
                  format: uuid
                  example: '01234567-89ab-cdef-1234-56789abcdef0'
                name:
                  description: 'This is the name of the site section.'
                  type: string
                  example: 'Finance'
            image:
              description: 'Page Image.'
              type: object
              allOf:
                - $ref: '#/components/schemas/file-schema'
            author:
              description: 'The author of this page.'
              type: object
              allOf:
                - $ref: '#/components/schemas/user-trimmed-schema'
            attachments:
              description: 'A list of attachments for the page.'
              type: array
              items:
                allOf:
                  - $ref: '#/components/schemas/file-schema'
            owner:
              description: 'The owner user of the page.'
              type: object
              allOf:
                - $ref: '#/components/schemas/user-trimmed-schema'
            team:
              description: 'The team targeting this page.'
              type: object
              properties:
                uuid:
                  description: 'Invotra UUID of the team.'
                  type: string
                  format: uuid
                  example: '01234567-89ab-cdef-1234-56789abcdef0'
                name:
                  description: 'This is the name of the team.'
                  type: string
                  example: 'Operations'
            locations:
              description: 'The locations targeting this page.'
              type: array
              items:
                allOf:
                  - $ref: '#/components/schemas/location-trimmed-schema'
            grades:
              description: 'The grades targeting this page.'
              type: array
              items:
                type: object
                properties:
                  uuid:
                    description: 'Invotra UUID of the grade.'
                    type: string
                    format: uuid
                    example: '01234567-89ab-cdef-1234-56789abcdef0'
                  name:
                    description: 'Name of the grade.'
                    type: string
                    example: 'Grade 3'
            regions:
              description: 'The regions targeting this page.'
              type: array
              items:
                type: object
                properties:
                  uuid:
                    description: 'Invotra UUID of the region.'
                    type: string
                    format: uuid
                    example: '01234567-89ab-cdef-1234-56789abcdef0'
                  name:
                    description: 'Name of the region.'
                    type: string
                    example: 'Midlands'
            timestamp_created:
              description: 'This is the timestamp (in seconds) of when the page was created.'
              type: integer
              example: 1510941596
            timestamp_updated:
              description: 'This is the timestamp (in seconds) of when the page was last updated.'
              type: integer
              example: 1510941696
            comment_count:
              description: 'Count of comments on the page.'
              type: integer
              example: 5
            likes_count:
              description: 'Count of likes on the page.'
              type: integer
              example: 5
            published:
              description: 'Published status for the page.'
              type: boolean
              example: true
    page-schema-update:
      allOf:
        - $ref: '#/components/schemas/page-schema-common'
        - type: object
          properties:
            site_section:
              description: 'The site section of this page.'
              type: object
              properties:
                uuid:
                  description: 'Invotra UUID of the site section.'
                  type: string
                  format: uuid
                  example: '01234567-89ab-cdef-1234-56789abcdef0'
            image:
              description: 'The image for this page.'
              type: object
              properties:
                uuid:
                  description: 'Invotra UUID of the image.'
                  type: string
                  format: uuid
                  example: '01234567-89ab-cdef-1234-56789abcdef0'
            author:
              description: 'The author of this page.'
              type: object
              properties:
                uuid:
                  description: 'Invotra UUID of the user.'
                  type: string
                  format: uuid
                  example: '01234567-89ab-cdef-1234-56789abcdef0'
            attachments:
              description: 'The attatched files of this page.'
              type: array
              items:
                type: object
                properties:
                  uuid:
                    description: 'Invotra UUID of the file.'
                    type: string
                    format: uuid
                    example: '01234567-89ab-cdef-1234-56789abcdef0'
            owner:
              description: 'The owner of this page.'
              type: object
              properties:
                uuid:
                  description: 'Invotra UUID of the user.'
                  type: string
                  format: uuid
                  example: '01234567-89ab-cdef-1234-56789abcdef0'
            team:
              description: 'The team targeting this page.'
              type: object
              properties:
                uuid:
                  description: 'Invotra UUID of the team.'
                  type: string
                  format: uuid
                  example: '01234567-89ab-cdef-1234-56789abcdef0'
            locations:
              description: 'The locations targeting this page.'
              type: array
              items:
                type: object
                properties:
                  uuid:
                    description: 'Invotra UUID of the location.'
                    type: string
                    format: uuid
                    example: '01234567-89ab-cdef-1234-56789abcdef0'
            grades:
              description: 'The grades targeting this page.'
              type: array
              items:
                type: object
                properties:
                  uuid:
                    description: 'Invotra UUID of the grade.'
                    type: string
                    format: uuid
                    example: '01234567-89ab-cdef-1234-56789abcdef0'
            regions:
              description: 'The regions targeting this page.'
              type: array
              items:
                type: object
                properties:
                  uuid:
                    description: 'Invotra UUID of the region.'
                    type: string
                    format: uuid
                    example: '01234567-89ab-cdef-1234-56789abcdef0'
    page-schema-create:
      allOf:
        - $ref: '#/components/schemas/page-schema-common'
        - type: object
          properties:
            site_section:
              description: 'The site section of this page.'
              type: object
              properties:
                uuid:
                  description: 'Invotra UUID of the site section.'
                  type: string
                  format: uuid
                  example: '01234567-89ab-cdef-1234-56789abcdef0'
            image:
              description: 'The image for this page.'
              type: object
              properties:
                uuid:
                  description: 'Invotra UUID of the image.'
                  type: string
                  format: uuid
                  example: '01234567-89ab-cdef-1234-56789abcdef0'
            author:
              description: 'The author of this page. (Will use the authenticated user if not supplied).'
              type: object
              properties:
                uuid:
                  description: 'Invotra UUID of the user.'
                  type: string
                  format: uuid
                  example: '01234567-89ab-cdef-1234-56789abcdef0'
            attachments:
              description: 'The attatched files of this page.'
              type: array
              items:
                type: object
                properties:
                  uuid:
                    description: 'Invotra UUID of the file.'
                    type: string
                    format: uuid
                    example: '01234567-89ab-cdef-1234-56789abcdef0'
            owner:
              description: 'The owner of this page.'
              type: object
              properties:
                uuid:
                  description: 'Invotra UUID of the user.'
                  type: string
                  format: uuid
                  example: '01234567-89ab-cdef-1234-56789abcdef0'
            team:
              description: 'The team targeting this news page.'
              type: object
              properties:
                uuid:
                  description: 'Invotra UUID of the team.'
                  type: string
                  format: uuid
                  example: '01234567-89ab-cdef-1234-56789abcdef0'
            locations:
              description: 'The locations targeting this page.'
              type: array
              items:
                type: object
                properties:
                  uuid:
                    description: 'Invotra UUID of the location.'
                    type: string
                    format: uuid
                    example: '01234567-89ab-cdef-1234-56789abcdef0'
            grades:
              description: 'The grades targeting this page.'
              type: array
              items:
                type: object
                properties:
                  uuid:
                    description: 'Invotra UUID of the grade.'
                    type: string
                    format: uuid
                    example: '01234567-89ab-cdef-1234-56789abcdef0'
            regions:
              description: 'The regions targeting this page.'
              type: array
              items:
                type: object
                properties:
                  uuid:
                    description: 'Invotra UUID of the region.'
                    type: string
                    format: uuid
                    example: '01234567-89ab-cdef-1234-56789abcdef0'
          required:
            - title
            - body
            - state
            - site_section
            - review_date_timestamp
            - owner
    page-schema-common:
      type: object
      properties:
        title:
          description: 'Title of the page.'
          type: string
          example: 'Guidelines for creating a strong password'
        body:
          description: 'The body of the page.'
          type: string
          example: 'You can create strong passwords using an offline random password generator.'
        state:
          description: 'Indicates the workflow state of the page.'
          type: string
          enum:
            - 'draft'
            - 'needs_review'
            - 'reviewed'
            - 'published'
            - 'unpublished'
        schedule_date_timestamp:
          description: 'The timestamp of the schedule date (in seconds). If present the content is scheduled for a workflow state change, if not, the workflow state will be changed immediately.'
          type: integer
          example: 1510941596
        review_date_timestamp:
          description: 'The review date timestamp for the page (in seconds).'
          type: integer
          example: 1510941596
        related_external_links:
          description: 'Related external links for the page.'
          type: array
          items:
            type: object
            properties:
              title:
                description: 'The title for the external link.'
                type: string
                example: 'More information on the Invotra site.'
              url:
                description: 'The url for the external link'
                type: string
                example: 'https://dev.invotra.com/info/passwords'
        related_content_links:
          description: 'Related content links for the page.'
          type: array
          items:
            type: object
            properties:
              type:
                description: 'The type of related content.'
                type: string
                enum:
                  - 'content'
                  - 'site section'
                  - 'file'
              title:
                description: 'The title for the related content.'
                type: string
                example: 'More information here.'
              uuid:
                description: 'Invotra UUID of the related content.'
                type: string
                format: uuid
                example: '01234567-89ab-cdef-1234-56789abcdef0'
        enable_comments:
          description: 'Indicates that comments are enabled for this content.'
          type: boolean
          default: true
          example: true
        featured:
          description: 'Indicates that this page is featured.'
          type: boolean
          default: false
          example: false
        external_id:
          description: 'The page external reference id.'
          type: string
          example: 'ABC123'
    policy-schema:
      allOf:
        - type: object
          properties:
            uuid:
              description: 'Invotra UUID of the policy.'
              type: string
              format: uuid
              example: '01234567-89ab-cdef-1234-56789abcdef0'
        - $ref: '#/components/schemas/policy-schema-common'
        - type: object
          properties:
            site_section:
              type: object
              description: 'The site section of this policy.'
              properties:
                uuid:
                  description: 'Invotra UUID of the site section.'
                  type: string
                  format: uuid
                  example: '01234567-89ab-cdef-1234-56789abcdef0'
                name:
                  description: 'This is the name of the site section.'
                  type: string
                  example: 'Finance'
            policy_type:
              description: 'The policy type of this policy.'
              type: object
              properties:
                uuid:
                  description: 'Invotra UUID of the policy type.'
                  type: string
                  format: uuid
                  example: '01234567-89ab-cdef-1234-56789abcdef0'
                name:
                  description: 'This is the name of the policy type.'
                  type: string
                  example: 'Constituent'
            primary_category:
              description: 'The primary category of this policy.'
              type: object
              properties:
                uuid:
                  description: 'Invotra UUID of the primary category.'
                  type: string
                  format: uuid
                  example: '01234567-89ab-cdef-1234-56789abcdef0'
                name:
                  description: 'This is the name of the primary category.'
                  type: string
                  example: 'Involving staff training'
            general_topic:
              description: 'The general topic of this policy.'
              type: object
              properties:
                uuid:
                  description: 'Invotra UUID of the general topic.'
                  type: string
                  format: uuid
                  example: '01234567-89ab-cdef-1234-56789abcdef0'
                name:
                  description: 'This is the name of the general topic.'
                  type: string
                  example: 'Darts'
            country:
              description: 'The country of this policy.'
              type: object
              properties:
                uuid:
                  description: 'Invotra UUID of the country.'
                  type: string
                  format: uuid
                  example: '01234567-89ab-cdef-1234-56789abcdef0'
                name:
                  description: 'This is the name of the country.'
                  type: string
                  example: 'Involving staff training'
            team:
              description: 'The team targeting this policy.'
              type: object
              properties:
                uuid:
                  description: 'Invotra UUID of the team.'
                  type: string
                  format: uuid
                  example: '01234567-89ab-cdef-1234-56789abcdef0'
                name:
                  description: This is the name of the team
                  type: string
                  example: Operations
            locations:
              description: 'The locations targeting this policy.'
              type: array
              items:
                type: object
                properties:
                  uuid:
                    description: 'Invotra UUID of the location.'
                    type: string
                    format: uuid
                    example: '01234567-89ab-cdef-1234-56789abcdef0'
                  name:
                    description: The name of the location.
                    type: string
                    example: Chertsey House
                  type:
                    description: The location type.
                    type: string
                    enum:
                      - site
                      - building
                      - floor
                      - space
            grades:
              description: 'The grades targeting this policy.'
              type: array
              items:
                type: object
                properties:
                  uuid:
                    description: 'Invotra UUID of the grade.'
                    type: string
                    format: uuid
                    example: '01234567-89ab-cdef-1234-56789abcdef0'
                  name:
                    description: 'Name of the grade.'
                    type: string
                    example: 'Grade 3'
            regions:
              description: 'The regions targeting this policy.'
              type: array
              items:
                type: object
                properties:
                  uuid:
                    description: 'Invotra UUID of the region.'
                    type: string
                    format: uuid
                    example: '01234567-89ab-cdef-1234-56789abcdef0'
                  name:
                    description: 'Name of the region.'
                    type: string
                    example: 'Midlands'
            attachments:
              description: 'List of attachments on the policy.'
              type: array
              items:
                $ref: '#/components/schemas/file-schema'
            owner:
              description: 'The owner user of the policy.'
              type: object
              allOf:
                - $ref: '#/components/schemas/user-trimmed-schema'
            timestamp_created:
              description: 'This is the timestamp (in seconds) of when the policy was created.'
              type: integer
              example: 1510941596
            timestamp_updated:
              description: 'This is the timestamp (in seconds) of when the policy was last updated.'
              type: integer
              example: 1510941696
            comment_count:
              description: 'Count of comments on the policy.'
              type: integer
              example: 5
            likes_count:
              description: 'Count of likes on the policy.'
              type: integer
              example: 5
            published:
              description: 'Published status for the policy.'
              type: boolean
              example: true
    policy-schema-update:
      allOf:
        - $ref: '#/components/schemas/policy-schema-common'
        - type: object
          properties:
            site_section:
              description: 'The site section of this policy.'
              type: object
              properties:
                uuid:
                  description: 'Invotra UUID of the site section.'
                  type: string
                  format: uuid
                  example: '01234567-89ab-cdef-1234-56789abcdef0'
            policy_type:
              description: 'The policy type of this policy.'
              type: object
              properties:
                uuid:
                  description: 'Invotra UUID of the policy type.'
                  type: string
                  format: uuid
                  example: '01234567-89ab-cdef-1234-56789abcdef0'
            primary_category:
              description: 'The primary category of this policy.'
              type: object
              properties:
                uuid:
                  description: 'Invotra UUID of the primary category.'
                  type: string
                  format: uuid
                  example: '01234567-89ab-cdef-1234-56789abcdef0'
            general_topic:
              description: 'The general topic of this policy.'
              type: object
              properties:
                uuid:
                  description: 'Invotra UUID of the genetal topic.'
                  type: string
                  format: uuid
                  example: '01234567-89ab-cdef-1234-56789abcdef0'
            country:
              description: 'The country of this policy.'
              type: object
              properties:
                uuid:
                  description: 'Invotra UUID of the country.'
                  type: string
                  format: uuid
                  example: '01234567-89ab-cdef-1234-56789abcdef0'
            team:
              description: 'The team targeting this policy.'
              type: object
              properties:
                uuid:
                  description: 'Invotra UUID of the team.'
                  type: string
                  format: uuid
                  example: '01234567-89ab-cdef-1234-56789abcdef0'
            locations:
              description: 'The locations targeting this policy.'
              type: array
              items:
                type: object
                properties:
                  uuid:
                    description: 'Invotra UUID of the location.'
                    type: string
                    format: uuid
                    example: '01234567-89ab-cdef-1234-56789abcdef0'
            grades:
              description: 'The grades targeting this policy.'
              type: array
              items:
                type: object
                properties:
                  uuid:
                    description: 'Invotra UUID of the grade.'
                    type: string
                    format: uuid
                    example: '01234567-89ab-cdef-1234-56789abcdef0'
            regions:
              description: 'The regions targeting this policy.'
              type: array
              items:
                type: object
                properties:
                  uuid:
                    description: 'Invotra UUID of the region.'
                    type: string
                    format: uuid
                    example: '01234567-89ab-cdef-1234-56789abcdef0'
            attachments:
              description: 'The attatched files of this policy.'
              type: array
              items:
                type: object
                properties:
                  uuid:
                    description: 'Invotra UUID of the file.'
                    type: string
                    format: uuid
                    example: '01234567-89ab-cdef-1234-56789abcdef0'
            owner:
              description: 'The owner of this policy.'
              type: object
              properties:
                uuid:
                  description: 'Invotra UUID of the user.'
                  type: string
                  format: uuid
                  example: '01234567-89ab-cdef-1234-56789abcdef0'
    policy-schema-create:
      allOf:
        - $ref: '#/components/schemas/policy-schema-common'
        - type: object
          properties:
            site_section:
              description: 'The site section of this policy.'
              type: object
              properties:
                uuid:
                  description: 'Invotra UUID of the site section.'
                  type: string
                  format: uuid
                  example: '01234567-89ab-cdef-1234-56789abcdef0'
            policy_type:
              description: 'The policy type of this policy.'
              type: object
              properties:
                uuid:
                  description: 'Invotra UUID of the policy type.'
                  type: string
                  format: uuid
                  example: '01234567-89ab-cdef-1234-56789abcdef0'
            primary_category:
              description: 'The primary category of this policy.'
              type: object
              properties:
                uuid:
                  description: 'Invotra UUID of the primary category.'
                  type: string
                  format: uuid
                  example: '01234567-89ab-cdef-1234-56789abcdef0'
            general_topic:
              description: 'The general topic of this policy.'
              type: object
              properties:
                uuid:
                  description: 'Invotra UUID of the genetal topic.'
                  type: string
                  format: uuid
                  example: '01234567-89ab-cdef-1234-56789abcdef0'
            country:
              description: 'The country of this policy.'
              type: object
              properties:
                uuid:
                  description: 'Invotra UUID of the country.'
                  type: string
                  format: uuid
                  example: '01234567-89ab-cdef-1234-56789abcdef0'
            team:
              description: 'The team targeting this policy.'
              type: object
              properties:
                uuid:
                  description: 'Invotra UUID of the team.'
                  type: string
                  format: uuid
                  example: '01234567-89ab-cdef-1234-56789abcdef0'
            locations:
              description: 'The locations targeting this policy.'
              type: array
              items:
                type: object
                properties:
                  uuid:
                    description: 'Invotra UUID of the location.'
                    type: string
                    format: uuid
                    example: '01234567-89ab-cdef-1234-56789abcdef0'
            grades:
              description: 'The grades targeting this policy.'
              type: array
              items:
                type: object
                properties:
                  uuid:
                    description: 'Invotra UUID of the grade.'
                    type: string
                    format: uuid
                    example: '01234567-89ab-cdef-1234-56789abcdef0'
            regions:
              description: 'The regions targeting this policy.'
              type: array
              items:
                type: object
                properties:
                  uuid:
                    description: 'Invotra UUID of the region.'
                    type: string
                    format: uuid
                    example: '01234567-89ab-cdef-1234-56789abcdef0'
            attachments:
              description: 'The attatched files of this policy.'
              type: array
              items:
                type: object
                properties:
                  uuid:
                    description: 'Invotra UUID of the file.'
                    type: string
                    format: uuid
                    example: '01234567-89ab-cdef-1234-56789abcdef0'
            owner:
              description: 'The owner of this policy.'
              type: object
              properties:
                uuid:
                  description: 'Invotra UUID of the user.'
                  type: string
                  format: uuid
                  example: '01234567-89ab-cdef-1234-56789abcdef0'
          required:
            - title
            - body
            - state
            - site_section
            - review_date_timestamp
            - owner
    policy-schema-common:
      type: object
      properties:
        title:
          description: 'Title of the policy.'
          type: string
          example: 'Policy for creating passwords'
        body:
          description: 'The body of the policy.'
          type: string
          example: 'You must create strong password and never share it.'
        state:
          description: 'Indicates the workflow state of the policy.'
          type: string
          enum:
            - 'draft'
            - 'needs_review'
            - 'reviewed'
            - 'published'
            - 'unpublished'
        implementation_start_timestamp:
          description: 'This is the timestamp (in seconds) of when the policy will start being implementated.'
          type: integer
          example: 1510941596
        implementation_end_timestamp:
          description: 'This is the timestamp (in seconds) of when the policy will end being implementated.'
          type: integer
          example: 1510941696
        review_date_timestamp:
          description: 'The review date timestamp for the policy (in seconds).'
          type: integer
          example: 1510941596
        related_external_links:
          description: 'Related external links for the policy.'
          type: array
          items:
            type: object
            properties:
              title:
                description: 'The title for the external link.'
                type: string
                example: 'More information on the Invotra site.'
              url:
                description: 'The url for the external link'
                type: string
                example: 'https://dev.invotra.com/info/passwords'
        related_content_links:
          description: 'Related content links for the policy.'
          type: array
          items:
            type: object
            properties:
              type:
                description: 'The type of related content.'
                type: string
                enum:
                  - 'content'
                  - 'site section'
                  - 'file'
              title:
                description: 'The title for the related content.'
                type: string
                example: 'More information here.'
              uuid:
                description: 'Invotra UUID of the related content.'
                type: string
                format: uuid
                example: '01234567-89ab-cdef-1234-56789abcdef0'
        enable_comments:
          description: 'Indicates that comments are enabled for this content.'
          type: boolean
          default: true
          example: true
        featured:
          description: 'Indicates that this content is featured.'
          type: boolean
          default: false
          example: false
        external_id:
          description: 'The policy external reference id.'
          type: string
          example: 'ABC123'
    poll-schema:
      allOf:
        - $ref: '#/components/schemas/poll-schema-common'
        - type: object
          properties:
            uuid:
              description: 'Invotra UUID of the poll.'
              type: string
              format: uuid
              example: '01234567-89ab-cdef-1234-56789abcdef0'
            title:
              description: 'The question the poll is asking.'
              type: string
              example: 'What is your favorite food?'
            author:
              description: 'The author of this poll.'
              type: object
              allOf:
                - $ref: '#/components/schemas/user-trimmed-schema'
            options:
              description: 'The options for this group poll, with vote counts.'
              type: array
              minItems: 2
              maxItems: 26
              items:
                type: object
                properties:
                  option:
                    description: 'The option text.'
                    type: string
                  vote_count:
                    description: 'The current vote count for this option.'
                    type: integer
              example:
                - option: 'Pork'
                  vote_count: 12
                - option: 'Beef'
                  vote_count: 24
                - option: 'Mutton'
                  vote_count: 48
            timestamp_created:
              description: 'This is the timestamp (in seconds) of when the poll was created.'
              type: integer
              example: 1510941596
            timestamp_updated:
              description: 'This is the timestamp (in seconds) of when the poll was last updated.'
              type: integer
              example: 1510941696
            comment_count:
              description: 'Count of comments on the poll.'
              type: integer
              example: 5
            likes_count:
              description: 'Count of likes on the poll.'
              type: integer
              example: 5
            published:
              description: 'Published status for the poll.'
              type: boolean
              example: true
    poll-schema-update:
      allOf:
        - $ref: '#/components/schemas/poll-schema-common'
        - type: object
          properties:
            author:
              description: 'The author of this poll.'
              type: object
              properties:
                uuid:
                  description: 'Invotra UUID of the user.'
                  type: string
                  format: uuid
                  example: '01234567-89ab-cdef-1234-56789abcdef0'
    poll-schema-create:
      allOf:
        - $ref: '#/components/schemas/poll-schema-common'
        - type: object
          properties:
            title:
              description: 'The question the poll is asking.'
              type: string
              example: 'What is your favorite food?'
            author:
              description: 'The author of this poll. (Will use the authenticated user if not supplied).'
              type: object
              properties:
                uuid:
                  description: 'Invotra UUID of the user.'
                  type: string
                  format: uuid
                  example: '01234567-89ab-cdef-1234-56789abcdef0'
            options:
              description: 'The options for this group poll.'
              type: array
              minItems: 2
              maxItems: 26
              items:
                type: object
                properties:
                  option:
                    description: 'The option text.'
                    type: string
              example:
                - option: 'Pork'
                - option: 'Beef'
                - option: 'Mutton'
          required:
            - state
            - title
            - options
    poll-schema-common:
      type: object
      properties:
        state:
          description: 'Indicates the workflow state of the poll.'
          type: string
          enum:
            - 'draft'
            - 'needs_review'
            - 'reviewed'
            - 'published'
            - 'unpublished'
        schedule_timestamp:
          description: 'The scheduled review date timestamp for the poll (in seconds).'
          type: integer
          example: 1510941596
        poll_duration:
          description: 'The duration this poll will remain open (in seconds from the create date).'
          type: integer
          example: 1510941596
        poll_open:
          description: 'Indicates that poll is open.'
          type: boolean
          default: true
          example: true
        enable_comments:
          description: 'Indicates that comments are enabled for this content.'
          type: boolean
          default: true
          example: true
        external_id:
          description: 'The poll external reference id.'
          type: string
          example: 'ABC123'
    promotion-schema:
      allOf:
        - type: object
          properties:
            uuid:
              description: 'Invotra UUID of the promotion.'
              type: string
              format: uuid
              example: '01234567-89ab-cdef-1234-56789abcdef0'
        - $ref: '#/components/schemas/promotion-schema-common'
        - type: object
          properties:
            site_section:
              description: 'The site section of this promotion.'
              type: object
              properties:
                uuid:
                  description: 'Invotra UUID of the site section.'
                  type: string
                  format: uuid
                  example: '01234567-89ab-cdef-1234-56789abcdef0'
                name:
                  description: 'The name of the site section.'
                  type: string
                  example: 'Operations'
            image:
              description: 'promotion Image.'
              type: object
              allOf:
                - $ref: '#/components/schemas/file-schema'
            owner:
              description: 'The owner user of the promotion.'
              type: object
              allOf:
                - $ref: '#/components/schemas/user-trimmed-schema'
            author:
              description: 'The author of this promotion.'
              type: object
              allOf:
                - $ref: '#/components/schemas/user-trimmed-schema'
            team:
              description: 'The team targeting this promotion.'
              type: object
              properties:
                uuid:
                  description: 'Invotra UUID of the team.'
                  type: string
                  format: uuid
                  example: '01234567-89ab-cdef-1234-56789abcdef0'
                name:
                  description: This is the name of the team
                  type: string
                  example: Operations
            locations:
              description: 'The locations targeting this promotion.'
              type: array
              items:
                type: object
                properties:
                  uuid:
                    description: 'Invotra UUID of the location.'
                    type: string
                    format: uuid
                    example: '01234567-89ab-cdef-1234-56789abcdef0'
                  name:
                    description: The name of the location.
                    type: string
                    example: Chertsey House
                  type:
                    description: The location type.
                    type: string
                    enum:
                      - site
                      - building
                      - floor
                      - space
            grades:
              description: 'The grades targeting this promotion.'
              type: array
              items:
                type: object
                properties:
                  uuid:
                    description: 'Invotra UUID of the grade.'
                    type: string
                    format: uuid
                    example: '01234567-89ab-cdef-1234-56789abcdef0'
                  name:
                    description: 'Name of the grade.'
                    type: string
                    example: 'Grade 3'
            regions:
              description: 'The regions targeting this promotion.'
              type: array
              items:
                type: object
                properties:
                  uuid:
                    description: 'Invotra UUID of the region.'
                    type: string
                    format: uuid
                    example: '01234567-89ab-cdef-1234-56789abcdef0'
                  name:
                    description: 'Name of the region.'
                    type: string
                    example: 'Midlands'
            timestamp_created:
              description: 'This is the timestamp (in seconds) of when the promotion was created.'
              type: integer
              example: 1510941596
            timestamp_updated:
              description: 'This is the timestamp (in seconds) of when the promotion was last updated.'
              type: integer
              example: 1510941696
            comment_count:
              description: 'Count of comments on the promotion.'
              type: integer
              example: 5
            likes_count:
              description: 'Count of likes on the promotion.'
              type: integer
              example: 5
            published:
              description: 'Published status for the promotion.'
              type: boolean
              example: true
    promotion-schema-update:
      allOf:
        - $ref: '#/components/schemas/promotion-schema-common'
        - type: object
          properties:
            site_section:
              description: 'The site section of this promotion.'
              type: object
              properties:
                uuid:
                  description: 'Invotra UUID of the site section.'
                  type: string
                  format: uuid
                  example: '01234567-89ab-cdef-1234-56789abcdef0'
            image:
              description: 'The image for this promotion.'
              type: object
              properties:
                uuid:
                  description: 'Invotra UUID of the image.'
                  type: string
                  format: uuid
                  example: '01234567-89ab-cdef-1234-56789abcdef0'
            owner:
              description: 'The owner of this promotion.'
              type: object
              properties:
                uuid:
                  description: 'Invotra UUID of the user.'
                  type: string
                  format: uuid
                  example: '01234567-89ab-cdef-1234-56789abcdef0'
            author:
              description: 'The author of this promotion.'
              type: object
              properties:
                uuid:
                  description: 'Invotra UUID of the user.'
                  type: string
                  format: uuid
                  example: '01234567-89ab-cdef-1234-56789abcdef0'
            team:
              description: 'The team targeting this promotion.'
              type: object
              properties:
                uuid:
                  description: 'Invotra UUID of the team.'
                  type: string
                  format: uuid
                  example: '01234567-89ab-cdef-1234-56789abcdef0'
            locations:
              description: 'The locations targeting this promotion.'
              type: array
              items:
                type: object
                properties:
                  uuid:
                    description: 'Invotra UUID of the location.'
                    type: string
                    format: uuid
                    example: '01234567-89ab-cdef-1234-56789abcdef0'
            grades:
              description: 'The grades targeting this promotion.'
              type: array
              items:
                type: object
                properties:
                  uuid:
                    description: 'Invotra UUID of the grade.'
                    type: string
                    format: uuid
                    example: '01234567-89ab-cdef-1234-56789abcdef0'
            regions:
              description: 'The regions targeting this promotion.'
              type: array
              items:
                type: object
                properties:
                  uuid:
                    description: 'Invotra UUID of the region.'
                    type: string
                    format: uuid
                    example: '01234567-89ab-cdef-1234-56789abcdef0'
            schedule_date_timestamp:
              description: 'The timestamp of the schedule date (in seconds). If present the content is scheduled for a workflow state change, if not, the workflow state will be changed immediately.'
              type: integer
              example: 1510941596
    promotion-schema-create:
      allOf:
        - $ref: '#/components/schemas/promotion-schema-common'
        - type: object
          properties:
            site_section:
              description: 'The site section of this promotion.'
              type: object
              properties:
                uuid:
                  description: 'Invotra UUID of the site section.'
                  type: string
                  format: uuid
                  example: '01234567-89ab-cdef-1234-56789abcdef0'
            image:
              description: 'The image for this promotion.'
              type: object
              properties:
                uuid:
                  description: 'Invotra UUID of the image.'
                  type: string
                  format: uuid
                  example: '01234567-89ab-cdef-1234-56789abcdef0'
            owner:
              description: 'The owner of this promotion.'
              type: object
              properties:
                uuid:
                  description: 'Invotra UUID of the user.'
                  type: string
                  format: uuid
                  example: '01234567-89ab-cdef-1234-56789abcdef0'
            author:
              description: 'The author of this promotion. (Will use the authenticated user if not supplied).'
              type: object
              properties:
                uuid:
                  description: 'Invotra UUID of the user.'
                  type: string
                  format: uuid
                  example: '01234567-89ab-cdef-1234-56789abcdef0'
            team:
              description: 'The team targeting this promotion.'
              type: object
              properties:
                uuid:
                  description: 'Invotra UUID of the team.'
                  type: string
                  format: uuid
                  example: '01234567-89ab-cdef-1234-56789abcdef0'
            locations:
              description: 'The locations targeting this promotion.'
              type: array
              items:
                type: object
                properties:
                  uuid:
                    description: 'Invotra UUID of the location.'
                    type: string
                    format: uuid
                    example: '01234567-89ab-cdef-1234-56789abcdef0'
            grades:
              description: 'The grades targeting this promotion.'
              type: array
              items:
                type: object
                properties:
                  uuid:
                    description: 'Invotra UUID of the grade.'
                    type: string
                    format: uuid
                    example: '01234567-89ab-cdef-1234-56789abcdef0'
            regions:
              description: 'The regions targeting this promotion.'
              type: array
              items:
                type: object
                properties:
                  uuid:
                    description: 'Invotra UUID of the region.'
                    type: string
                    format: uuid
                    example: '01234567-89ab-cdef-1234-56789abcdef0'
          required:
            - title
            - body
            - state
            - site_section
            - review_date_timestamp
            - owner
    promotion-schema-common:
      type: object
      properties:
        title:
          description: 'Title of the promotion.'
          type: string
          example: 'Company talent competition'
        body:
          description: 'The body of the promotion.'
          type: string
          example: 'Demonstrate your talent at the company talent competition.'
        state:
          description: 'Indicates the workflow state of the promotion.'
          type: string
          enum:
            - 'draft'
            - 'needs_review'
            - 'reviewed'
            - 'published'
            - 'unpublished'
        schedule_date_timestamp:
          description: 'The timestamp of the schedule date (in seconds). If present the content is scheduled for a workflow state change, if not, the workflow state will be changed immediately.'
          type: integer
          example: 1510941596
        link:
          description: 'The link for this promotion.'
          type: string
          example: 'https://dev.invotra.com/post/ill-be-annual-leave'
          format: uri
        review_date_timestamp:
          description: 'The review date timestamp for the promotion (in seconds).'
          type: integer
          example: 1510941596
        featured:
          description: 'Indicates that this content is featured.'
          type: boolean
          default: false
          example: false
    location-trimmed-schema:
      properties:
        uuid:
          description: 'Invotra UUID of the location.'
          type: string
          format: uuid
          example: '01234567-89ab-cdef-1234-56789abcdef0'
        name:
          description: The name of the location.
          type: string
          example: Chertsey House
        type:
          description: The location type.
          type: string
          enum:
            - site
            - building
            - floor
            - space
    user-trimmed-schema:
      properties:
        uuid:
          description: 'Invotra UUID of the user.'
          type: string
          format: uuid
          example: '01234567-89ab-cdef-1234-56789abcdef0'
        username:
          description: The user's username
          type: string
          example: Dorothy Whitehead
        title:
          default: ''
          description: The user's title
          enum:
            - ''
            - Dr
            - Mr
            - Miss
            - Mrs
            - Ms
          type: string
          example: Ms
        firstname:
          description: The user's first name
          type: string
          example: Dorothy
        surname:
          description: The user's surname
          type: string
          example: Whitehead
        user_avatar:
          description: The user's image
          type: string
          example: "https://dev.invotra.com/sites/default/files/styles/large_avatar/public/Dorothy%20Whitehead.jpg?itok=6p19"
    manual-listing-schema:
      type: object
      properties:
        uuid:
          description: Invotra UUID of Manual (root page)
          type: string
          format: uuid
          example: '01234567-89ab-cdef-1234-56789abcdef0'
        title:
          description: Manual title
          type: string
          example: Employee Handbook
        image:
          description: Manual Cover Image
          type: object
          allOf:
            - $ref: '#/components/schemas/file-schema'
    manual-page-listing-schema:
      type: object
      properties:
        uuid:
          description: Invotra UUID of the manual page.
          type: string
          format: uuid
          example: '01234567-89ab-cdef-1234-56789abcdef0'
        title:
          description: Title of the manual page.
          type: string
          example: Code of Conduct
        parent_pages:
          description: An array of the manual page's parents, starting with the given root page.
          type: array
          items:
            type: object
            properties:
              uuid:
                description: Invotra UUID of the manual page.
                type: string
                format: uuid
                example: '01234567-89ab-cdef-1234-56789abcdef0'
              title:
                description: Title of the manual page.
                type: string
                example: Code of Conduct
    manual-page-schema:
      type: object
      properties:
        uuid:
          description: Invotra UUID of the manual page.
          type: string
          format: uuid
          example: '01234567-89ab-cdef-1234-56789abcdef0'
        author_uuid:
          description: The uuid of the author
          type: string
          format: uuid
          example: 01234567-89ab-cdef-1234-56789abcdef0
        title:
          description: Title of the manual page
          type: string
          example: Code of Conduct
        summary:
          description: Summary text of the manual page
          type: string
          example: How a company's employees should act
        body:
          description: The main body text contents of the manual page
          type: string
          example: The full body describing Code of Conduct.
        site_section:
          description: Invotra UUID of site section of the manual page
          type: string
          format: uuid
          example: '01234567-89ab-cdef-1234-56789abcdef0'
        reference:
          description: Reference for the manual page
          type: string
          example: 'CCM-1'
        timestamp_created:
          description: This is the timestamp (in seconds) of when the manual page was created
          type: integer
          example: 1510941596
        timestamp_updated:
          description: This is the timestamp (in seconds) of when the manual page was last updated
          type: integer
          example: 1510941696
        attachments:
          description: List of attachments on manual page
          type: array
          items:
            allOf:
              - $ref: '#/components/schemas/file-schema'
        parent_page_uuid:
          description: Invotra UUID of the parent manual page (empty at root).
          type: string
          format: uuid
          example: '01234567-89ab-cdef-1234-56789abcdef0'
        child_pages_count:
          description: Total count of child pages across all sections on this level of the manual hierarchy
          type: integer
          example: 50
        child_sections:
          description: The manual sections of child manual pages
          type: array
          items:
            type: object
            properties:
              section_name:
                description: Manual page section name
                type: string
                example: Appendix
              child_pages:
                description: Manual child pages in section
                type: array
                items:
                  type: object
                  properties:
                    uuid:
                      description: Invotra UUID of the child manual page
                      type: string
                      format: uuid
                      example: '01234567-89ab-cdef-1234-56789abcdef0'
                    title:
                      description: Title of child manual page
                      type: string
                      example: Appendix A - Acronyms
    comment-schema:
      required:
        - uuid
        - body
        - timestamp_created
        - timestamp_updated
        - content_uuid
        - content_type
        - likes_count
      properties:
        uuid:
          description: 'Invotra UUID of the comment.'
          type: string
          format: uuid
          example: 01234567-89ab-cdef-1234-56789abcdef0
        body:
          description: 'The main body text of the comment.'
          type: string
          example: 'How long will this take? I have been waiting ages.'
        author_uuid:
          description: 'Invotra UUID of the author.'
          example: '01234567-89ab-cdef-1234-56789abcdef0'
          type: string
          format: uuid
        timestamp_created:
          description: 'The timestamp (in seconds) of when the comment was created'
          type: integer
          example: 1510941596
        timestamp_updated:
          description: 'The timestamp (in seconds) of when the comment was updated'
          type: integer
          example: 1510941596
        parent_uuid:
          type: string
          format: uuid
          description: 'This is the Invotra UUID of the parent of the comment. Only present on replies.'
          example: '01234567-89ab-cdef-1234-56789abcdef0'
        content_uuid:
          type: string
          format: uuid
          description: 'This is the Invotra UUID of the content.'
          example: '01234567-89ab-cdef-1234-56789abcdef0'
        content_type:
          description: 'The content type machine name of the comment.'
          type: string
          example: 'blog'
        category:
          description: 'The category of the comment.'
          type: object
          required:
            - name
            - uuid
          properties:
            name:
              type: string
              description: 'The name of the comment category.'
              example: 'Idea'
            uuid:
              type: string
              format: uuid
              description: 'This is the Invotra UUID of the comment category.'
              example: '01234567-89ab-cdef-1234-56789abcdef0'
        likes_count:
          description: 'The total number of likes for the comment.'
          type: integer
          example: 33
        attachments:
          description: 'List of attachments on the comment.'
          type: array
          items:
            allOf:
              - $ref: '#/components/schemas/file-schema'
    file-schema:
      type: object
      required:
        - uuid
        - filename
        - file_download
        - type
        - filemime
      properties:
        uuid:
          description: The UUID of the entity.
          type: string
          format: uuid
          example: 01234567-89ab-cdef-1234-56789abcdef0
        filename:
          description: This is the filename
          type: string
          example: wallpaper.jpeg
        file_download:
          description: The location of the file
          type: string
          format: url
          example: 'https://dev.invotra.com/file/1234/download'
        type:
          description: The type of file
          type: string
          enum:
            - image
            - document
            - audio
            - video
        filemime:
          description: The MIME type for the file
          type: string
          example: image/jpeg
        alt_text:
          description: Alt text for an image. Returned if and only if the type is an image.
          type: string
        image_height:
          description: The height of the image in pixels. Returned if and only if the type is an image.
          type: integer
          example: 200
        image_width:
          description: The width of the image in pixels. Returned if and only if the type is an image.
          type: integer
          example: 200
    file-schema-update:
      properties:
        filename:
          description: This is the filename. If using multipart/form-data this field may be omitted in favour of the 'filename' directive of the subpart Content-Disposition header.
          type: string
          example: wallpaper.jpeg
        type:
          description: The type of file.
          type: string
          enum:
            - image
            - document
            - audio
            - video
        filemime:
          description: The MIME type for the file. If using multipart/form-data this field may be omitted in favour of the subpart Content-Type header.
          type: string
          example: image/jpeg
        file:
          description: Base64 encoded version of the file.
          type: string
          format: base64
        alt_text:
          description: Alt text for an image.
          type: string
      type: object
    file-schema-create:
      allOf:
        - $ref: '#/components/schemas/file-schema-update'
        - required:
            - file
            - filename
            - alt_text
            - type
    job-role-schema:
      properties:
        title:
          description: This is the name of the job role
          type: string
          example: Director
        description:
          description: 'This is a description of the job role, optional.'
          type: string
          example: This is a very important job
        external_id:
          description: This is used to store the job role's external reference id
          type: string
          example: ABC123
        parent_uuid:
          description: 'This is the Invotra UUID of the parent job role, optional.'
          example: 01234567-89ab-cdef-1234-56789abcdef0
          type: string
          format: uuid
      type: object
    job-role-list-schema:
      allOf:
        - $ref: '#/components/schemas/job-role-schema'
      type: object
      properties:
        uuid:
          description: 'This is the Invotra UUID of the job role.'
          example: '01234567-89ab-cdef-1234-56789abcdef0'
          type: string
          format: uuid
        has_children:
          description: 'Indicates that this job role has children.'
          type: boolean
          example: true
        published:
          description: 'Indicates that this job role is published.'
          type: boolean
          example: true
        weight:
          description: 'Determines the position of a job role in the hierarchy in relation to its siblings.'
          type: integer
          example: 3
    job-role-schema-create:
      allOf:
        - $ref: '#/components/schemas/job-role-schema'
      required:
        - title
    location-common-schema:
      type: object
      properties:
        title:
          description: This is the name of the location.
          type: string
          example: Dublin
        description:
          description: This is a description of the location.
          type: string
          example: A beautiful city in Ireland
        external_id:
          description: This is used to store the location's external reference id.
          type: string
          example: ABC123
    location-site-schema:
      allOf:
        - type: object
          properties:
            uuid:
              description: 'This is the Invotra UUID of the site.'
              example: '01234567-89ab-cdef-1234-56789abcdef0'
              type: string
              format: uuid
            type:
              description: 'The type of location.'
              type: string
              enum:
                - site
            context:
              allOf:
                - $ref: '#/components/schemas/location-context-schema'
        - $ref: '#/components/schemas/location-site-schema-common'
    location-site-schema-create:
      allOf:
        - $ref: '#/components/schemas/location-site-schema-common'
      required:
        - title
        - address1
    location-site-schema-update:
      allOf:
        - $ref: '#/components/schemas/location-site-schema-common'
    location-site-schema-common:
      allOf:
        - $ref: '#/components/schemas/location-common-schema'
        - type: object
          properties:
            address1:
              description: The first line of the location's postal address.
              type: string
              example: 1 Main Street
            address2:
              description: The second line of the location's postal address.
              type: string
              example: Littleton Village
            address3:
              description: The third line of the location's postal address.
              type: string
              example: Northern District
            town:
              description: The town where the location is.
              type: string
              example: Metropolis
            postcode:
              description: 'The location''s postal code or zip code, if any.'
              type: string
              example: ABC 123
            team:
              description: A team associated with the location.
              type: string
              format: uuid
              example: 01234567-89ab-cdef-1234-56789abcdef0
            phone:
              description: The location's telephone number.
              type: string
              example: +1-23-456-789
            email:
              description: The location's email address.
              type: string
              format: email
    location-building-schema:
      allOf:
        - type: object
          properties:
            uuid:
              description: 'This is the Invotra UUID of the building.'
              example: '01234567-89ab-cdef-1234-56789abcdef0'
              type: string
              format: uuid
            type:
              description: 'The type of location.'
              type: string
              enum:
                - building
            context:
              allOf:
                - $ref: '#/components/schemas/location-context-schema'
        - $ref: '#/components/schemas/location-building-schema-common'
    location-building-schema-create:
      allOf:
        - $ref: '#/components/schemas/location-building-schema-common'
      required:
        - title
        - address1
    location-building-schema-update:
      allOf:
        - $ref: '#/components/schemas/location-building-schema-common'
    location-building-schema-common:
      allOf:
        - $ref: '#/components/schemas/location-site-schema-common'
        - type: object
          properties:
            parent_uuid:
              description: 'The Invotra UUID of the parent location. This location must be a site.'
              type: string
              format: uuid
              example: '01234567-89ab-cdef-1234-56789abcdef0'
    location-floor-schema:
      allOf:
        - type: object
          properties:
            uuid:
              description: 'This is the Invotra UUID of the floor.'
              example: '01234567-89ab-cdef-1234-56789abcdef0'
              type: string
              format: uuid
            type:
              description: 'The type of location.'
              type: string
              enum:
                - floor
            context:
              allOf:
                - $ref: '#/components/schemas/location-context-schema'
        - $ref: '#/components/schemas/location-floor-schema-common'
    location-floor-schema-create:
      allOf:
        - $ref: '#/components/schemas/location-floor-schema-common'
      required:
        - title
    location-floor-schema-update:
      allOf:
        - $ref: '#/components/schemas/location-floor-schema-common'
    location-floor-schema-common:
      allOf:
        - $ref: '#/components/schemas/location-common-schema'
        - type: object
          properties:
            parent_uuid:
              description: 'The Invotra UUID of the parent location. This location must be a building.'
              type: string
              format: uuid
              example: 01234567-89ab-cdef-1234-56789abcdef0
    location-space-schema:
      allOf:
        - type: object
          properties:
            uuid:
              description: 'This is the Invotra UUID of the space.'
              example: '01234567-89ab-cdef-1234-56789abcdef0'
              type: string
              format: uuid
            type:
              description: 'The type of location.'
              type: string
              enum:
                - space
            context:
              allOf:
                - $ref: '#/components/schemas/location-context-schema'
        - $ref: '#/components/schemas/location-space-schema-common'
    location-space-schema-create:
      allOf:
        - $ref: '#/components/schemas/location-space-schema-common'
      required:
        - title
    location-space-schema-update:
      allOf:
        - $ref: '#/components/schemas/location-space-schema-common'
    location-space-schema-common:
      allOf:
        - $ref: '#/components/schemas/location-common-schema'
        - type: object
          properties:
            parent_uuid:
              description: 'The Invotra UUID of the parent location. This location must be a floor.'
              type: string
              format: uuid
              example: 01234567-89ab-cdef-1234-56789abcdef0
    uuid-list-schema:
      items:
        description: An array of UUIDs.
        type: string
        format: uuid
        example: 01234567-89ab-cdef-12F34-56789abcdef0
      type: array
    location-uuid-title-context-list-schema:
      items:
        type: object
        properties:
          uuid:
            description: The entity UUID.
            type: string
            format: uuid
            example: 01234567-89ab-cdef-12F34-56789abcdef0
          title:
            description: The entity title.
            type: string
            example: Chertsey House
          type:
            description: The location type.
            type: string
            enum:
              - site
              - building
              - floor
              - space
          description:
            description: 'The description of the location.'
            type: string
            example: Woking
          parent_uuid:
            description: The parent UUID.
            type: string
            format: uuid
            example: 01234567-89ab-cdef-12F34-56789abcdef0
          external_id:
            description: 'The location external reference id.'
            type: string
            example: 'ABC123'
          address1:
            description: The first line of the location's postal address.
            type: string
            example: 1 Main Street
          address2:
            description: The second line of the location's postal address.
            type: string
            example: Littleton Village
          address3:
            description: The third line of the location's postal address.
            type: string
            example: Northern District
          town:
            description: The town where the location is.
            type: string
            example: Metropolis
          postcode:
            description: 'The location''s postal code or zip code, if any.'
            type: string
            example: ABC 123
          team:
            description: A team associated with the location.
            type: string
            format: uuid
            example: 01234567-89ab-cdef-1234-56789abcdef0
          phone:
            description: The location's telephone number.
            type: string
            example: +1-23-456-789
          email:
            description: The location's email address.
            type: string
            format: email
          context:
            allOf:
              - $ref: '#/components/schemas/location-context-schema'
      type: array
    location-uuid-schema:
      type: object
      properties:
        uuid:
          description: The UUID of the location.
          type: string
          format: uuid
          example: 01234567-89ab-cdef-1234-56789abcdef0
        type:
          description: The location type.
          type: string
          enum:
            - site
            - building
            - floor
            - space
      required:
        - uuid
        - type
    location-uuid-list-schema:
      type: array
      items:
        $ref: '#/components/schemas/location-uuid-schema'
    push-notifications-schema:
      properties:
        token:
          description: The type of file.
          type: string
        device_id:
          description: The unique device id of the device the user is using.
          type: string
        platform:
          description: The OS platform of the user's device.
          type: string
          example: ios
          enum:
            - ios
            - android
      type: object
    location-context-schema:
      description: 'Parent items of the entity that was returned. Ordered from the immediate parent, 3 levels up, towards the root.'
      type: array
      items:
        type: object
        properties:
          uuid:
            description: 'The entity UUID.'
            type: string
            format: uuid
            example: '01234567-89ab-cdef-12F34-56789abcdef0'
          title:
            description: 'The location title.'
            type: string
            example: 'Woking'
          type:
            description: 'The location type.'
            type: string
            enum:
              - site
              - building
              - floor
              - space
            example: 'floor'
          description:
            description: 'The description of the location.'
            type: string
            example: 'Woking head office.'
          parent_uuid:
            description: 'The parent UUID.'
            type: string
            format: uuid
            example: '01234567-89ab-cdef-12F34-56789abcdef0'
          external_id:
            description: 'The location external reference id.'
            type: string
            example: 'ABC123'
          address1:
            description: The first line of the location's postal address.
            type: string
            example: 1 Main Street
          address2:
            description: The second line of the location's postal address.
            type: string
            example: Littleton Village
          address3:
            description: The third line of the location's postal address.
            type: string
            example: Northern District
          town:
            description: The town where the location is.
            type: string
            example: Metropolis
          postcode:
            description: 'The location''s postal code or zip code, if any.'
            type: string
            example: ABC 123
          team:
            description: A team associated with the location.
            type: string
            format: uuid
            example: 01234567-89ab-cdef-1234-56789abcdef0
          phone:
            description: The location's telephone number.
            type: string
            example: +1-23-456-789
          email:
            description: The location's email address.
            type: string
            format: email
    team-membership-common-schema:
      type: object
      properties:
        type:
          description: The membership type.
          type: string
          enum:
            - admin
            - member
      required:
        - type
    user-team-membership-schema:
      allOf:
        - $ref: '#/components/schemas/team-membership-common-schema'
        - type: object
          properties:
            uuid:
              description: The UUID of the team.
              type: string
              format: uuid
              example: 01234567-89ab-cdef-1234-56789abcdef0
          required:
            - uuid
    team-team-membership-schema:
      allOf:
        - $ref: '#/components/schemas/team-membership-common-schema'
        - type: object
          properties:
            uuid:
              description: The UUID of the user.
              type: string
              format: uuid
              example: 01234567-89ab-cdef-1234-56789abcdef0
          required:
            - uuid
    badge-schema:
      allOf:
        - type: object
          properties:
            uuid:
              description: 'Invotra UUID of the badge.'
              type: string
              format: uuid
              example: '01234567-89ab-cdef-1234-56789abcdef0'
            has_children:
              description: 'Indicates that this badge has children.'
              type: boolean
              example: true
        - $ref: '#/components/schemas/badge-schema-common'
        - type: object
          properties:
            image:
              description: 'Badge Image'
              type: object
              allOf:
                - $ref: '#/components/schemas/file-schema'
    badge-schema-update:
      allOf:
        - $ref: '#/components/schemas/badge-schema-common'
        - type: object
          properties:
            image_uuid:
              description: 'Invotra UUID of the image.'
              type: string
              format: uuid
              example: '01234567-89ab-cdef-1234-56789abcdef0'
    badge-schema-create:
      allOf:
        - $ref: '#/components/schemas/badge-schema-common'
        - type: object
          properties:
            image_uuid:
              description: 'Invotra UUID of the image.'
              type: string
              format: uuid
              example: '01234567-89ab-cdef-1234-56789abcdef0'
            published:
              default: true
          required:
            - name
            - image_uuid
    badge-schema-common:
      type: object
      properties:
        name:
          description: 'Name of the badge.'
          type: string
          example: 'Fire Warden'
        description:
          description: 'Description of the badge.'
          type: string
          example: 'In the event of a fire responsible for evacuation'
        external_id:
          description: 'The badge external reference id.'
          type: string
          example: 'ABC123'
        parent_uuid:
          description: 'Invotra UUID of the parent badge.'
          example: '01234567-89ab-cdef-1234-56789abcdef0'
          type: string
          format: uuid
        published:
          description: 'Indicates that this badge is published.'
          type: boolean
          example: true
        weight:
          description: 'Determines the position of a badge in the hierarchy in relation to its siblings.'
          type: integer
          example: 3
    content-category-schema:
      allOf:
        - type: object
          properties:
            uuid:
              description: 'Invotra UUID of the content category.'
              type: string
              format: uuid
              example: '01234567-89ab-cdef-1234-56789abcdef0'
            has_children:
              description: 'Indicates that this content category has children.'
              type: boolean
              example: true
        - $ref: '#/components/schemas/content-category-schema-common'
    content-category-schema-create:
      allOf:
        - $ref: '#/components/schemas/content-category-schema-common'
        - type: object
          properties:
            published:
              default: true
          required:
            - name
            - content_types
    content-category-schema-common:
      type: object
      properties:
        name:
          description: 'Name of the content category.'
          type: string
          example: 'Announcements'
        description:
          description: 'Description of the content category.'
          type: string
          example: 'Content comprising of staff announcements'
        external_id:
          description: 'The content category external reference id.'
          type: string
          example: 'ABC123'
        parent_uuid:
          description: 'Invotra UUID of the parent content category.'
          example: '01234567-89ab-cdef-1234-56789abcdef0'
          type: string
          format: uuid
        published:
          description: 'Indicates that this content category is published.'
          type: boolean
          example: true
        weight:
          description: 'Determines the position of a content category in the hierarchy in relation to its siblings.'
          type: integer
          example: 3
        content_types:
          description: 'The content type machine names within this content category.'
          type: array
          items:
            type: string
          uniqueItems: true
          example:
            - 'manual'
            - 'manual_page'
    content-type-schema:
      allOf:
        - type: object
          properties:
            uuid:
              description: 'Invotra UUID of the content type.'
              type: string
              format: uuid
              example: '01234567-89ab-cdef-1234-56789abcdef0'
        - $ref: '#/components/schemas/content-type-schema-common'
        - type: object
          properties:
            image:
              description: 'Content type Image'
              type: object
              allOf:
                - $ref: '#/components/schemas/file-schema'
    content-type-schema-update:
      allOf:
        - $ref: '#/components/schemas/content-type-schema-common'
        - type: object
          properties:
            image_uuid:
              description: 'Invotra UUID of the image.'
              type: string
              format: uuid
              example: '01234567-89ab-cdef-1234-56789abcdef0'
    content-type-schema-create:
      allOf:
        - $ref: '#/components/schemas/content-type-schema-common'
        - type: object
          properties:
            image_uuid:
              description: 'Invotra UUID of the image.'
              type: string
              format: uuid
              example: '01234567-89ab-cdef-1234-56789abcdef0'
            published:
              default: true
            five_star_rating:
              default: false
            machine_name:
              description: 'The machine name of this content type. If omitted, the machine name will be generated from the name.'
          required:
            - name
            - description
            - comment_option
            - author_uuid
            - created
    content-type-schema-common:
      type: object
      properties:
        name:
          description: 'Name of the content type.'
          type: string
          example: 'Manual'
        description:
          description: 'Description of the content type.'
          type: string
          example: 'Technical communication document'
        external_id:
          description: 'The content type external reference id.'
          type: string
          example: 'ABC123'
        published:
          description: 'Indicates that this content type is published.'
          type: boolean
          example: true
        comment_option:
          description: 'The comments option for this content type.'
          example: 'open'
          type: string
          enum:
            - 'hidden'
            - 'closed'
            - 'open'
        five_star_rating:
          description: 'Indicates that this content type has a five star rating.'
          type: boolean
          example: false
        author_uuid:
          description: 'Invotra UUID of the author.'
          example: '01234567-89ab-cdef-1234-56789abcdef0'
          type: string
          format: uuid
        created:
          description: 'The timestamp (in seconds) of when the content type was created'
          type: integer
          example: 1510941596
        machine_name:
          description: 'The machine name of this content type.'
          type: string
          example: 'guideline'
    country-schema:
      allOf:
        - type: object
          properties:
            uuid:
              description: 'Invotra UUID of the country.'
              type: string
              format: uuid
              example: '01234567-89ab-cdef-1234-56789abcdef0'
            has_children:
              description: 'Indicates that this country has children.'
              type: boolean
              example: true
        - $ref: '#/components/schemas/country-schema-common'
    country-schema-create:
      allOf:
        - $ref: '#/components/schemas/country-schema-common'
        - type: object
          properties:
            published:
              default: true
          required:
            - name
    country-schema-common:
      type: object
      properties:
        name:
          description: 'Name of the country.'
          type: string
          example: 'England'
        description:
          description: 'Description of the country.'
          type: string
          example: 'A Green and pleasant land'
        external_id:
          description: 'The country external reference id.'
          type: string
          example: 'ABC123'
        parent_uuid:
          description: 'Invotra UUID of the parent country.'
          example: '01234567-89ab-cdef-1234-56789abcdef0'
          type: string
          format: uuid
        published:
          description: 'Indicates that this country is published.'
          type: boolean
          example: true
        weight:
          description: 'Determines the position of a country in the hierarchy in relation to its siblings.'
          type: integer
          example: 3
    event-status-schema:
      allOf:
        - type: object
          properties:
            uuid:
              description: 'Invotra UUID of the event status.'
              type: string
              format: uuid
              example: '01234567-89ab-cdef-1234-56789abcdef0'
            has_children:
              description: 'Indicates that this event status has children.'
              type: boolean
              example: true
        - $ref: '#/components/schemas/event-status-schema-common'
    event-status-schema-create:
      allOf:
        - $ref: '#/components/schemas/event-status-schema-common'
        - type: object
          properties:
            published:
              default: true
          required:
            - name
    event-status-schema-common:
      type: object
      properties:
        name:
          description: 'Name of the event status.'
          type: string
          example: 'Cancelled'
        description:
          description: 'Description of the event status.'
          type: string
          example: 'Event is cancelled'
        external_id:
          description: 'The event status external reference id.'
          type: string
          example: 'ABC123'
        parent_uuid:
          description: 'Invotra UUID of the parent event status.'
          example: '01234567-89ab-cdef-1234-56789abcdef0'
          type: string
          format: uuid
        published:
          description: 'Indicates that this event status is published.'
          type: boolean
          example: true
        weight:
          description: 'Determines the position of an event status in the hierarchy in relation to its siblings.'
          type: integer
          example: 3
    event-topic-schema:
      allOf:
        - type: object
          properties:
            uuid:
              description: 'Invotra UUID of the event topic.'
              type: string
              format: uuid
              example: '01234567-89ab-cdef-1234-56789abcdef0'
            has_children:
              description: 'Indicates that this event topic has children.'
              type: boolean
              example: true
        - $ref: '#/components/schemas/event-topic-schema-common'
    event-topic-schema-create:
      allOf:
        - $ref: '#/components/schemas/event-topic-schema-common'
        - type: object
          properties:
            published:
              default: true
          required:
            - name
    event-topic-schema-common:
      type: object
      properties:
        name:
          description: 'Name of the event topic.'
          type: string
          example: 'Luncheon'
        description:
          description: 'Description of the event topic.'
          type: string
          example: 'Special events that include a meal'
        external_id:
          description: 'The event topic external reference id.'
          type: string
          example: 'ABC123'
        parent_uuid:
          description: 'Invotra UUID of the parent event topic.'
          example: '01234567-89ab-cdef-1234-56789abcdef0'
          type: string
          format: uuid
        published:
          description: 'Indicates that this event topic is published.'
          type: boolean
          example: true
        weight:
          description: 'Determines the position of an event topic in the hierarchy in relation to its siblings.'
          type: integer
          example: 3
    free-skill-schema:
      allOf:
        - type: object
          properties:
            uuid:
              description: 'Invotra UUID of the free skill.'
              type: string
              format: uuid
              example: '01234567-89ab-cdef-1234-56789abcdef0'
            has_children:
              description: 'Indicates that this free skill has children.'
              type: boolean
              example: true
        - $ref: '#/components/schemas/free-skill-schema-common'
    free-skill-schema-create:
      allOf:
        - $ref: '#/components/schemas/free-skill-schema-common'
        - type: object
          properties:
            published:
              default: true
          required:
            - name
    free-skill-schema-common:
      type: object
      properties:
        name:
          description: 'Name of the free skill.'
          type: string
          example: 'Carpentry'
        description:
          description: 'Description of the free skill.'
          type: string
          example: 'Making things out of wood'
        external_id:
          description: 'The free skill external reference id.'
          type: string
          example: 'ABC123'
        parent_uuid:
          description: 'Invotra UUID of the parent free skill.'
          example: '01234567-89ab-cdef-1234-56789abcdef0'
          type: string
          format: uuid
        published:
          description: 'Indicates that this free skill is published.'
          type: boolean
          example: true
        weight:
          description: 'Determines the position of a free skill in the hierarchy in relation to its siblings.'
          type: integer
          example: 3
    general-topic-schema:
      allOf:
        - type: object
          properties:
            uuid:
              description: 'Invotra UUID of the general topic.'
              type: string
              format: uuid
              example: '01234567-89ab-cdef-1234-56789abcdef0'
            has_children:
              description: 'Indicates that this general topic has children.'
              type: boolean
              example: true
        - $ref: '#/components/schemas/general-topic-schema-common'
    general-topic-schema-create:
      allOf:
        - $ref: '#/components/schemas/general-topic-schema-common'
        - type: object
          properties:
            published:
              default: true
          required:
            - name
    general-topic-schema-common:
      type: object
      properties:
        name:
          description: 'Name of the general topic.'
          type: string
          example: 'Darts'
        description:
          description: 'Description of the general topic.'
          type: string
          example: 'Anything on the game of darts'
        external_id:
          description: 'The general topic external reference id.'
          type: string
          example: 'ABC123'
        parent_uuid:
          description: 'Invotra UUID of the parent general topic.'
          example: '01234567-89ab-cdef-1234-56789abcdef0'
          type: string
          format: uuid
        published:
          description: 'Indicates that this general topic is published.'
          type: boolean
          example: true
        weight:
          description: 'Determines the position of a general topic in the hierarchy in relation to its siblings.'
          type: integer
          example: 3
    grade-schema:
      allOf:
        - type: object
          properties:
            uuid:
              description: 'Invotra UUID of the grade.'
              type: string
              format: uuid
              example: '01234567-89ab-cdef-1234-56789abcdef0'
            has_children:
              description: 'Indicates that this grade has children.'
              type: boolean
              example: true
        - $ref: '#/components/schemas/grade-schema-common'
    grade-schema-create:
      allOf:
        - $ref: '#/components/schemas/grade-schema-common'
        - type: object
          properties:
            published:
              default: true
          required:
            - name
    grade-schema-common:
      type: object
      properties:
        name:
          description: 'Name of the grade.'
          type: string
          example: 'Grade 3'
        description:
          description: 'Description of the grade.'
          type: string
          example: 'The most middle of the grades'
        external_id:
          description: 'The grade external reference id.'
          type: string
          example: 'ABC123'
        parent_uuid:
          description: 'Invotra UUID of the parent grade.'
          example: '01234567-89ab-cdef-1234-56789abcdef0'
          type: string
          format: uuid
        published:
          description: 'Indicates that this grade is published.'
          type: boolean
          example: true
        weight:
          description: 'Determines the position of a grade in the hierarchy in relation to its siblings.'
          type: integer
          example: 3
    group-category-schema:
      allOf:
        - type: object
          properties:
            uuid:
              description: 'Invotra UUID of the group category.'
              type: string
              format: uuid
              example: '01234567-89ab-cdef-1234-56789abcdef0'
            has_children:
              description: 'Indicates that this group category has children.'
              type: boolean
              example: true
        - $ref: '#/components/schemas/group-category-schema-common'
    group-category-schema-create:
      allOf:
        - $ref: '#/components/schemas/group-category-schema-common'
        - type: object
          properties:
            published:
              default: true
          required:
            - name
    group-category-schema-common:
      type: object
      properties:
        name:
          description: 'Name of the group category.'
          type: string
          example: 'Hobbies'
        description:
          description: 'Description of the group category.'
          type: string
          example: 'Groups discussing hobbies'
        external_id:
          description: 'The group category external reference id.'
          type: string
          example: 'ABC123'
        parent_uuid:
          description: 'Invotra UUID of the parent group category.'
          example: '01234567-89ab-cdef-1234-56789abcdef0'
          type: string
          format: uuid
        published:
          description: 'Indicates that this group category is published.'
          type: boolean
          example: true
        weight:
          description: 'Determines the position of a group category in the hierarchy in relation to its siblings.'
          type: integer
          example: 3
    idea-category-schema:
      allOf:
        - type: object
          properties:
            uuid:
              description: 'Invotra UUID of the idea category.'
              type: string
              format: uuid
              example: '01234567-89ab-cdef-1234-56789abcdef0'
        - $ref: '#/components/schemas/idea-category-schema-common'
    idea-category-schema-create:
      allOf:
        - $ref: '#/components/schemas/idea-category-schema-common'
        - type: object
          properties:
            published:
              default: true
          required:
            - name
            - colour
    idea-category-schema-common:
      type: object
      properties:
        name:
          description: 'Name of the idea category.'
          type: string
          example: 'Staff Welfare'
        description:
          description: 'Description of the idea category.'
          type: string
          example: 'Ideas that may prevent loss of life or injury to staff'
        external_id:
          description: 'The idea category external reference id.'
          type: string
          example: 'ABC123'
        published:
          description: 'Indicates that this idea category is published.'
          type: boolean
          example: true
        weight:
          description: 'Determines the position of an idea category in the hierarchy in relation to its siblings.'
          type: integer
          example: 3
        facet:
          description: 'Facet of the idea category.'
          type: string
          example: 'Idea category facet'
        colour:
          description: 'Colour of the idea category. Any CSS colour allowed.'
          type: string
          example: '#4BB88B'
    interest-schema:
      allOf:
        - type: object
          properties:
            uuid:
              description: 'Invotra UUID of the interest.'
              type: string
              format: uuid
              example: '01234567-89ab-cdef-1234-56789abcdef0'
            has_children:
              description: 'Indicates that this interest has children.'
              type: boolean
              example: true
        - $ref: '#/components/schemas/interest-schema-common'
    interest-schema-create:
      allOf:
        - $ref: '#/components/schemas/interest-schema-common'
        - type: object
          properties:
            published:
              default: true
          required:
            - name
    interest-schema-common:
      type: object
      properties:
        name:
          description: 'Name of the interest.'
          type: string
          example: 'Trainspotting'
        description:
          description: 'Description of the interest.'
          type: string
          example: 'For those with an amateur interest in railways'
        external_id:
          description: 'The interest external reference id.'
          type: string
          example: 'ABC123'
        parent_uuid:
          description: 'Invotra UUID of the parent interest.'
          example: '01234567-89ab-cdef-1234-56789abcdef0'
          type: string
          format: uuid
        published:
          description: 'Indicates that this interest is published.'
          type: boolean
          example: true
        weight:
          description: 'Determines the position of an interest in the hierarchy in relation to its siblings.'
          type: integer
          example: 3
    message-type-schema:
      allOf:
        - type: object
          properties:
            uuid:
              description: 'Invotra UUID of the message type.'
              type: string
              format: uuid
              example: '01234567-89ab-cdef-1234-56789abcdef0'
            has_children:
              description: 'Indicates that this message type has children.'
              type: boolean
              example: true
        - $ref: '#/components/schemas/message-type-schema-common'
        - type: object
          properties:
            image:
              description: 'Message type Image'
              type: object
              allOf:
                - $ref: '#/components/schemas/file-schema'
    message-type-schema-update:
      allOf:
        - $ref: '#/components/schemas/message-type-schema-common'
        - type: object
          properties:
            image_uuid:
              description: 'Invotra UUID of the image.'
              type: string
              format: uuid
              example: '01234567-89ab-cdef-1234-56789abcdef0'
    message-type-schema-create:
      allOf:
        - $ref: '#/components/schemas/message-type-schema-common'
        - type: object
          properties:
            image_uuid:
              description: 'Invotra UUID of the image.'
              type: string
              format: uuid
              example: '01234567-89ab-cdef-1234-56789abcdef0'
            published:
              default: true
            enable_comments:
              default: false
          required:
            - name
    message-type-schema-common:
      type: object
      properties:
        name:
          description: 'Name of the message type.'
          type: string
          example: 'Daily update'
        description:
          description: 'Description of the message type.'
          type: string
          example: 'Details of progress made throughout the day'
        external_id:
          description: 'The message type external reference id.'
          type: string
          example: 'ABC123'
        parent_uuid:
          description: 'Invotra UUID of the parent message type.'
          example: '01234567-89ab-cdef-1234-56789abcdef0'
          type: string
          format: uuid
        published:
          description: 'Indicates that this message type is published.'
          type: boolean
          example: true
        weight:
          description: 'Determines the position of a message type in the hierarchy in relation to its siblings.'
          type: integer
          example: 3
        placeholder:
          description: 'Placeholder of the message type.'
          type: string
          example: 'Type your message here.'
        colour:
          description: 'Colour of the message type. Any CSS colour allowed.'
          type: string
          example: '#4BB88B'
        enable_comments:
          description: 'Indicates that this message type has comments enabled.'
          type: boolean
          example: false
    organisational-skill-schema:
      allOf:
        - type: object
          properties:
            uuid:
              description: 'Invotra UUID of the organisational skill.'
              type: string
              format: uuid
              example: '01234567-89ab-cdef-1234-56789abcdef0'
            has_children:
              description: 'Indicates that this organisational skill has children.'
              type: boolean
              example: true
        - $ref: '#/components/schemas/organisational-skill-schema-common'
    organisational-skill-schema-create:
      allOf:
        - $ref: '#/components/schemas/organisational-skill-schema-common'
        - type: object
          properties:
            published:
              default: true
          required:
            - name
    organisational-skill-schema-common:
      type: object
      properties:
        name:
          description: 'Name of the organisational skill.'
          type: string
          example: 'Accountancy'
        description:
          description: 'Description of the organisational skill.'
          type: string
          example: 'Accountancy can be dull and boring'
        external_id:
          description: 'The organisational skill external reference id.'
          type: string
          example: 'ABC123'
        parent_uuid:
          description: 'Invotra UUID of the parent organisational skill.'
          example: '01234567-89ab-cdef-1234-56789abcdef0'
          type: string
          format: uuid
        published:
          description: 'Indicates that this organisational skill is published.'
          type: boolean
          example: true
        weight:
          description: 'Determines the position of an organisational skill in the hierarchy in relation to its siblings.'
          type: integer
          example: 3
    person-type-schema:
      allOf:
        - type: object
          properties:
            uuid:
              description: 'Invotra UUID of the person type.'
              type: string
              format: uuid
              example: '01234567-89ab-cdef-1234-56789abcdef0'
            has_children:
              description: 'Indicates that this person type has children.'
              type: boolean
              example: true
        - $ref: '#/components/schemas/person-type-schema-common'
    person-type-schema-create:
      allOf:
        - $ref: '#/components/schemas/person-type-schema-common'
        - type: object
          properties:
            published:
              default: true
          required:
            - name
    person-type-schema-common:
      type: object
      properties:
        name:
          description: 'Name of the person type.'
          type: string
          example: 'Part time'
        description:
          description: 'Description of the person type.'
          type: string
          example: 'Works a half day'
        external_id:
          description: 'The person type external reference id.'
          type: string
          example: 'ABC123'
        parent_uuid:
          description: 'Invotra UUID of the parent person type.'
          example: '01234567-89ab-cdef-1234-56789abcdef0'
          type: string
          format: uuid
        published:
          description: 'Indicates that this person type is published.'
          type: boolean
          example: true
        weight:
          description: 'Determines the position of a person type in the hierarchy in relation to its siblings.'
          type: integer
          example: 3
    policy-type-schema:
      allOf:
        - type: object
          properties:
            uuid:
              description: 'Invotra UUID of the policy type.'
              type: string
              format: uuid
              example: '01234567-89ab-cdef-1234-56789abcdef0'
            has_children:
              description: 'Indicates that this policy type has children.'
              type: boolean
              example: true
        - $ref: '#/components/schemas/policy-type-schema-common'
    policy-type-schema-create:
      allOf:
        - $ref: '#/components/schemas/policy-type-schema-common'
        - type: object
          properties:
            published:
              default: true
          required:
            - name
    policy-type-schema-common:
      type: object
      properties:
        name:
          description: 'Name of the policy type.'
          type: string
          example: 'Constituent'
        description:
          description: 'Description of the policy type.'
          type: string
          example: 'Creates executive power entities'
        external_id:
          description: 'The policy type external reference id.'
          type: string
          example: 'ABC123'
        parent_uuid:
          description: 'Invotra UUID of the parent policy type.'
          example: '01234567-89ab-cdef-1234-56789abcdef0'
          type: string
          format: uuid
        published:
          description: 'Indicates that this policy type is published.'
          type: boolean
          example: true
        weight:
          description: 'Determines the position of a policy type in the hierarchy in relation to its siblings.'
          type: integer
          example: 3
    primary-category-schema:
      allOf:
        - type: object
          properties:
            uuid:
              description: 'Invotra UUID of the primary category.'
              type: string
              format: uuid
              example: '01234567-89ab-cdef-1234-56789abcdef0'
            has_children:
              description: 'Indicates that this primary category has children.'
              type: boolean
              example: true
        - $ref: '#/components/schemas/primary-category-schema-common'
    primary-category-schema-create:
      allOf:
        - $ref: '#/components/schemas/primary-category-schema-common'
        - type: object
          properties:
            published:
              default: true
          required:
            - name
    primary-category-schema-common:
      type: object
      properties:
        name:
          description: 'Name of the primary category.'
          type: string
          example: 'Training'
        description:
          description: 'Description of the primary category.'
          type: string
          example: 'Involving  staff training'
        external_id:
          description: 'The primary category external reference id.'
          type: string
          example: 'ABC123'
        parent_uuid:
          description: 'Invotra UUID of the parent primary category.'
          example: '01234567-89ab-cdef-1234-56789abcdef0'
          type: string
          format: uuid
        published:
          description: 'Indicates that this primary category is published.'
          type: boolean
          example: true
        weight:
          description: 'Determines the position of a primary category in the hierarchy in relation to its siblings.'
          type: integer
          example: 3
    project-schema:
      allOf:
        - type: object
          properties:
            uuid:
              description: 'Invotra UUID of the project.'
              type: string
              format: uuid
              example: '01234567-89ab-cdef-1234-56789abcdef0'
            has_children:
              description: 'Indicates that this project has children.'
              type: boolean
              example: true
        - $ref: '#/components/schemas/project-schema-common'
    project-schema-create:
      allOf:
        - $ref: '#/components/schemas/project-schema-common'
        - type: object
          properties:
            published:
              default: true
          required:
            - name
    project-schema-common:
      type: object
      properties:
        name:
          description: 'Name of the project.'
          type: string
          example: 'Office Refurbishment'
        description:
          description: 'Description of the project.'
          type: string
          example: 'Decorating and reorganising the office'
        external_id:
          description: 'The project external reference id.'
          type: string
          example: 'ABC123'
        parent_uuid:
          description: 'Invotra UUID of the parent project.'
          example: '01234567-89ab-cdef-1234-56789abcdef0'
          type: string
          format: uuid
        published:
          description: 'Indicates that this project is published.'
          type: boolean
          example: true
        weight:
          description: 'Determines the position of a project in the hierarchy in relation to its siblings.'
          type: integer
          example: 3
    query-category-schema:
      allOf:
        - type: object
          properties:
            uuid:
              description: 'Invotra UUID of the query category.'
              type: string
              format: uuid
              example: '01234567-89ab-cdef-1234-56789abcdef0'
        - $ref: '#/components/schemas/query-category-schema-common'
    query-category-schema-create:
      allOf:
        - $ref: '#/components/schemas/query-category-schema-common'
        - type: object
          properties:
            published:
              default: true
          required:
            - name
            - colour
    query-category-schema-common:
      type: object
      properties:
        name:
          description: 'Name of the query category.'
          type: string
          example: 'Products'
        description:
          description: 'Description of the query category.'
          type: string
          example: 'Queries on company products'
        external_id:
          description: 'The query category external reference id.'
          type: string
          example: 'ABC123'
        published:
          description: 'Indicates that this query category is published.'
          type: boolean
          example: true
        weight:
          description: 'Determines the position of a query category in the hierarchy in relation to its siblings.'
          type: integer
          example: 3
        facet:
          description: 'Facet of the query category.'
          type: string
          example: 'Query category facet'
        colour:
          description: 'Colour of the query category. Any CSS colour allowed.'
          type: string
          example: '#4BB88B'
    region-schema:
      allOf:
        - type: object
          properties:
            uuid:
              description: 'Invotra UUID of the region.'
              type: string
              format: uuid
              example: '01234567-89ab-cdef-1234-56789abcdef0'
            has_children:
              description: 'Indicates that this region has children.'
              type: boolean
              example: true
        - $ref: '#/components/schemas/region-schema-common'
    region-schema-create:
      allOf:
        - $ref: '#/components/schemas/region-schema-common'
        - type: object
          properties:
            published:
              default: true
          required:
            - name
    region-schema-common:
      type: object
      properties:
        name:
          description: 'Name of the region.'
          type: string
          example: 'Midlands'
        description:
          description: 'Description of the region.'
          type: string
          example: 'Middle of England'
        external_id:
          description: 'The region external reference id.'
          type: string
          example: 'ABC123'
        parent_uuid:
          description: 'Invotra UUID of the parent region.'
          example: '01234567-89ab-cdef-1234-56789abcdef0'
          type: string
          format: uuid
        published:
          description: 'Indicates that this region is published.'
          type: boolean
          example: true
        weight:
          description: 'Determines the position of a region in the hierarchy in relation to its siblings.'
          type: integer
          example: 3
    search-highlight-schema:
      allOf:
        - type: object
          properties:
            uuid:
              description: 'Invotra UUID of the search highlight.'
              type: string
              format: uuid
              example: '01234567-89ab-cdef-1234-56789abcdef0'
        - $ref: '#/components/schemas/search-highlight-schema-common'
    search-highlight-schema-create:
      allOf:
        - $ref: '#/components/schemas/search-highlight-schema-common'
        - type: object
          properties:
            published:
              default: true
          required:
            - name
            - list
    search-highlight-schema-common:
      type: object
      properties:
        name:
          description: 'Name of the search highlight.'
          type: string
          example: 'Skegness'
        description:
          description: 'Description of the search highlight.'
          type: string
          example: 'Seaside town in Lincolnshire'
        external_id:
          description: 'The search highlight external reference id.'
          type: string
          example: 'ABC123'
        published:
          description: 'Indicates that this search highlight is published.'
          type: boolean
          example: true
        weight:
          description: 'Determines the position of a search highlight in the hierarchy in relation to its siblings.'
          type: integer
          example: 3
        list:
          description: 'List of content and links in the search highlight.'
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/search-highlight-list-content-schema'
              - $ref: '#/components/schemas/search-highlight-list-site_section-schema'
              - $ref: '#/components/schemas/search-highlight-list-link-schema'
            discriminator:
              propertyName: type
              mapping:
                content: '#/components/schemas/search-highlight-list-content-schema'
                site_section: '#/components/schemas/search-highlight-list-site_section-schema'
                link: '#/components/schemas/search-highlight-list-link-schema'
    search-highlight-list-common-schema:
      type: object
      properties:
        type:
          description: 'The type of content in the search highlight.'
          type: string
          enum:
            - 'content'
            - 'site_section'
            - 'link'
        title:
          description: 'Title of the content or link.'
          type: string
          example: 'More information here.'
      required:
      - type
      - title
      - content
    search-highlight-list-content-schema:
      allOf:
      - $ref: '#/components/schemas/search-highlight-list-common-schema'
      - type: object
        properties:
          type:
            example: 'content'
          content:
            type: object
            properties:
              uuid:
                description: 'Invotra UUID of the content.'
                type: string
                format: uuid
                example: '01234567-89ab-cdef-1234-56789abcdef0'
    search-highlight-list-site_section-schema:
      allOf:
      - $ref: '#/components/schemas/search-highlight-list-common-schema'
      - type: object
        properties:
          type:
            example: 'site_section'
          content:
            type: object
            properties:
              uuid:
                description: 'Invotra UUID of the site section.'
                type: string
                format: uuid
                example: '01234567-89ab-cdef-1234-56789abcdef0'
    search-highlight-list-link-schema:
      allOf:
      - $ref: '#/components/schemas/search-highlight-list-common-schema'
      - type: object
        properties:
          type:
            example: 'link'
          content:
            type: string
            description: 'The URL of the link.'
            example: 'https://example.com'
    security-classification-schema:
      allOf:
        - type: object
          properties:
            uuid:
              description: 'Invotra UUID of the security classification.'
              type: string
              format: uuid
              example: '01234567-89ab-cdef-1234-56789abcdef0'
            has_children:
              description: 'Indicates that this security classification has children.'
              type: boolean
              example: true
        - $ref: '#/components/schemas/security-classification-schema-common'
    security-classification-schema-create:
      allOf:
        - $ref: '#/components/schemas/security-classification-schema-common'
        - type: object
          properties:
            published:
              default: true
          required:
            - name
    security-classification-schema-common:
      type: object
      properties:
        name:
          description: 'Name of the security classification.'
          type: string
          example: 'Top Secret'
        description:
          description: 'Description of the security classification.'
          type: string
          example: 'Strictly only authorised access'
        external_id:
          description: 'The security classification external reference id.'
          type: string
          example: 'ABC123'
        parent_uuid:
          description: 'Invotra UUID of the parent security classification.'
          example: '01234567-89ab-cdef-1234-56789abcdef0'
          type: string
          format: uuid
        published:
          description: 'Indicates that this security classification is published.'
          type: boolean
          example: true
        weight:
          description: 'Determines the position of a security classification in the hierarchy in relation to its siblings.'
          type: integer
          example: 3
    title-schema:
      allOf:
        - type: object
          properties:
            uuid:
              description: 'Invotra UUID of the title.'
              type: string
              format: uuid
              example: '01234567-89ab-cdef-1234-56789abcdef0'
            has_children:
              description: 'Indicates that this title has children.'
              type: boolean
              example: true
        - $ref: '#/components/schemas/title-schema-common'
    title-schema-create:
      allOf:
        - $ref: '#/components/schemas/title-schema-common'
        - type: object
          properties:
            published:
              default: true
          required:
            - name
    title-schema-common:
      type: object
      properties:
        name:
          description: 'Name of the title.'
          type: string
          example: 'Dr'
        description:
          description: 'Description of the title.'
          type: string
          example: 'Qualified doctor'
        external_id:
          description: 'The title external reference id.'
          type: string
          example: 'ABC123'
        parent_uuid:
          description: 'Invotra UUID of the parent title.'
          example: '01234567-89ab-cdef-1234-56789abcdef0'
          type: string
          format: uuid
        published:
          description: 'Indicates that this title is published.'
          type: boolean
          example: true
        weight:
          description: 'Determines the position of a title in the hierarchy in relation to its siblings.'
          type: integer
          example: 3
    user-category-schema:
      allOf:
        - type: object
          properties:
            uuid:
              description: 'Invotra UUID of the user category.'
              type: string
              format: uuid
              example: '01234567-89ab-cdef-1234-56789abcdef0'
            has_children:
              description: 'Indicates that this user category has children.'
              type: boolean
              example: true
        - $ref: '#/components/schemas/user-category-schema-common'
    user-category-schema-create:
      allOf:
        - $ref: '#/components/schemas/user-category-schema-common'
        - type: object
          properties:
            published:
              default: true
          required:
            - name
    user-category-schema-common:
      type: object
      properties:
        name:
          description: 'Name of the user category.'
          type: string
          example: 'Volunteer'
        description:
          description: 'Description of the user category.'
          type: string
          example: 'User who performs volunteering role'
        external_id:
          description: 'The user category external reference id.'
          type: string
          example: 'ABC123'
        parent_uuid:
          description: 'Invotra UUID of the parent user category.'
          example: '01234567-89ab-cdef-1234-56789abcdef0'
          type: string
          format: uuid
        published:
          description: 'Indicates that this user category is published.'
          type: boolean
          example: true
        weight:
          description: 'Determines the position of a user category in the hierarchy in relation to its siblings.'
          type: integer
          example: 3
        users_uuids:
          description: 'Invotra UUIDs of users in this user category.'
          allOf:
            - $ref: '#/components/schemas/uuid-list-schema'
    title-uuid-list-common-schema:
      type: array
      items:
        type: object
        required:
          - name
          - uuid
        properties:
          name:
            description: The title of the entity.
            type: string
            readOnly: true
          uuid:
            description: The UUID of the entity.
            type: string
            format: uuid
            example: 01234567-89ab-cdef-1234-56789abcdef0
    title-or-uuid-writable-list-schema:
      type: array
      items:
        anyOf:
          - type: object
            properties:
              name:
                description: The title of the entity. Case sensitive.
                type: string
                example: Entity Title
          - type: object
            properties:
              uuid:
                description: The UUID of the entity.
                type: string
                format: uuid
                example: 01234567-89ab-cdef-1234-56789abcdef0
    entity-lookup-schema:
      type: object
      properties:
        type:
          type: string
          description: The entity type.
          example: node
        subtype:
          type: string
          description: The entity subtype (or "bundle" in Drupal parlance).
          example: group
        uuid:
          description: The UUID of the entity.
          type: string
          format: uuid
          example: 01234567-89ab-cdef-1234-56789abcdef0
      required:
        - type
        - subtype
        - uuid
    auth-token-schema:
      type: object
      properties:
        token:
          type: string
          description: A temporary single-use token previously received from the website. Clients should treat this as an opaque value.
      required:
        - token
    csrf-token-schema:
      type: object
      properties:
        token:
          type: string
          description: A token to protect against cross-site request forgery. Clients should treat this as an opaque value.
      required:
        - token
    html-response-schema:
      type: string
      example: |
        <!DOCTYPE html>
        <html>
          ...
        </html>
