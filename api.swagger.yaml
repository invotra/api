openapi: 3.0.0
servers:
  - url: 'https://dev.invotra.com/api/0.3'
info:
  title: InvotraAPI
  description: In general most fields are optional for update (PUT) requests; you can leave them blank (pass an empty string / array / whatever as appropriate) to clear them, or omit the key to leave them unchanged.
  version: '0.3'
security:
  - APIKeyHeader: []
  - APISessionHeader: []
paths:
  /branding:
    get:
      tags:
        - configuration
      responses:
        '200':
          description: Branding returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/branding-schema'
      description: Returns the branding for an instance of Invotra.
  /product_options:
    get:
      tags:
        - configuration
      responses:
        '200':
          description: Product options returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/product-options-schema'
      description: Returns the product options for an instance of Invotra.
  /configuration:
    get:
      tags:
        - configuration
      responses:
        '200':
          description: Configuration returned. Any configuration that the user does not have access to view is omitted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/configuration-schema'
  /entities/path-lookup:
    get:
      tags:
        - entities
      summary: Look up information about an entity based on its URL path.
      parameters:
        - description: The (Drupal) URL path of the entity to look up. Include the leading slash.
          in: query
          name: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Entity found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/entity-lookup-schema'
        '400':
          description: Path not provided or malformed.
        '403':
          description: User is not authorized to perform the lookup (e.g. they are unauthenticated and anonymous content access is disabled), or does not have access to the entity that was found (e.g. it is a private group and the user is not a member).
        '404':
          description: No matching entity was found for the given path.
  /sessions/token:
    get:
      tags:
        - sessions
      description: Returns a CSRF token.
      responses:
        '200':
          description: Returns a CSRF token.
    post:
      tags:
        - sessions
      description: Exchange a temporary single-use token for a valid user session and CSRF token. This is intended for use by mobile apps.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/auth-token-schema'
        required: true
      responses:
        '200':
          description: A valid token was exchanged for a valid session.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/csrf-token-schema'
          headers:
            Set-Cookie:
              description: A valid session cookie.
              schema:
                type: string
        '400':
          description: The JSON was malformed.
        '401':
          description: The token was not valid.
        '422':
          description: The JSON did not match the schema.
  /sessions/login:
    post:
      tags:
        - sessions
      description: Login a user.
      responses:
        '200':
          description: Successfully logged in a user.
        '401':
          description: Access denied
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/session-schema'
        required: true
  /sessions/logout:
    post:
      tags:
        - sessions
      description: Logout the user.
      responses:
        '200':
          description: Successfully logged user out.
  /teams:
    get:
      tags:
        - teams
      parameters:
        - description: Filter by external ID.
          in: query
          name: external_id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of teams matching the filter criteria.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/uuid-list-schema'
      description: Search for teams. An empty array is returned if no teams are found.
    post:
      tags:
        - teams
      responses:
        '201':
          description: The team was created successfully.
          headers:
            Location:
              description: |
                The URL at which the newly provisioned team may be retrieved.
              schema:
                type: string
        '400':
          description: The team was not saved due to malformed JSON.
        '422':
          description: |
            The team was not saved due to Drupal validation failure or JSON
            schema validation failure.
      description: Provision a new team.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/team-schema-create'
        required: true
  /teams/list:
    get:
      tags:
        - teams
      parameters:
        - name: label
          description: Filter by label. Matches on whole words.
          in: query
          schema:
            type: string
        - name: autocomplete
          description: Autocomplete term. Matches on team name, per letter, from the start of the word.
          in: query
          schema:
            type: string
        - name: users_fulltext_search
          description: Filter the list of teams to those that include users matching a search term. This is useful when you have already searched for users and want to refine your search by team (like a faceted search). Like the fulltext_search parameter of /users/search, this matches on whole words.
          in: query
          schema:
            type: string
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
      responses:
        '200':
          description: List of teams matching the filter criteria.
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    description: Count of results.
                    type: integer
                    example: 50
                  results:
                    description: The results set.
                    allOf:
                      - $ref: '#/components/schemas/uuid-label-context-list-schema'
      description: Search for teams. An empty array is returned if no teams are found.
  '/teams/{team_id}':
    get:
      tags:
        - teams
      parameters:
        - description: The Invotra UUID of the team.
          in: path
          name: team_id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Returns a single complete Team object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/team-schema'
        '400':
          description: The supplied UUID was malformed.
        '404':
          description: The UUID does not correspond to an existing team.
      description: Get information about the team.
    put:
      tags:
        - teams
      parameters:
        - description: The Invotra UUID of the team.
          in: path
          name: team_id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The team information was updated successfully.
        '400':
          description: The supplied UUID or JSON was malformed.
        '404':
          description: The UUID does not correspond to an existing team.
        '422':
          description: |
            The team was not updated due to a Drupal validation failure or a
            JSON schema validation failure.
      description: Update team information.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/team-schema'
        required: true
  '/teams/{team_id}/memberships':
    get:
      tags:
        - teams
      parameters:
        - description: The Invotra UUID of the team.
          in: path
          name: team_id
          required: true
          schema:
            type: string
            format: uuid
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
      responses:
        '200':
          description: |
            List of team members. If there are no members, an empty array.
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    description: Count of results.
                    type: integer
                    example: 50
                  results:
                    description: The results set.
                    type: array
                    items:
                      $ref: '#/components/schemas/team-team-membership-schema'
        '400':
          description: The supplied UUID was malformed.
        '404':
          description: The UUID does not correspond to an existing team.
      description: Get a list of team members.
  '/teams/{team_id}/memberships/{user_id}':
    delete:
      tags:
        - teams
      parameters:
        - description: The Invotra UUID of the team.
          in: path
          name: team_id
          required: true
          schema:
            type: string
            format: uuid
        - description: The Invotra UUID of the user.
          in: path
          name: user_id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The user has been removed from the team.
        '400':
          description: The UUID was malformed.
        '404':
          description: |
            The user or team does not exist, or the user was not a member
            of the team.
      description: Remove the user's membership of the team.
    put:
      tags:
        - teams
      parameters:
        - description: The Invotra UUID of the team.
          in: path
          name: team_id
          required: true
          schema:
            type: string
            format: uuid
        - description: The Invotra UUID of the user.
          in: path
          name: user_id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The user's membership of this team was updated.
        '201':
          description: The user was added as a member of the team.
        '400':
          description: The UUID was malformed or the role type was invalid.
        '404':
          description: The user or team does not exist.
      description: Update information about a user's team membership.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/team-membership-common-schema'
        required: true
  /users:
    get:
      tags:
        - users
      parameters:
        - description: Filter by external ID.
          in: query
          name: external_id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: |
            List of users matching the filter criteria, or an empty array if no
            matching users are found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/uuid-list-schema'
      description: Search for users. Returns list of uuids.
    post:
      tags:
        - users
      responses:
        '201':
          description: The user was created successfully.
          headers:
            Location:
              description: |
                The URL at which the newly provisioned user may be retrieved.
              schema:
                type: string
        '400':
          description: The user was not saved due to malformed JSON.
        '409':
          description: |
            The user was not saved because the username or email address is
            already in use.
        '422':
          description: |
            The user was not saved due to Drupal validation failure (other than
            a duplicate username or email address) or JSON schema validation
            failure.
      description: Provision a new user in Invotra.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/user-schema-create'
        required: true
  /users/metrics/accessed:
    get:
      tags:
        - users
      parameters:
        - description: 'Filter by calendar month. Format: YYYY-MM'
          in: query
          name: month
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'Count of users returned.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user-metrics-accessed-schema'
        '403':
          description: 'User is not authorized to view this.'
      description: Returns a count of users who accessed the site on 4 or more days within a given calendar month.
  /users/search:
    get:
      tags:
        - users
      parameters:
        - description: Search term. Matches on whole words.
          in: query
          name: fulltext_search
          schema:
            type: string
        - description: Filter by team.
          in: query
          name: team
          schema:
            type: string
            format: uuid
        - description: Filter by location.
          in: query
          name: location
          schema:
            type: string
            format: uuid
        - description: Filter by group.
          in: query
          name: group
          schema:
            type: string
            format: uuid
        - description: Field to sort by
          in: query
          name: sort
          schema:
            type: string
            enum:
              - firstname
              - surname
              - updated
              - relevance
            default: relevance
        - description: Sort order
          in: query
          name: order
          schema:
            type: string
            enum:
              - asc
              - desc
            default: desc
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
      responses:
        '200':
          description: List of users matching the filter criteria.
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    description: Count of results.
                    type: integer
                    example: 50
                  results:
                    description: The results set.
                    type: array
                    items:
                      $ref: '#/components/schemas/user-search-schema'
        '403':
          description: Access denied. This may occur if you try to filter by a private or secret group that you are not a member of.
    description: Search for users. Returns user snippets. If there are no result, an empty array is returned.
  /users/mention:
    get:
      tags:
        - users
      summary: Autocomplete names and email addresses for @-mentioning.
      description: Autocomplete names and email addresses for @-mentioning. The text parameter matches against the start of the user's full name (forename surname or surname forename) or email address. Full user objects are returned. The list may optionally be filtered by group to show only members of the group, to allow completing only users that can be mentioned when composing a group post. You can not filter by members of a private or secret group unless you are a member yourself. Webmasters can always be mentioned, so they are always matched even if they are not members of the group being filtered. Redacted users are never matched.
      parameters:
        - name: text
          in: query
          schema:
            type: string
          description: Text to match against the start of the user's full name or email address.
          required: true
        - name: group
          in: query
          schema:
            type: string
            format: uuid
          description: UUID of the group to filter by.
        - $ref: '#/components/parameters/limitParam'
      responses:
        '200':
          description: List of matching users, or an empty array if none match.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/user-search-schema'
        '404':
          description: A group UUID was supplied but no existing group matches.
        '403':
          description: A group UUID was supplied but the group is a private or secret group and the user making the request is not a member.
        '400':
          description: A malformed group UUID was supplied.
  /users/me:
    get:
      tags:
        - users
      responses:
        '200':
          description: Returns the current user's UUID.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user-schema'
        '404':
          description: Current user was not found.
      description: Get the current user's information.
  '/users/{user_id}':
    get:
      tags:
        - users
      parameters:
        - description: The Invotra UUID of the user.
          in: path
          name: user_id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Returns a single complete user object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user-schema'
        '400':
          description: The supplied UUID was malformed.
        '404':
          description: No user with that UUID was found.
      description: Get the user's information.
    put:
      tags:
        - users
      parameters:
        - description: The Invotra UUID of the user.
          in: path
          name: user_id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The user's information was updated.
        '400':
          description: The supplied UUID or JSON was malformed.
        '404':
          description: The UUID does not correspond to an existing user.
        '409':
          description: |
            The user was not saved because the requested new username or email
            address is already in use by a different user.
        '422':
          description: |
            The user was not updated due to Drupal validation failure (other
            than a duplicate username or email address) or JSON schema
            validation failure.
      description: Update the user's information.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/user-schema-update'
        required: true
  '/users/{user_id}/activity':
    get:
      tags:
        - users
      description: Return the user's activity feed.
      parameters:
        - in: path
          name: user_id
          description: The Invotra UUID of the user.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
      responses:
        '200':
          description: >
            Activity feed returned successfully. An empty array is returned if
            there are no results.
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    description: Count of results.
                    type: integer
                    example: 50
                  results:
                    description: The results set.
                    type: array
                    items:
                      $ref: '#/components/schemas/feed-schema'
        '400':
          description: The supplied UUID was malformed.
        '404':
          description: The UUID does not correspond to an existing user.
  '/users/{user_id}/job_roles':
    get:
      tags:
        - users
      description: List the user's job roles.
      parameters:
        - in: path
          name: user_id
          description: The Invotra UUID of the user.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
      responses:
        '200':
          description: >
            List of job roles associated with the user, or an empty array if the
            user has no job roles.
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    description: Count of results.
                    type: integer
                    example: 50
                  results:
                    description: The results set.
                    allOf:
                      - $ref: '#/components/schemas/uuid-list-schema'
        '400':
          description: The supplied UUID was malformed.
        '404':
          description: The UUID does not correspond to an existing user.
  '/users/{user_id}/job_roles/{job_role_id}':
    delete:
      tags:
        - users
      description: Remove a job role from a user.
      parameters:
        - description: The Invotra UUID of the user.
          in: path
          name: user_id
          required: true
          schema:
            type: string
            format: uuid
        - description: The Invotra UUID of the job role.
          in: path
          name: job_role_id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The job role has been removed from the user.
        '400':
          description: One or both of the UUIDs was malformed.
        '404':
          description: >
            The user or job role does not exist, or the user did not have that
            job role.
    put:
      tags:
        - users
      description: Add a job role to a user.
      parameters:
        - description: The Invotra UUID of the user.
          in: path
          name: user_id
          required: true
          schema:
            type: string
            format: uuid
        - description: The Invotra UUID of the job role.
          in: path
          name: job_role_id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The user already has this job role.
        '201':
          description: The job role was added to the user.
        '400':
          description: One or both of the UUIDs was malformed.
        '404':
          description: The user or job role does not exist.
  '/users/{user_id}/locations':
    get:
      tags:
        - users
      description: List the user's locations.
      parameters:
        - in: path
          name: user_id
          description: The Invotra UUID of the user.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
      responses:
        '200':
          description: >
            List of locations associated with the user, or an empty array if the
            user has no locations.
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    description: Count of results.
                    type: integer
                    example: 50
                  results:
                    description: The results set.
                    allOf:
                      - $ref: '#/components/schemas/location-uuid-list-schema'
        '400':
          description: The supplied UUID was malformed.
        '404':
          description: The UUID does not correspond to an existing user.
  '/users/{user_id}/locations/{location_id}':
    delete:
      tags:
        - users
      description: Remove a location from a user.
      parameters:
        - description: The Invotra UUID of the user.
          in: path
          name: user_id
          required: true
          schema:
            type: string
            format: uuid
        - description: The Invotra UUID of the location.
          in: path
          name: location_id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The location has been removed from the user.
        '400':
          description: One or both of the UUIDs was malformed.
        '404':
          description: >
            The user or location does not exist, or the user did not have that
            location.
    put:
      tags:
        - users
      description: Add a location to a user.
      parameters:
        - description: The Invotra UUID of the user.
          in: path
          name: user_id
          required: true
          schema:
            type: string
            format: uuid
        - description: The Invotra UUID of the location.
          in: path
          name: location_id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The user already has this location.
        '201':
          description: The location was added to the user.
        '400':
          description: One or both of the UUIDs was malformed.
        '404':
          description: The user or location does not exist.
  '/users/{user_id}/teams':
    get:
      tags:
        - users
      description: List a user's teams
      parameters:
        - in: path
          name: user_id
          description: The Invotra UUID of the user.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
      responses:
        '200':
          description: >
            List of teams of which the user is a member, indicating the
            membership type (admin or member) for each team. If the user is not
            a member of any teams, an empty array is returned.
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    description: Count of results.
                    type: integer
                    example: 50
                  results:
                    description: The results set.
                    type: array
                    items:
                      $ref: '#/components/schemas/user-team-membership-schema'
        '400':
          description: The supplied UUID was malformed.
        '404':
          description: The UUID does not correspond to an existing user.
  '/users/{user_id}/following':
    get:
      tags:
        - users
      description: List of who a user is following.
      parameters:
        - in: path
          name: user_id
          description: The Invotra UUID of the user.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
      responses:
        '200':
          description: |
            List of who a user is following.
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    description: Count of results.
                    type: integer
                    example: 50
                  results:
                    description: The results set.
                    type: array
                    items:
                      $ref: '#/components/schemas/user-search-schema'
        '400':
          description: The supplied UUID was malformed.
        '404':
          description: The UUID does not correspond to an existing user.
  '/users/{user_id}/groups':
    get:
      tags:
        - users
      description: List a user's groups.
      parameters:
        - in: path
          name: user_id
          description: The Invotra UUID of the user.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
      responses:
        '200':
          description: |
            List of a user's groups.
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    description: Count of results.
                    type: integer
                    example: 50
                  results:
                    description: The results set.
                    type: array
                    items:
                      $ref: '#/components/schemas/group-schema'
        '400':
          description: The supplied UUID was malformed.
        '404':
          description: The UUID does not correspond to an existing user.
  '/users/{user_id}/follow':
    delete:
      tags:
        - users
      parameters:
        - description: The Invotra UUID of the user to unfollow.
          in: path
          name: user_id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Follower flag removed.
        '400':
          description: The UUID was malformed.
        '404':
          description: |
            The user or follower flag does not exist.
      description: Stop following a user.
    get:
      tags:
        - users
      parameters:
        - description: The Invotra UUID of the user to check following status against.
          in: path
          name: user_id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: |
            Follow status returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/common-status-schema'
        '400':
          description: The UUID was malformed.
        '404':
          description: The user does not exist.
    put:
      tags:
        - users
      parameters:
        - description: The Invotra UUID of the user to follow.
          in: path
          name: user_id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The user is now following the other user.
        '400':
          description: The UUID was malformed.
        '404':
          description: The user or follower does not exist.
      description: Follow a user as another user.
  /groups:
    get:
      tags:
        - groups
      parameters:
        - description: Filter by external ID.
          in: query
          name: external_id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of groups matching the filter criteria.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/uuid-list-schema'
      description: Search for groups. Returns list of uuids. Returns an empty array if no groups are found.
    post:
      tags:
        - groups
      responses:
        '201':
          description: The group was created successfully.
          headers:
            Location:
              description: |
                The URL at which the newly created group may be retrieved.
              schema:
                type: string
        '400':
          description: The group was not saved due to malformed JSON.
        '403':
          description: The user does not have permission to create groups.
        '422':
          description: |
            The group was not saved due to Drupal validation failure or JSON schema validation
            failure.
      description: Create a group.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/group-schema'
        required: true
  '/groups/{group_id}/posts':
    get:
      tags:
        - groups
      parameters:
        - description: The Invotra UUID of the group.
          in: path
          name: group_id
          required: true
          schema:
            type: string
            format: uuid
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
      responses:
        '200':
          description: |
            List of group posts. If there are no posts, an empty array.
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    description: Count of results.
                    type: integer
                    example: 50
                  results:
                    description: The results set.
                    type: array
                    items:
                      $ref: '#/components/schemas/post-schema'
        '400':
          description: The supplied UUID was malformed.
        '403':
          description: The group is private or secret and the user is not a member.
        '404':
          description: The UUID does not correspond to an existing group.
      description: Get a list of group posts. This returns only the top-level posts in the group, not their replies.
  /groups/search:
    get:
      tags:
        - groups
      parameters:
        - description: Search term. Matches on whole words.
          in: query
          name: fulltext_search
          schema:
            type: string
        - description: Filter by UUID of a category.
          in: query
          name: category
          schema:
            type: string
        - description: Filter by groups the current user is a member of.
          in: query
          name: my_groups
          schema:
            type: boolean
            default: false
        - description: Field to sort by.
          in: query
          name: sort
          schema:
            type: string
            enum:
              - relevance
              - likes
              - members_count
            default: relevance
        - description: Sort order.
          in: query
          name: order
          schema:
            type: string
            enum:
              - asc
              - desc
            default: desc
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
      responses:
        '200':
          description: List of groups matching the filter criteria.
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    description: Count of results.
                    type: integer
                    example: 50
                  results:
                    description: The results set.
                    type: array
                    items:
                      $ref: '#/components/schemas/group-search-schema'
    description: 'Search for groups. Returns group snippets. An empty array is returned if no groups are found.'
  /groups/categories:
    get:
      tags:
        - groups
      parameters:
        - description: Filter by label. Matches on whole words.
          in: query
          name: label
          schema:
            type: string
        - description: Autocomplete term. Matches on group category name, per letter, from the start of the word.
          in: query
          name: autocomplete
          schema:
            type: string
        - description: Filter the list of categories to those that include groups matching a search term. This is useful when you have already searched for groups and want to refine your search by category (like a faceted search). Like the fulltext_search parameter of /groups/search, this matches on whole words.
          in: query
          name: group_fulltext_search
          schema:
            type: string
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
      responses:
        '200':
          description: List of group categories.
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    description: Count of results.
                    type: integer
                    example: 50
                  results:
                    description: The results set.
                    allOf:
                      - $ref: '#/components/schemas/title-uuid-list-common-schema'
    description: 'List all group categories. An empty array is returned if no categories are found'
  '/groups/metrics':
    get:
      tags:
        - groups
      responses:
        '200':
          description: Summary of metrics across all groups.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/group-metrics-schema'
        '403':
          description: The user is not permitted to view metrics.
  '/groups/{group_id}':
    get:
      tags:
        - groups
      parameters:
        - description: The Invotra UUID of the group.
          in: path
          name: group_id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Returns a single complete group object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/group-schema'
        '400':
          description: The supplied UUID was malformed.
        '403':
          description: The group is secret and the user is not a member.
        '404':
          description: The UUID does not correspond to an existing group.
      description: Get information about the group.
  '/groups/{group_id}/members':
    get:
      tags:
        - groups
      parameters:
        - description: The Invotra UUID of the group.
          in: path
          name: group_id
          required: true
          schema:
            type: string
            format: uuid
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
      responses:
        '200':
          description: |
            List of group members. If there are no members, an empty array.
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    description: Count of results.
                    type: integer
                    example: 50
                  results:
                    description: The results set.
                    type: array
                    items:
                      $ref: '#/components/schemas/user-schema'
        '400':
          description: The supplied UUID was malformed.
        '403':
          description: The group is private or secret and the user is not a member.
        '404':
          description: The UUID does not correspond to an existing group.
      description: Get a list of group members.
  '/groups/{group_id}/my_membership':  
    get:
      tags:
        - groups
      parameters:
        - description: The Invotra UUID of the group to check membership status against.
          in: path
          name: group_id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: |
            Membership status returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/group-membership-status-schema'
        '400':
          description: The UUID was malformed.
        '404':
          description: The group does not exist.
      description: Check if the current user is a member of a group.
  '/groups/{group_id}/members/{user_id}':
    delete:
      tags:
        - groups
      parameters:
        - description: The Invotra UUID of the group.
          in: path
          name: group_id
          required: true
          schema:
            type: string
            format: uuid
        - description: The Invotra UUID of the user.
          in: path
          name: user_id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The user has been removed from the group.
        '400':
          description: The UUID was malformed.
        '403':
          description: The logged-in user is not authorized to remove the specified user from the group. (Since group admin functionality is not yet implemented, all users will currently receive this response if trying to remove users other than themselves from a group).
        '404':
          description: |
            The user or group does not exist, or the user was not a member
            of the group.
      description: Remove the user's membership of the group. Note that at present the {user_id} must match that of the current logged-in user.
    put:
      tags:
        - groups
      parameters:
        - description: The Invotra UUID of the group.
          in: path
          name: group_id
          required: true
          schema:
            type: string
            format: uuid
        - description: The Invotra UUID of the user.
          in: path
          name: user_id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The user's membership of this group was updated. The new status of their membership is returned in the response body.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/group-membership-status-schema'
        '400':
          description: The UUID was malformed or the role type was invalid.
        '403':
          description: The logged-in user is not authorized to add the specified user to the group or modify their membership. (Since group admin functionality is not yet implemented, all users will currently receive this response if trying to add users other than themselves to a group or modify other users' group memberships).
        '404':
          description: The user or group does not exist.
      description: >-
        Add a user to a group or update information about a user's existing
        group membership. Note that at present the {user_id} must match that of the current logged-in user.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/group-membership-common-schema'
  /posts:
    get:
      tags:
        - posts
      parameters:
        - description: Filter by external ID.
          in: query
          name: external_id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: >
            List of posts matching the filter criteria, or an empty array if
            none were found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/uuid-list-schema'
      description: Search for posts.
    post:
      tags:
        - posts
      responses:
        '201':
          description: The post was created successfully.
          headers:
            Location:
              description: |
                The URL at which the newly provisioned post may be retrieved.
              schema:
                type: string
        '400':
          description: The post was not saved due to malformed JSON.
        '422':
          description: |
            The post was not saved due to Drupal validation failure or JSON
            schema validation failure.
      description: Create a post.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/post-schema-create'
        required: true
  /posts/list:
    get:
      summary: List of posts.
      tags:
        - posts
      parameters:
        - description: Field to sort by
          in: query
          name: sort
          schema:
            type: string
            enum:
              - timestamp
              - comment_count
              - likes_count
            default: timestamp
        - description: Sort order
          in: query
          name: order
          schema:
            type: string
            enum:
              - asc
              - desc
            default: desc
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
      responses:
        '200':
          description: List of posts.
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    description: Count of results.
                    type: integer
                    example: 50
                  results:
                    description: The results set.
                    type: array
                    items:
                      $ref: '#/components/schemas/post-schema'
        '400':
          description: An invalid query parameter was supplied.
        '403':
          description: The user does not have permission to view a list of posts.
      description: List of posts. An empty array is returned if no posts are found.
  '/posts/{post_id}':
    get:
      tags:
        - posts
      parameters:
        - description: The Invotra UUID of the post.
          in: path
          name: post_id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Returns a single complete post object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/post-schema'
        '400':
          description: The supplied UUID was malformed.
        '404':
          description: The UUID does not correspond to an existing post.
      description: Get information about the post.
    put:
      tags:
        - posts
      parameters:
        - description: The Invotra UUID of the post.
          in: path
          name: post_id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The post information was updated successfully.
        '400':
          description: The supplied UUID or JSON was malformed.
        '404':
          description: The UUID does not correspond to an existing post.
        '422':
          description: |
            The post was not updated due to a Drupal validation failure or a
            JSON schema validation failure.
      description: Update post information.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/post-schema-base'
        required: true
  '/posts/{post_id}/replies':
    get:
      summary: Get the replies to a post.
      tags:
        - posts
      parameters:
        - description: The Invotra UUID of the parent post. Currently this must be a top-level post in its group. This restriction may be relaxed in a future API version.
          in: path
          name: post_id
          required: true
          schema:
            type: string
            format: uuid
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
      responses:
        '200':
          description: |
            List of post replies. If there are no replies, an empty array.
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    description: Count of results.
                    type: integer
                    example: 50
                  results:
                    description: The results set.
                    type: array
                    items:
                      $ref: '#/components/schemas/post-schema'
        '400':
          description: The supplied UUID was malformed.
        '403':
          description: The user does not have access to the parent post, perhaps because the post is in a private or secret group of which the user is not a member.
        '404':
          description: The UUID does not correspond to an existing post, or the post is not a top-level post in its group.
      description: "Get a list of post replies. The replies are returned in thread order, old-to-new. Replies to a post appear after the post but before the next post at the same level, and posts are ordered oldest-to-newest within each level."
  '/posts/categories':
    get:
      tags:
        - posts
      responses:
        '200':
          description: >
            List of posts categories.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/post-category-schema'
      description: List post categories.
  '/posts/{post_id}/likes':
    get:
      tags:
        - posts
      parameters:
        - description: The Invotra UUID of the post.
          in: path
          name: post_id
          required: true
          schema:
            type: string
            format: uuid
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
      responses:
        '200':
          description: |
            List of likes for a post.
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    description: Count of results.
                    type: integer
                    example: 50
                  results:
                    description: The results set.
                    type: array
                    items:
                      $ref: '#/components/schemas/user-schema'
        '400':
          description: The supplied UUID was malformed.
        '404':
          description: The UUID does not correspond to an existing post.
      description: Get a list of users who have liked a post.
  '/posts/{post_id}/like':
    delete:
      tags:
        - posts
      parameters:
        - description: The Invotra UUID of the post.
          in: path
          name: post_id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The user unliked the post.
        '400':
          description: The UUID was malformed.
        '404':
          description: |
            The user, post or like does not exist.
      description: Remove the current user's like from a post.
    get:
      tags:
        - posts
      parameters:
        - description: The Invotra UUID of the post to check like status against.
          in: path
          name: post_id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: |
            Like status returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/common-status-schema'
        '400':
          description: The UUID was malformed.
        '404':
          description: The post does not exist. 
      description: Check if the current user has liked a post.
    put:
      tags:
        - posts
      parameters:
        - description: The Invotra UUID of the post.
          in: path
          name: post_id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The user liked this post.
        '400':
          description: The UUID was malformed.
        '403':
          description: Access was denied because the user tried to like their own post.
        '404':
          description: The user or post does not exist.
      description: Like a post as the current user.
  '/posts/{post_id}/report':
    delete:
      tags:
        - posts
      parameters:
        - description: The Invotra UUID of the post.
          in: path
          name: post_id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The user removed their report flag from the post.
        '400':
          description: The UUID was malformed.
        '404':
          description: |
            The user, post or report flag does not exist.
      description: Remove the current user's report flag from a post.
    get:
      tags:
        - posts
      parameters:
        - description: The Invotra UUID of the post to check report status against.
          in: path
          name: post_id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: |
            Report status returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/common-status-schema'
        '400':
          description: The UUID was malformed.
        '404':
          description: The post does not exist.
      description: Check if the current user has reported a post.
    put:
      tags:
        - posts
      parameters:
        - description: The Invotra UUID of the post.
          in: path
          name: post_id
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/post-report-schema-create'
        required: true
      responses:
        '200':
          description: The user reported this post as inappropriate.
        '400':
          description: The UUID or request body JSON was malformed.
        '403':
          description: Access was denied because the user tried to report their own post.
        '404':
          description: The user or post does not exist.
        '422':
          description: JSON schema validation failure
      description: Report a post as the current user.
  '/manuals':
    get:
      description: Get a listing of all manuals
      tags:
        - manuals
      parameters:
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
      responses:
        '200':
          description: Returns a listing of manuals
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    description: Total count of manuals
                    type: integer
                    example: 248
                  results:
                    description: An array of manuals
                    type: array
                    items:
                      allOf:
                        - $ref: '#/components/schemas/manual-listing-schema'
  '/manuals/{manual_page_id}':
    get:
      description: Get a manual page, including the root manual page
      tags:
        - manuals
      parameters:
        - description: The Invotra UUID of a manual page.
          in: path
          name: manual_page_id
          required: true
          schema:
            type: string
            format: uuid
            example: '01234567-89ab-cdef-1234-56789abcdef0'
      responses:
        '200':
          description: Returns a single complete manual page object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/manual-page-schema'
        '400':
          description: The UUID or request body JSON was malformed.
        '404':
          description: No manual page with that UUID was found.
  /files:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/file-schema-create'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/file-schema-create'
        required: true
      tags:
        - files
      responses:
        '201':
          description: The file was created successfully.
          headers:
            Location:
              description: |
                The URL at which the file entity may be retrieved.
              schema:
                type: string
        '400':
          description: The file was not saved due to malformed JSON.
        '422':
          description: |
            The file was not saved due to Drupal validation failure or JSON
            schema validation failure.
      description: Provision a new file.
  '/files/{file_id}':
    get:
      tags:
        - files
      parameters:
        - description: The Invotra UUID of the file.
          in: path
          name: file_id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Returns a single complete file object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/file-schema'
        '400':
          description: The supplied UUID was malformed.
        '404':
          description: The UUID does not correspond to an existing file.
      description: Get information about the file.
    put:
      tags:
        - files
      parameters:
        - description: The Invotra UUID of the file.
          in: path
          name: file_id
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/file-schema-update'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/file-schema-update'
        required: true
      responses:
        '200':
          description: The file was updated successfully.
        '400':
          description: The supplied UUID or JSON was malformed.
        '404':
          description: The UUID does not correspond to an existing file.
        '422':
          description: |
            The file was not updated due to a Drupal validation failure or a
            JSON schema validation failure.
  /job_roles:
    get:
      tags:
        - job roles
      parameters:
        - description: Filter by external ID.
          in: query
          name: external_id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: >
            List of job roles matching the filter criteria, or an empty array if
            none were found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/uuid-list-schema'
      description: Search for job roles.
    post:
      tags:
        - job roles
      responses:
        '201':
          description: The job role was created successfully.
          headers:
            Location:
              description: >
                The URL at which the newly provisioned job role may be
                retrieved.
              schema:
                type: string
        '400':
          description: The job role was not saved due to malformed JSON.
        '422':
          description: |
            The job role was not saved due to Drupal validation failure or JSON
            schema validation failure.
      description: Provision a new job role.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/job-role-schema-create'
        required: true
  '/job_roles/{job_role_id}':
    get:
      tags:
        - job roles
      parameters:
        - description: The Invotra UUID of the job role.
          in: path
          name: job_role_id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Returns a single complete job role object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/job-role-schema'
        '400':
          description: The supplied UUID was malformed.
        '404':
          description: The UUID does not correspond to an existing job role.
      description: Get information about the job role.
    put:
      tags:
        - job roles
      parameters:
        - description: The Invotra UUID of the job role.
          in: path
          name: job_role_id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The job role information was updated successfully.
        '400':
          description: The supplied UUID or JSON was malformed.
        '404':
          description: The UUID does not correspond to an existing job role.
        '422':
          description: |
            The job role was not updated due to a Drupal validation failure or a
            JSON schema validation failure.
      description: Update job role information.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/job-role-schema'
        required: true
  /locations:
    get:
      tags:
        - locations
      parameters:
        - description: Filter by external ID.
          in: query
          name: external_id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: >
            List of locations matching the filter criteria, or an empty array if
            none were found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/location-uuid-list-schema'
      description: Search for locations.
  /locations/list:
    get:
      tags:
        - locations
      parameters:
        - name: title
          description: Filter by title. Matches on whole words.
          in: query
          schema:
            type: string
        - name: autocomplete
          description: Autocomplete term. Matches on location name, per letter, from the start of the word.
          in: query
          schema:
            type: string
        - name: users_fulltext_search
          description: Filter the list of locations to those that include users matching a search term. This is useful when you have already searched for users and want to refine your search by location (like a faceted search). Like the fulltext_search parameter of /users/search, this matches on whole words.
          in: query
          schema:
            type: string
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
      responses:
        '200':
          description: List of locations matching the filter criteria.
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    description: Count of results.
                    type: integer
                    example: 50
                  results:
                    description: The results set.
                    allOf:
                      - $ref: '#/components/schemas/location-uuid-title-context-list-schema'
      description: 'Search for locations. An empty array is returned if no locations are found.'
  /locations/sites:
    post:
      tags:
        - locations
      responses:
        '201':
          description: The location was created successfully.
          headers:
            Location:
              description: >
                The URL at which the newly provisioned location may be
                retrieved.
              schema:
                type: string
        '400':
          description: The location was not saved due to malformed JSON.
        '422':
          description: |
            The location was not saved due to Drupal validation failure or JSON
            schema validation failure.
      description: Provision a new location.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/location-site-schema-create'
        required: true
  '/locations/sites/{location_id}':
    get:
      tags:
        - locations
      parameters:
        - description: The Invotra UUID of the location.
          in: path
          name: location_id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Returns a single complete location object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/location-site-schema'
        '400':
          description: The supplied UUID was malformed.
        '404':
          description: >-
            The UUID does not correspond to an existing location, or the
            location is not a site.
      description: Get information about the location.
    put:
      tags:
        - locations
      parameters:
        - description: The Invotra UUID of the location.
          in: path
          name: location_id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The location information was updated successfully.
        '400':
          description: The supplied UUID or JSON was malformed.
        '404':
          description: >-
            The UUID does not correspond to an existing location, or the
            location is not a site.
        '422':
          description: |
            The location was not updated due to a Drupal validation failure or a
            JSON schema validation failure.
      description: Update location information.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/location-site-schema'
        required: true
    delete:
      tags:
        - locations
      description: Remove location information
      parameters:
        - description: The invotra UUID of the location.
          in: path
          name: location_id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The location information was removed successfully.
        '400':
          description: The supplied UUID or JSON was malformed.
        '403':
          description: The user does not have permission to remove this location.
        '404':
          description: The UUID does not correspond to an existing location, or the location is not a floor.
  /locations/buildings:
    post:
      tags:
        - locations
      responses:
        '201':
          description: The location was created successfully.
          headers:
            Location:
              description: >
                The URL at which the newly provisioned location may be
                retrieved.
              schema:
                type: string
        '400':
          description: The location was not saved due to malformed JSON.
        '422':
          description: |
            The location was not saved due to Drupal validation failure or JSON
            schema validation failure.
      description: Provision a new location.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/location-building-schema-create'
        required: true
  '/locations/buildings/{location_id}':
    get:
      tags:
        - locations
      parameters:
        - description: The Invotra UUID of the location.
          in: path
          name: location_id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Returns a single complete location object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/location-building-schema'
        '400':
          description: The supplied UUID was malformed.
        '404':
          description: >-
            The UUID does not correspond to an existing location, or the
            location is not a building.
      description: Get information about the location.
    put:
      tags:
        - locations
      parameters:
        - description: The Invotra UUID of the location.
          in: path
          name: location_id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The location information was updated successfully.
        '400':
          description: The supplied UUID or JSON was malformed.
        '404':
          description: >-
            The UUID does not correspond to an existing location, or the
            location is not a building.
        '422':
          description: |
            The location was not updated due to a Drupal validation failure or a
            JSON schema validation failure.
      description: Update location information.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/location-building-schema'
        required: true
    delete:
      tags:
      - locations
      description: Remove location information
      parameters:
        - description: The invotra UUID of the location.
          in: path
          name: location_id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The location information was removed successfully.
        '400':
          description: The supplied UUID or JSON was malformed.
        '403':
          description: The user does not have permission to remove this location.
        '404':
          description: The UUID does not correspond to an existing location, or the location is not a floor.
  /locations/floors:
    post:
      tags:
        - locations
      responses:
        '201':
          description: The location was created successfully.
          headers:
            Location:
              description: >
                The URL at which the newly provisioned location may be
                retrieved.
              schema:
                type: string
        '400':
          description: The location was not saved due to malformed JSON.
        '422':
          description: |
            The location was not saved due to Drupal validation failure or JSON
            schema validation failure.
      description: Provision a new location.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/location-floor-schema-create'
        required: true
  '/locations/floors/{location_id}':
    get:
      tags:
        - locations
      parameters:
        - description: The Invotra UUID of the location.
          in: path
          name: location_id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Returns a single complete location object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/location-floor-schema'
        '400':
          description: The supplied UUID was malformed.
        '404':
          description: >-
            The UUID does not correspond to an existing location, or the
            location is not a floor.
      description: Get information about the location.
    put:
      tags:
        - locations
      parameters:
        - description: The Invotra UUID of the location.
          in: path
          name: location_id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The location information was updated successfully.
        '400':
          description: The supplied UUID or JSON was malformed.
        '404':
          description: >-
            The UUID does not correspond to an existing location, or the
            location is not a floor.
        '422':
          description: |
            The location was not updated due to a Drupal validation failure or a
            JSON schema validation failure.
      description: Update location information.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/location-floor-schema'
        required: true
    delete:
      tags:
      - locations
      description: Remove location information
      parameters:
        - description: The invotra UUID of the location.
          in: path
          name: location_id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The location information was removed successfully.
        '400':
          description: The supplied UUID or JSON was malformed.
        '403':
          description: The user does not have permission to remove this location.
        '404':
          description: The UUID does not correspond to an existing location, or the location is not a floor.
  /locations/spaces:
    post:
      tags:
        - locations
      responses:
        '201':
          description: The location was created successfully.
          headers:
            Location:
              description: >
                The URL at which the newly provisioned location may be
                retrieved.
              schema:
                type: string
        '400':
          description: The location was not saved due to malformed JSON.
        '422':
          description: |
            The location was not saved due to Drupal validation failure or JSON
            schema validation failure.
      description: Provision a new location.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/location-space-schema-create'
        required: true
  '/locations/spaces/{location_id}':
    get:
      tags:
        - locations
      parameters:
        - description: The Invotra UUID of the location.
          in: path
          name: location_id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Returns a single complete location object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/location-space-schema'
        '400':
          description: The supplied UUID was malformed.
        '404':
          description: >-
            The UUID does not correspond to an existing location, or the
            location is not a space.
      description: Get information about the location.
    put:
      tags:
        - locations
      parameters:
        - description: The Invotra UUID of the location.
          in: path
          name: location_id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The location information was updated successfully.
        '400':
          description: The supplied UUID or JSON was malformed.
        '404':
          description: >-
            The UUID does not correspond to an existing location, or the
            location is not a space.
        '422':
          description: |
            The location was not updated due to a Drupal validation failure or a
            JSON schema validation failure.
      description: Update location information.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/location-space-schema'
        required: true
    delete:
      tags:
      - locations
      description: Remove location information
      parameters:
        - description: The invotra UUID of the location.
          in: path
          name: location_id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The location information was removed successfully.
        '400':
          description: The supplied UUID or JSON was malformed.
        '403':
          description: The user does not have permission to remove this location.
        '404':
          description: The UUID does not correspond to an existing location, or the location is not a floor.
  /notifications:
    get:
      tags:
        - notifications
      parameters:
        - description: Filter the notifications for the mobile app. If true, this will return notifications with entity type user, and entity type node and bundle type post only.
          in: query
          name: app_notifications_only
          schema:
            type: boolean
            default: false
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
      responses:
        '200':
          description: List of a users notifications.
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    description: Count of results.
                    type: integer
                    example: 50
                  results:
                    description: The results set.
                    type: array
                    items:
                      $ref: '#/components/schemas/notification-item-schema'
      description: Retrieve notifications for a user.
  '/notifications/{notification_id}':
    put:
      tags:
        - notifications
      parameters:
        - description: The Invotra UUID of the notification.
          in: path
          name: notification_id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The user marked the notification as read.
        '400':
          description: The UUID was malformed.
        '404':
          description: |
            The notification does not exist.
      description: Mark a notification as read.
  /notifications/register/{service_id}/{token}:
    parameters:
      - description: Identifying name of the notification service to be used.
        in: path
        name: service_id
        required: true
        schema:
          type: string
          enum:
            - apns
            - fcm
      - description: A token identifying the user to the notification service.
        in: path
        name: token
        required: true
        schema:
          type: string
    put:
      tags:
        - notifications
      summary: Register a token to identify the user with a push notification service.
      responses:
        '200':
          description: The token was already registered.
        '201':
          description: The token was registered successfully.
        '404':
          description: Unknown service.
    delete:
      tags:
        - notifications
      summary: Deregister a token identifying the user with a push notification service.
      responses:
        '200':
          description: The token was deregistered.
        '404':
          description: The token was not registered or the service was unknown.
  /feeds/status:
    get:
      tags:
        - feeds
      responses:
        '200':
          description: Feed item status for user retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/feed-status-schema'
      description: Check if any new feed items are available for a user.
    put:
      tags:
        - feeds
      responses:
        '200':
          description: Feed item status for user updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/feed-status-schema'
      description: Set the feed as read for a user. You should only set this to 0.
  /feeds:
    get:
      tags:
        - feeds
      parameters:
        - in: query
          name: page
          required: true
          description: Page to pull results from.
          schema:
            type: integer
        - in: query
          description: Filter the feed for the mobile app. Returns only group related messages.
          name: app_feeds_only
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: Returns the feed for a user.
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    description: Count of results.
                    type: integer
                    example: 50
                  results:
                    description: The results set.
                    type: array
                    items:
                      $ref: '#/components/schemas/feed-schema'
      description: Returns the feed for a user.
components:
  securitySchemes:
    APIKeyHeader:
      type: apiKey
      in: header
      name: X-API-Key
    APISessionHeader:
      type: apiKey
      name: 'SESSS{name}'
      in: header
  parameters:
    offsetParam:
      in: query
      name: offset
      required: false
      schema:
        type: integer
        minimum: 0
        default: 0
      description: The number of items to skip before starting to collect the result set.
    limitParam:
      in: query
      name: limit
      required: false
      schema:
        type: integer
        minimum: 1
        maximum: 25
        default: 25
      description: The numbers of items to return.
  schemas:
    branding-schema:
      properties:
        logo:
          description: The logo for the site.
          type: string
          example: 'https://dev.invotra.com/sites/default/files/logo.png'
        mobile_logo:
          description: The mobile logo for the site.
          type: string
          example: 'https://dev.invotra.com/sites/default/files/mobile_logo.png'
        navigation_first_level_nav_link:
          description: This is the colour for the main navigation text. Any CSS colour allowed.
          type: string
          example: '#FFFFFF'
        navigation_menu_background_colour:
          description: This is the colour for the main navigation background. Any CSS colour allowed.
          type: string
          example: '#FFFFFF'
        toolbar_background_colour:
          description: This is the colour for the toolbar background. Any CSS colour allowed.
          type: string
          example: '#FFFFFF'
        toolbar_text_colour:
          description: This is the colour for the toolbar text. Any CSS colour allowed.
          type: string
          example: '#FFFFFF'
        mobile_icons_colour:
          description: This is the colour for the mobile icons on the toolbar. Any CSS colour allowed.
          type: string
          example: '#FFFFFF'
        standard_button_normal_state_colour:
          description: This is the standard button colour. Any CSS colour allowed.
          type: string
          example: '#FFFFFF'
        standard_button_normal_state_border_colour:
          description: This is the standard button border colour. Any CSS colour allowed.
          type: string
          example: '#FFFFFF'
        standard_button_normal_state_text_colour:
          description: This is the standard button text colour. Any CSS colour allowed.
          type: string
          example: '#FFFFF'
        primary_button_normal_state_colour:
          description: This is the primary button colour. Any CSS colour allowed.
          type: string
          example: '#FFFFFF'
        primary_button_normal_state_border_colour:
          description: This is the primary button border colour. Any CSS colour allowed.
          type: string
          example: '#FFFFFF'
        link_colour:
          description: This is the colour for hyperlinks. Any CSS colour allowed.
          type: string
          example: '#FFFFFF'
        vertical_tabs_colour:
          description: This is the colour for vertical tabs. Any CSS colour allowed.
          type: string
          example: '#FFFFFF'
      type: object
    product-options-schema:
      type: object
      additionalProperties:
        type: boolean
      example:
        invotra_notes: true
        invotra_notifications_page: false
    configuration-schema:
      type: object
      properties:
        analytics:
          type: object
          properties:
            matomo:
              type: object
              properties:
                enabled:
                  type: boolean
                url:
                  type: string
                site_id:
                  type: object
                  properties:
                    desktop:
                      type: integer
                      example: 1
                    mobile:
                      type: integer
                      example: 2
    session-schema:
      required:
        - username
        - password
      properties:
        username:
          description: The username that the user logs in with
          type: string
        password:
          description: The password that the user logs in with
          type: string
    feed-schema:
      required:
        - user_uuid
        - user_image
        - display_name
        - entity_uuid
        - entity_title
        - entity_body
        - timestamp
        - link
        - short_text
        - topic
        - category
        - category_colour
        - likes
        - comment_count
        - current_user_liked
      properties:
        user_uuid:
          description: This is the uuid of the user who triggered the feed message
          type: string
          format: uuid
          example: 01234567-89ab-cdef-1234-56789abcdef0
        user_image:
          description: This is image of the user who triggered the feed message
          type: string
          example: >-
            https://dev.invotra.com/system/files/user-picture/large_avatar/1f0c6cb5-a3c3-4197-bebc-b3e44462dc24/profile.png
        username:
          description: The username of the user who triggered the feed message
          type: string
          example: Dorothy.Whitehead@akagera.com
        display_name:
          description: The display name of the user who triggered the feed message
          type: string
          example: Dorothy Whitehead
        teams:
          description: The user's teams. An array of team names and UUIDs.
          allOf:
            - $ref: '#/components/schemas/title-uuid-list-common-schema'
        locations:
          description: The user's locations. An array of location names and UUIDs.
          allOf:
            - $ref: '#/components/schemas/title-uuid-list-common-schema'
        job_roles:
          description: The user's job roles. An array of job role names and UUIDs.
          allOf:
            - $ref: '#/components/schemas/title-uuid-list-common-schema'
        entity_uuid:
          description: The UUID of the entity that the feed message is about
          type: string
          format: uuid
          example: 01234567-89ab-cdef-1234-56789abcdef0
        entity_title:
          description: The title of the entity that the feed message is about
          type: string
          example: A post about annual leave
        entity_body:
          description: The main body text of the entity
          type: string
          example: I'm taking annual leave next Thursday. Cover to be announced shortly
        entity_type:
          description: The type of entity that the feed message is about
          type: string
          enum:
            - node
            - comment
            - user
        entity_image:
          description: The featured image for this post
          type: object
          allOf:
           - $ref: '#/components/schemas/file-schema'  
        timestamp:
          description: This is the timestamp (in seconds) of when the feed message was created
          type: integer
          example: 1510941596
        link:
          description: This is link to the entity that the feed message is about
          type: string
          example: >-
            https://dev.invotra.com/uuid/node/1f0c6cb5-a3c3-4197-bebc-b3e44462dc26
        short_text:
          description: >-
            Contextual text for the feed message, with placeholders @user for the user's name and optionally @group for the group name.
          type: string
          example: "@user created the following within @group"
        topic:
          description: 'This is topic of the feed, used for filtering'
          type: string
          enum:
            - people
            - groups
            - content
        category:
          description: The category of a post
          type: string
          enum:
            - Comment
            - Note
            - Done
            - News / Event
            - Suggestion
            - Question
            - To Do
            - Problem / Risk
            - Agreed
            - Decision
        category_colour:
          description: Colour for the category. Any CSS colour allowed.
          type: string
          example: '#FFFFFF'
        likes:
          description: Count of the likes for this feed message
          type: integer
          example: 5
        comment_count:
          description: Count of the comments for this feed message
          type: integer
          example: 5
        current_user_liked:
          description: A flag to determine if the current user has liked this post
          type: boolean
          example: true
        group_name:
          description: This is the name of the group
          type: string
          example: Operations
        group_uuid:
          description: This is the uuid of the group
          type: string
          format: uuid
          example: 01234567-89ab-cdef-1234-56789abcdef0
      type: object
    feed-status-schema:
      required:
        - feed
      properties:
        feed:
          description: This is the feed flag
          type: integer
          enum:
            - 0
            - 1
    notification-item-schema:
      required:
        - uuid
      properties:
        uuid:
          description: This is the uuid of the notification
          type: string
          format: uuid
          example: 01234567-89ab-cdef-1234-56789abcdef0
        timestamp:
          description: This is the timestamp (in seconds) of when the notification was created
          type: integer
          example: 1510941596
        image:
          description: This is image of the user who created the notification
          type: string
          example: 'https://dev.invotra.com/files/styles/large_avatar/public/user.png'
        link:
          description: This is link to the notification
          type: string
          example: 'https://dev.invotra.com/post/ill-be-annual-leave'
        message:
          description: This is text description of the notification
          type: string
          example: Bob Matthews mentioned you in a post.
        type:
          description: This is type of the notification
          type: string
          enum:
            - invotra.user.mention
            - invotra.user.follow
            - invotra.comment.reply
            - invotra.post.like
            - invotra.post.comment
            - invotra.comment.like
        status:
          description: Whether the notification has been read or not
          type: boolean
          example: true
        target_uuid:
          description: This is the uuid of the entity that the notification links to
          type: string
          format: uuid
          example: 01234567-89ab-cdef-1234-56789abcdef0
        target_type:
          description: This is the type of the entity that the notification links to
          type: string
          enum:
           - node
           - user
           - comment
        target_subtype:
          description: This is the subtype (or "bundle" in Drupal parlance) of the entity that the notification links to
          type: string
          example: 'group_status'
        title:
          description: The user who generated the notification
          type: string
          example: Bob Matthews
        body:
          description: The subject of the notification
          type: string
          example: mentioned you in a post
      type: object
    team-schema:
      properties:
        uuid:
          description: The UUID of the team
          type: string
          format: uuid
          example: 01234567-89ab-cdef-1234-56789abcdef0
          readOnly: true
        title:
          description: This is the name of the team
          type: string
          example: Operations
        description:
          description: 'This is a description of the team, optional.'
          type: string
          example: The operations team
        external_id:
          description: This is used to store the team's external reference id
          type: string
          example: ABC123
        parent_uuid:
          description: 'This is the Invotra UUID of the parent team, optional.'
          type: string
          format: uuid
          example: 01234567-89ab-cdef-1234-56789abcdef0
      type: object
    team-schema-create:
      allOf:
        - $ref: '#/components/schemas/team-schema'
      required:
        - title
      type: object
    user-schema:
      properties:
        uuid:
          description: The UUID of the user
          type: string
          format: uuid
          example: 01234567-89ab-cdef-1234-56789abcdef0
          readOnly: true
        username:
          description: The user's username
          type: string
          example: Dorothy Whitehead
        user_avatar:
          description: The user's image
          type: string
          example: "https://dev.invotra.com/sites/default/files/styles/small_avatar/public/Dorothy%20Whitehead.jpg?itok=6p19"
        email:
          description: Users email address
          format: email
          type: string
          example: dorothy.whitehead@akagera.com
        external_id:
          description: The user's external reference ID
          type: string
          example: ABC123
        roles:
          items:
            default: Organisational user
            description: This is the default Invotra user role
            enum:
              - Organisational user
              - Webmaster
            type: string
          type: array
          example:
            - Organisational user
            - Webmaster
          uniqueItems: true
        status:
          default: Active
          description: Flag to indicate whether account is active or blocked
          enum:
            - Active
            - Blocked
          type: string
        phone:
          description: The user's telephone number.
          type: string
          example: +1-23-456-789
        mobile:
          description: The user's mobile number.
          type: string
          example: +1-23-456-789
        manager_uuid:
          description: This is the Invotra UUID of the user's manager.
          type: string
          format: uuid
          example: 01234567-89ab-cdef-1234-56789abcdef0
        firstname:
          description: The user's first name
          type: string
          example: Dorothy
        surname:
          description: The user's surname
          type: string
          example: Whitehead
        title:
          default: ''
          description: The user's title
          enum:
            - ''
            - Dr
            - Mr
            - Miss
            - Mrs
            - Ms
          type: string
          example: Mr
        team:
          description: This is the Invotra UUID of the user's team.
          type: string
          format: uuid
          example: 01234567-89ab-cdef-1234-56789abcdef0
          deprecated: true
        location:
          description: This is the Invotra UUID of the user's location.
          type: string
          format: uuid
          example: 01234567-89ab-cdef-1234-56789abcdef0
          deprecated: true
        job_role:
          description: This is the Invotra UUID of the user's job role.
          type: string
          format: uuid
          example: 01234567-89ab-cdef-1234-56789abcdef0
          deprecated: true
        teams:
          description: The user's teams. An array of team names and UUIDs.
          allOf:
            - $ref: '#/components/schemas/title-uuid-list-common-schema'
        locations:
          description: The user's locations. An array of location names and UUIDs.
          allOf:
            - $ref: '#/components/schemas/title-uuid-list-common-schema'
        job_roles:
          description: The user's job roles. An array of job role names and UUIDs.
          allOf:
            - $ref: '#/components/schemas/title-uuid-list-common-schema'
        user_uuid:
          description: The UUID of the user
          type: string
          format: uuid
          example: 01234567-89ab-cdef-1234-56789abcdef0
          deprecated: true
          readOnly: true
      type: object
    user-schema-update:
      allOf:
        - $ref: '#/components/schemas/user-schema'
        - properties:
            job_roles:
              allOf:
                - $ref: '#/components/schemas/title-or-uuid-writable-list-schema'
    user-schema-create:
      allOf:
        - $ref: '#/components/schemas/user-schema-update'
        - properties:
            password:
              description: The password that the user logs in with
              type: string
              writeOnly: true
        - required:
            - email
            - username
    user-metrics-accessed-schema:
      type: object
      properties:
        access_threshold_users:
          description: 'users who accessed the site on 4 or more days within a month'
          type: integer
          example: 500
    user-search-schema:
      allOf:
        - $ref: '#/components/schemas/user-schema'
        - type: object
          properties:
            user_uuid:
              description: This is the uuid of the user
              type: string
              example: 1f0c6cb5-a3c3-4197-bebc-b3e44462dc23
    common-status-schema:
      properties:
        status:
          description: A boolean flag
          type: boolean
          example: true
    group-membership-status-schema:
      type: object
      properties:
        status:
          description: |
            'active', if the user is a member, 'inactive' if not, or 'pending' if they have requested but not yet been granted membership.
          type: string
          enum:
            - active
            - inactive
            - pending
    group-schema:
      required:
        - title
        - description
        - group_category_uuid
        - privacy_setting
        - author_uuid
      properties:
        title:
          description: This is the name of the group
          type: string
          example: Security awareness
        description:
          description: This is a description of the group.
          type: string
          example: A group to discuss security awareness.
        group_category:
          description: The category for the group.
          type: string
          example: Security
          readOnly: true
        group_category_uuid:
          description: The uuid of the category
          type: string
          format: uuid
          example: 01234567-89ab-cdef-1234-56789abcdef0
        privacy_setting:
          description: This is the privacy setting for the group.
          type: string
          enum:
            - Public
            - Private
            - Secret
        members_count:
          description: A count of members in group
          type: integer
          example: 150
          readOnly: true
        likes:
          description: Total likes for all content in the group.
          type: integer
          example: 200
          readOnly: true
        author_uuid:
          description: The uuid of the author
          type: string
          format: uuid
          example: 01234567-89ab-cdef-1234-56789abcdef0
      type: object
    group-search-schema:
      allOf:
        - $ref: '#/components/schemas/group-schema'
        - type: object
          properties:
            group_uuid:
              description: The UUID of the group.
              type: string
              format: uuid
              example: 01234567-89ab-cdef-1234-56789abcdef0
    group-membership-common-schema:
      type: object
      properties:
        type:
          description: The membership type.
          type: string
          enum:
            - admin
            - member
      required:
        - type
    group-metrics-schema:
      type: object
      properties:
        likes:
          description: Total likes of content and replies across all groups.
          type: integer
          example: 500
        members_count:
          description: Total number of users that are a member of at least one group.
          type: integer
          example: 150
    post-schema:
      allOf:
      - $ref: '#/components/schemas/post-schema-base'
      - type: object
        properties:
          uuid:
            type: string
            format: uuid
            description: This is the Invotra UUID of the post.
            example: 01234567-89ab-cdef-1234-56789abcdef0
          parent_uuid:
            type: string
            format: uuid
            description: This is the Invotra UUID of the parent of the post.
            example: 01234567-89ab-cdef-1234-56789abcdef0
          thread_uuid:
            type: string
            format: uuid
            description: This is the Invotra UUID of the root post of this thread (same as uuid if this is the root post).
            example: 01234567-89ab-cdef-1234-56789abcdef0
          group_uuid:
            description: This is the Invotra UUID of the group that the post belongs to.
            example: 01234567-89ab-cdef-1234-56789abcdef0
            type: string
            format: uuid
          description:
            description: The HTML-rendered main body of the post. Do not use this value for editing - use the value in the source field instead.
            type: string
            example: 'Hey <a href="/users/username" data-mentioned-uuid="1f1397e1-c263-4477-84a0-ca6c1c1560fe">@John Smith</a>, check out the latest <a href="/apps/groups/chat?hashtag=security">#security</a> news in this group!'
          pin:
            description: Whether or not this post is pinned.
            type: boolean
          author_uuid:
            description: The uuid of the author
            type: string
            format: uuid
            example: 01234567-89ab-cdef-1234-56789abcdef0
          display_name:
            description: The display name of the author
            type: string
            example: Dorothy Whitehead
          likes_count:
            description: Count of likes on the post
            type: integer
            example: 5
          comment_count:
            description: Count of comments on the post
            type: integer
            example: 5
          attachments_count:
            description: Count of attachments on the post
            type: integer
            example: 5
          timestamp:
            description: This is the timestamp (in seconds) of when the post was created
            type: integer
            example: 1510941596
          depth:
            description: The depth of the post in the hierarchy of replies. Top-level posts are 0, their replies are 1, replies to replies are 2 etc.
            type: integer
            example: 1
          current_user_liked:
            description: A flag to determine if the current user has liked this post
            type: boolean
            example: true
    post-schema-create:
      allOf:
      - $ref: '#/components/schemas/post-schema-base'
      - type: object
        properties:
          parent_uuid:
            type: string
            format: uuid
            description: This is the Invotra UUID of the parent of the post.
            example: 01234567-89ab-cdef-1234-56789abcdef0
          author_uuid:
            description: The uuid of the author
            type: string
            format: uuid
            example: 01234567-89ab-cdef-1234-56789abcdef0
          group_uuid:
            description: This is the Invotra UUID of the group that the post belongs to.
            example: 01234567-89ab-cdef-1234-56789abcdef0
            type: string
            format: uuid
      required:
        - description
        - group_uuid
        - author_uuid
    post-schema-base:
      properties:
        source:
          description: The unrendered main body for the post. This value should be used only for editing and is *NOT* safe to display as-is in any HTML context.
          type: string
          example: 'Hey [@username], check out the latest #security news in this group!'
        external_id:
          description: This is used to store the post's external reference id
          type: string
          example: ABC123
        category:
          description: The category of a post
          type: string
          enum: 
            - Comment
            - Note
            - Done
            - News / Event
            - Suggestion
            - Question
            - To Do
            - Problem / Risk
            - Agreed
            - Decision
        featured_image:
          description: The featured image for this post
          type: object
          allOf:
           - $ref: '#/components/schemas/file-schema'
        attachments:
          description: A list of attachments for the post
          type: array
          items: 
            allOf:
              - $ref: '#/components/schemas/file-schema'
      type: object
    post-report-schema-create:
      properties:
        reason:
          description: Reason for flagging post as inappropriate
          type: string
          example: I find this offensive
      required:
        - reason
    post-category-schema:
      properties:
        name: 
          description: 'Category name'
          type: string
          example: Note
        uuid:
          description: 'This is the Invotra UUID of the category.'
          example: 01234567-89ab-cdef-1234-56789abcdef0
          type: string
          format: uuid
        category_colour:
          description: Colour of the category. Any CSS colour allowed.
          type: string
          example: '#FFFFFF'
      type: object
    manual-listing-schema:
      type: object
      properties:
        uuid:
          description: Invotra UUID of Manual (root page)
          type: string
          format: uuid
          example: '01234567-89ab-cdef-1234-56789abcdef0'
        title:
          description: Manual title
          type: string
          example: Employee Handbook
        image:
          description: Manual Cover Image
          type: object
          allOf:
            - $ref: '#/components/schemas/file-schema'
    manual-page-schema:
      type: object
      properties:
        uuid:
          description: Invotra UUID of the manual page.
          type: string
          format: uuid
          example: '01234567-89ab-cdef-1234-56789abcdef0'
        author_uuid:
          description: The uuid of the author
          type: string
          format: uuid
          example: 01234567-89ab-cdef-1234-56789abcdef0
        title:
          description: Title of the manual page
          type: string
          example: Code of Conduct
        summary:
          description: Summary text of the manual page
          type: string
          example: How a company's employees should act
        body:
          description: The main body text contents of the manual page
          type: string
          example: The full body describing Code of Conduct.
        site_section:
          description: Invotra UUID of site section of the manual page
          type: string
          format: uuid
          example: '01234567-89ab-cdef-1234-56789abcdef0'
        reference:
          description: Reference for the manual page
          type: string
          example: 'CCM-1'
        timestamp_created:
            description: This is the timestamp (in seconds) of when the manual page was created
            type: integer
            example: 1510941596
        timestamp_updated:
            description: This is the timestamp (in seconds) of when the manual page was last updated
            type: integer
            example: 1510941696
        attachments:
          description: List of attachments on manual page
          type: array
          items:
            allOf:
              - $ref: '#/components/schemas/file-schema'
        parent_page_uuid:
          description: Invotra UUID of the parent manual page (empty at root).
          type: string
          format: uuid
          example: '01234567-89ab-cdef-1234-56789abcdef0'
        child_pages_count:
          description: Total count of child pages across all sections on this level of the manual hierarchy
          type: integer
          example: 50
        child_sections:
          description: The manual sections of child manual pages
          type: array
          items:
            type: object
            properties:
              section_name:
                description: Manual page section name
                type: string
                example: Appendix
              child_pages:
                description: Manual child pages in section
                type: array
                items:
                  type: object
                  properties:
                    uuid:
                      description: Invotra UUID of the child manual page
                      type: string
                      format: uuid
                      example: '01234567-89ab-cdef-1234-56789abcdef0'
                    title:
                      description: Title of child manual page
                      type: string
                      example: Appendix A - Acronyms
    file-schema:
      type: object
      properties:
        uuid:
          description: The UUID of the entity.
          type: string
          format: uuid
          example: 01234567-89ab-cdef-1234-56789abcdef0
        filename:
          description: This is the filename
          type: string
          example: wallpaper.jpeg
        file_download:
          description: The location of the file
          type: string
          example: 'https://dev.invotra.com/file/1234/download'
        type:
          description: The type of file
          type: string
          enum:
            - image
            - document
            - audio
            - video
        filemime:
          description: The MIME type for the file
          type: string
          example: image/jpeg
        alt_text:
          description: Alt text for an image. Returned if and only if the type is an image.
          type: string
        image_height:
          description: The height of the image in pixels. Returned if and only if the type is an image.
          type: integer
          example: 200
        image_width:
          description: The width of the image in pixels. Returned if and only if the type is an image.
          type: integer
          example: 200
    file-schema-update:
      properties:
        filename:
          description: This is the filename. If using multipart/form-data this field may be omitted in favour of the 'filename' directive of the subpart Content-Disposition header.
          type: string
          example: wallpaper.jpeg
        type:
          description: The type of file.
          type: string
          enum:
            - image
            - document
            - audio
            - video
        filemime:
          description: The MIME type for the file. If using multipart/form-data this field may be omitted in favour of the subpart Content-Type header.
          type: string
          example: image/jpeg
        file:
          description: Base64 encoded version of the file.
          type: string
          format: base64
        alt_text:
          description: Alt text for an image.
          type: string
      type: object
    file-schema-create:
      allOf:
        - $ref: '#/components/schemas/file-schema-update'
        - required:
            - file
            - filename
            - alt_text
            - type
    job-role-schema:
      properties:
        title:
          description: This is the name of the job role
          type: string
          example: Director
        description:
          description: 'This is a description of the job role, optional.'
          type: string
          example: This is a very important job
        external_id:
          description: This is used to store the job role's external reference id
          type: string
          example: ABC123
        parent_uuid:
          description: 'This is the Invotra UUID of the parent job role, optional.'
          example: 01234567-89ab-cdef-1234-56789abcdef0
          type: string
          format: uuid
      type: object
    job-role-schema-create:
      allOf:
        - $ref: '#/components/schemas/job-role-schema'
      required:
        - title
    location-common-schema:
      type: object
      properties:
        title:
          description: This is the name of the location.
          type: string
          example: Dublin
        description:
          description: This is a description of the location.
          type: string
          example: A beautiful city in Ireland
        external_id:
          description: This is used to store the location's external reference id.
          type: string
          example: ABC123
    location-site-schema:
      allOf:
        - $ref: '#/components/schemas/location-common-schema'
        - type: object
          properties:
            address1:
              description: The first line of the location's postal address.
              type: string
              example: 1 Main Street
            address2:
              description: The second line of the location's postal address.
              type: string
              example: Littleton Village
            address3:
              description: The third line of the location's postal address.
              type: string
              example: Northern District
            town:
              description: The town where the location is.
              type: string
              example: Metropolis
            postcode:
              description: 'The location''s postal code or zip code, if any.'
              type: string
              example: ABC 123
            team:
              description: A team associated with the location.
              type: string
              format: uuid
              example: 01234567-89ab-cdef-1234-56789abcdef0
            phone:
              description: The location's telephone number.
              type: string
              example: +1-23-456-789
            email:
              description: The location's email address.
              type: string
              format: email
    location-site-schema-create:
      allOf:
        - $ref: '#/components/schemas/location-site-schema'
      required:
        - title
    location-building-schema:
      allOf:
        - $ref: '#/components/schemas/location-site-schema'
        - type: object
          properties:
            parent_uuid:
              description: >
                The Invotra UUID of the parent location. This location must be a
                site.
              type: string
              format: uuid
              example: 01234567-89ab-cdef-1234-56789abcdef0
    location-building-schema-create:
      allOf:
        - $ref: '#/components/schemas/location-building-schema'
      required:
        - title
    location-floor-schema:
      allOf:
        - $ref: '#/components/schemas/location-common-schema'
        - type: object
          properties:
            parent_uuid:
              description: >
                The Invotra UUID of the parent location. This location must be a
                building.
              type: string
              format: uuid
              example: 01234567-89ab-cdef-1234-56789abcdef0
    location-floor-schema-create:
      allOf:
        - $ref: '#/components/schemas/location-floor-schema'
      required:
        - title
    location-space-schema:
      allOf:
        - $ref: '#/components/schemas/location-common-schema'
        - type: object
          properties:
            parent_uuid:
              description: >
                The Invotra UUID of the parent location. This location must be a
                floor.
              type: string
              format: uuid
              example: 01234567-89ab-cdef-1234-56789abcdef0
    location-space-schema-create:
      allOf:
        - $ref: '#/components/schemas/location-space-schema'
      required:
        - title
    uuid-list-schema:
      items:
        description: An array of UUIDs.
        type: string
        format: uuid
        example: 01234567-89ab-cdef-12F34-56789abcdef0
      type: array
    uuid-label-context-list-schema:
      items:
        type: object
        properties:
          uuid:
            description: The entity UUID.
            type: string
            format: uuid
            example: 01234567-89ab-cdef-12F34-56789abcdef0
          label:
            description: The entity label.
            type: string
            example: Security
          context:
            description: Parent items of the entity that was returned. Ordered from the immediate parent, 3 levels up, towards the root.
            type: array
            items:
              type: object
              properties:
                label:
                  description: The entity label.
                  type: string
                uuid:
                  description: The entity UUID.
                  type: string
                  format: uuid
                  example: 01234567-89ab-cdef-12F34-56789abcdef0
      type: array
    location-uuid-title-context-list-schema:
      items:
        type: object
        properties:
          uuid:
            description: The entity UUID.
            type: string
            format: uuid
            example: 01234567-89ab-cdef-12F34-56789abcdef0
          title:
            description: The entity title.
            type: string
            example: Chertsey House
          type:
            description: The location type.
            type: string
            enum:
              - site
              - building
              - floor
              - space
          description:
            description: 'The description of the location.'
            type: string
            example: Woking
          parent_uuid:
            description: The parent UUID.
            type: string
            format: uuid
            example: 01234567-89ab-cdef-12F34-56789abcdef0
          context:
            description: Parent items of the entity that was returned. Ordered from the immediate parent, 3 levels up, towards the root.
            type: array
            items:
              type: object
              properties:
                uuid:
                  description: The entity UUID.
                  type: string
                  format: uuid
                  example: 01234567-89ab-cdef-12F34-56789abcdef0
                title:
                  description: The entity title.
                  type: string
                type:
                  description: The location type.
                  type: string
                  enum:
                    - site
                    - building
                    - floor
                    - space
                description:
                  description: 'The description of the location.'
                  type: string
                  example: Woking
                parent_uuid:
                  description: The parent UUID.
                  type: string
                  format: uuid
                  example: 01234567-89ab-cdef-12F34-56789abcdef0
      type: array
    location-uuid-schema:
      type: object
      properties:
        uuid:
          description: The UUID of the location.
          type: string
          format: uuid
          example: 01234567-89ab-cdef-1234-56789abcdef0
        type:
          description: The location type.
          type: string
          enum:
            - site
            - building
            - floor
            - space
      required:
        - uuid
        - type
    location-uuid-list-schema:
      type: array
      items:
        $ref: '#/components/schemas/location-uuid-schema'
    team-membership-common-schema:
      type: object
      properties:
        type:
          description: The membership type.
          type: string
          enum:
            - admin
            - member
      required:
        - type
    user-team-membership-schema:
      allOf:
        - $ref: '#/components/schemas/team-membership-common-schema'
        - type: object
          properties:
            uuid:
              description: The UUID of the team.
              type: string
              format: uuid
              example: 01234567-89ab-cdef-1234-56789abcdef0
          required:
            - uuid
    team-team-membership-schema:
      allOf:
        - $ref: '#/components/schemas/team-membership-common-schema'
        - type: object
          properties:
            uuid:
              description: The UUID of the user.
              type: string
              format: uuid
              example: 01234567-89ab-cdef-1234-56789abcdef0
          required:
            - uuid
    title-uuid-list-common-schema:
      type: array
      items:
        type: object
        properties:
          name:
            description: The title of the entity.
            type: string
            readOnly: true
          uuid:
            description: The UUID of the entity.
            type: string
            format: uuid
            example: 01234567-89ab-cdef-1234-56789abcdef0
    title-or-uuid-writable-list-schema:
      type: array
      items:
        anyOf:
          - type: object
            properties:
              name:
                description: The title of the entity. Case sensitive.
                type: string
                example: Entity Title
          - type: object
            properties:
              uuid:
                description: The UUID of the entity.
                type: string
                format: uuid
                example: 01234567-89ab-cdef-1234-56789abcdef0
    entity-lookup-schema:
      type: object
      properties:
        type:
          type: string
          description: The entity type.
          example: node
        subtype:
          type: string
          description: The entity subtype (or "bundle" in Drupal parlance).
          example: group
        uuid:
          description: The UUID of the entity.
          type: string
          format: uuid
          example: 01234567-89ab-cdef-1234-56789abcdef0
      required:
        - type
        - subtype
        - uuid
    auth-token-schema:
      type: object
      properties:
        token:
          type: string
          description: A temporary single-use token previously received from the website. Clients should treat this as an opaque value.
      required:
        - token
    csrf-token-schema:
      type: object
      properties:
        token:
          type: string
          description: A token to protect against cross-site request forgery. Clients should treat this as an opaque value.
      required:
        - token
