// tslint:disable
/**
 * InvotraAPI
 * In general most fields are optional for update (PUT) requests; you can leave them blank (pass an empty string / array / whatever as appropriate) to clear them, or omit the key to leave them unchanged.
 *
 * The version of the OpenAPI document: 0.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import * as globalImportUrl from 'url';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, BaseAPI, RequiredError } from '../base';
/**
 * PostsApi - axios parameter creator
 * @export
 */
export var PostsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * List post categories.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postsCategoriesGet: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/posts/categories";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }
            // authentication SessionCookieHeader required
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Search for posts.
         * @param {string} external_id Filter by external ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postsGet: function (external_id, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'external_id' is not null or undefined
            if (external_id === null || external_id === undefined) {
                throw new RequiredError('external_id', 'Required parameter external_id was null or undefined when calling postsGet.');
            }
            var localVarPath = "/posts";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }
            // authentication SessionCookieHeader required
            if (external_id !== undefined) {
                localVarQueryParameter['external_id'] = external_id;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List of posts. An empty array is returned if no posts are found.
         * @summary List of posts.
         * @param {'timestamp' | 'comment_count' | 'likes_count'} [sort] Field to sort by
         * @param {'asc' | 'desc'} [order] Sort order
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {number} [limit] The numbers of items to return. If the value specified is more than the maximum, the result count will be limited to the maximum.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postsListGet: function (sort, order, offset, limit, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/posts/list";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }
            // authentication SessionCookieHeader required
            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }
            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }
            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a post.
         * @param {PostSchemaCreate} PostSchemaCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postsPost: function (PostSchemaCreate, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'PostSchemaCreate' is not null or undefined
            if (PostSchemaCreate === null || PostSchemaCreate === undefined) {
                throw new RequiredError('PostSchemaCreate', 'Required parameter PostSchemaCreate was null or undefined when calling postsPost.');
            }
            var localVarPath = "/posts";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }
            // authentication SessionCookieHeader required
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            var needsSerialization = (typeof PostSchemaCreate !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(PostSchemaCreate !== undefined ? PostSchemaCreate : {}) : (PostSchemaCreate || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get information about the post.
         * @param {string} post_id The Invotra UUID of the post.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postsPostIdGet: function (post_id, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'post_id' is not null or undefined
            if (post_id === null || post_id === undefined) {
                throw new RequiredError('post_id', 'Required parameter post_id was null or undefined when calling postsPostIdGet.');
            }
            var localVarPath = "/posts/{post_id}"
                .replace("{" + "post_id" + "}", encodeURIComponent(String(post_id)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }
            // authentication SessionCookieHeader required
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove the current user\'s like from a post.
         * @param {string} post_id The Invotra UUID of the post.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postsPostIdLikeDelete: function (post_id, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'post_id' is not null or undefined
            if (post_id === null || post_id === undefined) {
                throw new RequiredError('post_id', 'Required parameter post_id was null or undefined when calling postsPostIdLikeDelete.');
            }
            var localVarPath = "/posts/{post_id}/like"
                .replace("{" + "post_id" + "}", encodeURIComponent(String(post_id)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }
            // authentication SessionCookieHeader required
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Check if the current user has liked a post.
         * @param {string} post_id The Invotra UUID of the post.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postsPostIdLikeGet: function (post_id, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'post_id' is not null or undefined
            if (post_id === null || post_id === undefined) {
                throw new RequiredError('post_id', 'Required parameter post_id was null or undefined when calling postsPostIdLikeGet.');
            }
            var localVarPath = "/posts/{post_id}/like"
                .replace("{" + "post_id" + "}", encodeURIComponent(String(post_id)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }
            // authentication SessionCookieHeader required
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Like a post as the current user.
         * @param {string} post_id The Invotra UUID of the post.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postsPostIdLikePut: function (post_id, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'post_id' is not null or undefined
            if (post_id === null || post_id === undefined) {
                throw new RequiredError('post_id', 'Required parameter post_id was null or undefined when calling postsPostIdLikePut.');
            }
            var localVarPath = "/posts/{post_id}/like"
                .replace("{" + "post_id" + "}", encodeURIComponent(String(post_id)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }
            // authentication SessionCookieHeader required
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of users who have liked a post.
         * @param {string} post_id The Invotra UUID of the post.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {number} [limit] The numbers of items to return. If the value specified is more than the maximum, the result count will be limited to the maximum.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postsPostIdLikesGet: function (post_id, offset, limit, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'post_id' is not null or undefined
            if (post_id === null || post_id === undefined) {
                throw new RequiredError('post_id', 'Required parameter post_id was null or undefined when calling postsPostIdLikesGet.');
            }
            var localVarPath = "/posts/{post_id}/likes"
                .replace("{" + "post_id" + "}", encodeURIComponent(String(post_id)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }
            // authentication SessionCookieHeader required
            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update post information.
         * @param {string} post_id The Invotra UUID of the post.
         * @param {PostSchemaBase} PostSchemaBase
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postsPostIdPut: function (post_id, PostSchemaBase, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'post_id' is not null or undefined
            if (post_id === null || post_id === undefined) {
                throw new RequiredError('post_id', 'Required parameter post_id was null or undefined when calling postsPostIdPut.');
            }
            // verify required parameter 'PostSchemaBase' is not null or undefined
            if (PostSchemaBase === null || PostSchemaBase === undefined) {
                throw new RequiredError('PostSchemaBase', 'Required parameter PostSchemaBase was null or undefined when calling postsPostIdPut.');
            }
            var localVarPath = "/posts/{post_id}"
                .replace("{" + "post_id" + "}", encodeURIComponent(String(post_id)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }
            // authentication SessionCookieHeader required
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            var needsSerialization = (typeof PostSchemaBase !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(PostSchemaBase !== undefined ? PostSchemaBase : {}) : (PostSchemaBase || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of post replies. The replies are returned in thread order, old-to-new. Replies to a post appear after the post but before the next post at the same level, and posts are ordered oldest-to-newest within each level.
         * @summary Get the replies to a post.
         * @param {string} post_id The Invotra UUID of the parent post. Currently this must be a top-level post in its group. This restriction may be relaxed in a future API version.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {number} [limit] The numbers of items to return. If the value specified is more than the maximum, the result count will be limited to the maximum.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postsPostIdRepliesGet: function (post_id, offset, limit, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'post_id' is not null or undefined
            if (post_id === null || post_id === undefined) {
                throw new RequiredError('post_id', 'Required parameter post_id was null or undefined when calling postsPostIdRepliesGet.');
            }
            var localVarPath = "/posts/{post_id}/replies"
                .replace("{" + "post_id" + "}", encodeURIComponent(String(post_id)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }
            // authentication SessionCookieHeader required
            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove the current user\'s report flag from a post.
         * @param {string} post_id The Invotra UUID of the post.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postsPostIdReportDelete: function (post_id, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'post_id' is not null or undefined
            if (post_id === null || post_id === undefined) {
                throw new RequiredError('post_id', 'Required parameter post_id was null or undefined when calling postsPostIdReportDelete.');
            }
            var localVarPath = "/posts/{post_id}/report"
                .replace("{" + "post_id" + "}", encodeURIComponent(String(post_id)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }
            // authentication SessionCookieHeader required
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Check if the current user has reported a post.
         * @param {string} post_id The Invotra UUID of the post.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postsPostIdReportGet: function (post_id, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'post_id' is not null or undefined
            if (post_id === null || post_id === undefined) {
                throw new RequiredError('post_id', 'Required parameter post_id was null or undefined when calling postsPostIdReportGet.');
            }
            var localVarPath = "/posts/{post_id}/report"
                .replace("{" + "post_id" + "}", encodeURIComponent(String(post_id)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }
            // authentication SessionCookieHeader required
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Report a post as the current user.
         * @param {string} post_id The Invotra UUID of the post.
         * @param {PostReportSchemaCreate} PostReportSchemaCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postsPostIdReportPut: function (post_id, PostReportSchemaCreate, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'post_id' is not null or undefined
            if (post_id === null || post_id === undefined) {
                throw new RequiredError('post_id', 'Required parameter post_id was null or undefined when calling postsPostIdReportPut.');
            }
            // verify required parameter 'PostReportSchemaCreate' is not null or undefined
            if (PostReportSchemaCreate === null || PostReportSchemaCreate === undefined) {
                throw new RequiredError('PostReportSchemaCreate', 'Required parameter PostReportSchemaCreate was null or undefined when calling postsPostIdReportPut.');
            }
            var localVarPath = "/posts/{post_id}/report"
                .replace("{" + "post_id" + "}", encodeURIComponent(String(post_id)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }
            // authentication SessionCookieHeader required
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            var needsSerialization = (typeof PostReportSchemaCreate !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(PostReportSchemaCreate !== undefined ? PostReportSchemaCreate : {}) : (PostReportSchemaCreate || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * PostsApi - functional programming interface
 * @export
 */
export var PostsApiFp = function (configuration) {
    return {
        /**
         * List post categories.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postsCategoriesGet: function (options) {
            var localVarAxiosArgs = PostsApiAxiosParamCreator(configuration).postsCategoriesGet(options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = globalAxios; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Search for posts.
         * @param {string} external_id Filter by external ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postsGet: function (external_id, options) {
            var localVarAxiosArgs = PostsApiAxiosParamCreator(configuration).postsGet(external_id, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = globalAxios; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * List of posts. An empty array is returned if no posts are found.
         * @summary List of posts.
         * @param {'timestamp' | 'comment_count' | 'likes_count'} [sort] Field to sort by
         * @param {'asc' | 'desc'} [order] Sort order
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {number} [limit] The numbers of items to return. If the value specified is more than the maximum, the result count will be limited to the maximum.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postsListGet: function (sort, order, offset, limit, options) {
            var localVarAxiosArgs = PostsApiAxiosParamCreator(configuration).postsListGet(sort, order, offset, limit, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = globalAxios; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create a post.
         * @param {PostSchemaCreate} PostSchemaCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postsPost: function (PostSchemaCreate, options) {
            var localVarAxiosArgs = PostsApiAxiosParamCreator(configuration).postsPost(PostSchemaCreate, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = globalAxios; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get information about the post.
         * @param {string} post_id The Invotra UUID of the post.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postsPostIdGet: function (post_id, options) {
            var localVarAxiosArgs = PostsApiAxiosParamCreator(configuration).postsPostIdGet(post_id, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = globalAxios; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Remove the current user\'s like from a post.
         * @param {string} post_id The Invotra UUID of the post.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postsPostIdLikeDelete: function (post_id, options) {
            var localVarAxiosArgs = PostsApiAxiosParamCreator(configuration).postsPostIdLikeDelete(post_id, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = globalAxios; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Check if the current user has liked a post.
         * @param {string} post_id The Invotra UUID of the post.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postsPostIdLikeGet: function (post_id, options) {
            var localVarAxiosArgs = PostsApiAxiosParamCreator(configuration).postsPostIdLikeGet(post_id, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = globalAxios; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Like a post as the current user.
         * @param {string} post_id The Invotra UUID of the post.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postsPostIdLikePut: function (post_id, options) {
            var localVarAxiosArgs = PostsApiAxiosParamCreator(configuration).postsPostIdLikePut(post_id, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = globalAxios; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get a list of users who have liked a post.
         * @param {string} post_id The Invotra UUID of the post.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {number} [limit] The numbers of items to return. If the value specified is more than the maximum, the result count will be limited to the maximum.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postsPostIdLikesGet: function (post_id, offset, limit, options) {
            var localVarAxiosArgs = PostsApiAxiosParamCreator(configuration).postsPostIdLikesGet(post_id, offset, limit, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = globalAxios; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update post information.
         * @param {string} post_id The Invotra UUID of the post.
         * @param {PostSchemaBase} PostSchemaBase
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postsPostIdPut: function (post_id, PostSchemaBase, options) {
            var localVarAxiosArgs = PostsApiAxiosParamCreator(configuration).postsPostIdPut(post_id, PostSchemaBase, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = globalAxios; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get a list of post replies. The replies are returned in thread order, old-to-new. Replies to a post appear after the post but before the next post at the same level, and posts are ordered oldest-to-newest within each level.
         * @summary Get the replies to a post.
         * @param {string} post_id The Invotra UUID of the parent post. Currently this must be a top-level post in its group. This restriction may be relaxed in a future API version.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {number} [limit] The numbers of items to return. If the value specified is more than the maximum, the result count will be limited to the maximum.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postsPostIdRepliesGet: function (post_id, offset, limit, options) {
            var localVarAxiosArgs = PostsApiAxiosParamCreator(configuration).postsPostIdRepliesGet(post_id, offset, limit, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = globalAxios; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Remove the current user\'s report flag from a post.
         * @param {string} post_id The Invotra UUID of the post.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postsPostIdReportDelete: function (post_id, options) {
            var localVarAxiosArgs = PostsApiAxiosParamCreator(configuration).postsPostIdReportDelete(post_id, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = globalAxios; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Check if the current user has reported a post.
         * @param {string} post_id The Invotra UUID of the post.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postsPostIdReportGet: function (post_id, options) {
            var localVarAxiosArgs = PostsApiAxiosParamCreator(configuration).postsPostIdReportGet(post_id, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = globalAxios; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Report a post as the current user.
         * @param {string} post_id The Invotra UUID of the post.
         * @param {PostReportSchemaCreate} PostReportSchemaCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postsPostIdReportPut: function (post_id, PostReportSchemaCreate, options) {
            var localVarAxiosArgs = PostsApiAxiosParamCreator(configuration).postsPostIdReportPut(post_id, PostReportSchemaCreate, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = globalAxios; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
/**
 * PostsApi - factory interface
 * @export
 */
export var PostsApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * List post categories.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postsCategoriesGet: function (options) {
            return PostsApiFp(configuration).postsCategoriesGet(options)(axios, basePath);
        },
        /**
         * Search for posts.
         * @param {string} external_id Filter by external ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postsGet: function (external_id, options) {
            return PostsApiFp(configuration).postsGet(external_id, options)(axios, basePath);
        },
        /**
         * List of posts. An empty array is returned if no posts are found.
         * @summary List of posts.
         * @param {'timestamp' | 'comment_count' | 'likes_count'} [sort] Field to sort by
         * @param {'asc' | 'desc'} [order] Sort order
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {number} [limit] The numbers of items to return. If the value specified is more than the maximum, the result count will be limited to the maximum.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postsListGet: function (sort, order, offset, limit, options) {
            return PostsApiFp(configuration).postsListGet(sort, order, offset, limit, options)(axios, basePath);
        },
        /**
         * Create a post.
         * @param {PostSchemaCreate} PostSchemaCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postsPost: function (PostSchemaCreate, options) {
            return PostsApiFp(configuration).postsPost(PostSchemaCreate, options)(axios, basePath);
        },
        /**
         * Get information about the post.
         * @param {string} post_id The Invotra UUID of the post.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postsPostIdGet: function (post_id, options) {
            return PostsApiFp(configuration).postsPostIdGet(post_id, options)(axios, basePath);
        },
        /**
         * Remove the current user\'s like from a post.
         * @param {string} post_id The Invotra UUID of the post.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postsPostIdLikeDelete: function (post_id, options) {
            return PostsApiFp(configuration).postsPostIdLikeDelete(post_id, options)(axios, basePath);
        },
        /**
         * Check if the current user has liked a post.
         * @param {string} post_id The Invotra UUID of the post.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postsPostIdLikeGet: function (post_id, options) {
            return PostsApiFp(configuration).postsPostIdLikeGet(post_id, options)(axios, basePath);
        },
        /**
         * Like a post as the current user.
         * @param {string} post_id The Invotra UUID of the post.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postsPostIdLikePut: function (post_id, options) {
            return PostsApiFp(configuration).postsPostIdLikePut(post_id, options)(axios, basePath);
        },
        /**
         * Get a list of users who have liked a post.
         * @param {string} post_id The Invotra UUID of the post.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {number} [limit] The numbers of items to return. If the value specified is more than the maximum, the result count will be limited to the maximum.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postsPostIdLikesGet: function (post_id, offset, limit, options) {
            return PostsApiFp(configuration).postsPostIdLikesGet(post_id, offset, limit, options)(axios, basePath);
        },
        /**
         * Update post information.
         * @param {string} post_id The Invotra UUID of the post.
         * @param {PostSchemaBase} PostSchemaBase
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postsPostIdPut: function (post_id, PostSchemaBase, options) {
            return PostsApiFp(configuration).postsPostIdPut(post_id, PostSchemaBase, options)(axios, basePath);
        },
        /**
         * Get a list of post replies. The replies are returned in thread order, old-to-new. Replies to a post appear after the post but before the next post at the same level, and posts are ordered oldest-to-newest within each level.
         * @summary Get the replies to a post.
         * @param {string} post_id The Invotra UUID of the parent post. Currently this must be a top-level post in its group. This restriction may be relaxed in a future API version.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {number} [limit] The numbers of items to return. If the value specified is more than the maximum, the result count will be limited to the maximum.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postsPostIdRepliesGet: function (post_id, offset, limit, options) {
            return PostsApiFp(configuration).postsPostIdRepliesGet(post_id, offset, limit, options)(axios, basePath);
        },
        /**
         * Remove the current user\'s report flag from a post.
         * @param {string} post_id The Invotra UUID of the post.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postsPostIdReportDelete: function (post_id, options) {
            return PostsApiFp(configuration).postsPostIdReportDelete(post_id, options)(axios, basePath);
        },
        /**
         * Check if the current user has reported a post.
         * @param {string} post_id The Invotra UUID of the post.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postsPostIdReportGet: function (post_id, options) {
            return PostsApiFp(configuration).postsPostIdReportGet(post_id, options)(axios, basePath);
        },
        /**
         * Report a post as the current user.
         * @param {string} post_id The Invotra UUID of the post.
         * @param {PostReportSchemaCreate} PostReportSchemaCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postsPostIdReportPut: function (post_id, PostReportSchemaCreate, options) {
            return PostsApiFp(configuration).postsPostIdReportPut(post_id, PostReportSchemaCreate, options)(axios, basePath);
        },
    };
};
/**
 * PostsApi - object-oriented interface
 * @export
 * @class PostsApi
 * @extends {BaseAPI}
 */
var PostsApi = /** @class */ (function (_super) {
    __extends(PostsApi, _super);
    function PostsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * List post categories.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostsApi
     */
    PostsApi.prototype.postsCategoriesGet = function (options) {
        return PostsApiFp(this.configuration).postsCategoriesGet(options)(this.axios, this.basePath);
    };
    /**
     * Search for posts.
     * @param {string} external_id Filter by external ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostsApi
     */
    PostsApi.prototype.postsGet = function (external_id, options) {
        return PostsApiFp(this.configuration).postsGet(external_id, options)(this.axios, this.basePath);
    };
    /**
     * List of posts. An empty array is returned if no posts are found.
     * @summary List of posts.
     * @param {'timestamp' | 'comment_count' | 'likes_count'} [sort] Field to sort by
     * @param {'asc' | 'desc'} [order] Sort order
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {number} [limit] The numbers of items to return. If the value specified is more than the maximum, the result count will be limited to the maximum.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostsApi
     */
    PostsApi.prototype.postsListGet = function (sort, order, offset, limit, options) {
        return PostsApiFp(this.configuration).postsListGet(sort, order, offset, limit, options)(this.axios, this.basePath);
    };
    /**
     * Create a post.
     * @param {PostSchemaCreate} PostSchemaCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostsApi
     */
    PostsApi.prototype.postsPost = function (PostSchemaCreate, options) {
        return PostsApiFp(this.configuration).postsPost(PostSchemaCreate, options)(this.axios, this.basePath);
    };
    /**
     * Get information about the post.
     * @param {string} post_id The Invotra UUID of the post.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostsApi
     */
    PostsApi.prototype.postsPostIdGet = function (post_id, options) {
        return PostsApiFp(this.configuration).postsPostIdGet(post_id, options)(this.axios, this.basePath);
    };
    /**
     * Remove the current user\'s like from a post.
     * @param {string} post_id The Invotra UUID of the post.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostsApi
     */
    PostsApi.prototype.postsPostIdLikeDelete = function (post_id, options) {
        return PostsApiFp(this.configuration).postsPostIdLikeDelete(post_id, options)(this.axios, this.basePath);
    };
    /**
     * Check if the current user has liked a post.
     * @param {string} post_id The Invotra UUID of the post.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostsApi
     */
    PostsApi.prototype.postsPostIdLikeGet = function (post_id, options) {
        return PostsApiFp(this.configuration).postsPostIdLikeGet(post_id, options)(this.axios, this.basePath);
    };
    /**
     * Like a post as the current user.
     * @param {string} post_id The Invotra UUID of the post.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostsApi
     */
    PostsApi.prototype.postsPostIdLikePut = function (post_id, options) {
        return PostsApiFp(this.configuration).postsPostIdLikePut(post_id, options)(this.axios, this.basePath);
    };
    /**
     * Get a list of users who have liked a post.
     * @param {string} post_id The Invotra UUID of the post.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {number} [limit] The numbers of items to return. If the value specified is more than the maximum, the result count will be limited to the maximum.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostsApi
     */
    PostsApi.prototype.postsPostIdLikesGet = function (post_id, offset, limit, options) {
        return PostsApiFp(this.configuration).postsPostIdLikesGet(post_id, offset, limit, options)(this.axios, this.basePath);
    };
    /**
     * Update post information.
     * @param {string} post_id The Invotra UUID of the post.
     * @param {PostSchemaBase} PostSchemaBase
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostsApi
     */
    PostsApi.prototype.postsPostIdPut = function (post_id, PostSchemaBase, options) {
        return PostsApiFp(this.configuration).postsPostIdPut(post_id, PostSchemaBase, options)(this.axios, this.basePath);
    };
    /**
     * Get a list of post replies. The replies are returned in thread order, old-to-new. Replies to a post appear after the post but before the next post at the same level, and posts are ordered oldest-to-newest within each level.
     * @summary Get the replies to a post.
     * @param {string} post_id The Invotra UUID of the parent post. Currently this must be a top-level post in its group. This restriction may be relaxed in a future API version.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {number} [limit] The numbers of items to return. If the value specified is more than the maximum, the result count will be limited to the maximum.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostsApi
     */
    PostsApi.prototype.postsPostIdRepliesGet = function (post_id, offset, limit, options) {
        return PostsApiFp(this.configuration).postsPostIdRepliesGet(post_id, offset, limit, options)(this.axios, this.basePath);
    };
    /**
     * Remove the current user\'s report flag from a post.
     * @param {string} post_id The Invotra UUID of the post.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostsApi
     */
    PostsApi.prototype.postsPostIdReportDelete = function (post_id, options) {
        return PostsApiFp(this.configuration).postsPostIdReportDelete(post_id, options)(this.axios, this.basePath);
    };
    /**
     * Check if the current user has reported a post.
     * @param {string} post_id The Invotra UUID of the post.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostsApi
     */
    PostsApi.prototype.postsPostIdReportGet = function (post_id, options) {
        return PostsApiFp(this.configuration).postsPostIdReportGet(post_id, options)(this.axios, this.basePath);
    };
    /**
     * Report a post as the current user.
     * @param {string} post_id The Invotra UUID of the post.
     * @param {PostReportSchemaCreate} PostReportSchemaCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostsApi
     */
    PostsApi.prototype.postsPostIdReportPut = function (post_id, PostReportSchemaCreate, options) {
        return PostsApiFp(this.configuration).postsPostIdReportPut(post_id, PostReportSchemaCreate, options)(this.axios, this.basePath);
    };
    return PostsApi;
}(BaseAPI));
export { PostsApi };
//# sourceMappingURL=posts-api.js.map