/**
 * Invotra API
 * In general most fields are optional for update (PUT) requests; you can leave them blank (pass an empty string / array / whatever as appropriate) to clear them, or omit the key to leave them unchanged.
 *
 * The version of the OpenAPI document: 0.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { AuthTokenSchema } from '../model';
import { CsrfTokenSchema } from '../model';
import { SessionSchema } from '../model';
/**
 * SessionsApi - axios parameter creator
 * @export
 */
export declare const SessionsApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * Login a user. Use this endpoint if you are authenticating with an individual user rather than an API Key. The session cookie returned in the header should be used for subsequent requests.
     * @param {SessionSchema} SessionSchema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sessionsLoginPost(SessionSchema: SessionSchema, options?: any): RequestArgs;
    /**
     * Logout the user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sessionsLogoutPost(options?: any): RequestArgs;
    /**
     * Returns a CSRF token.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sessionsTokenGet(options?: any): RequestArgs;
    /**
     * Exchange a temporary single-use token for a valid user session and CSRF token. This is intended for use by mobile apps.
     * @param {AuthTokenSchema} AuthTokenSchema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sessionsTokenPost(AuthTokenSchema: AuthTokenSchema, options?: any): RequestArgs;
};
/**
 * SessionsApi - functional programming interface
 * @export
 */
export declare const SessionsApiFp: (configuration?: Configuration | undefined) => {
    /**
     * Login a user. Use this endpoint if you are authenticating with an individual user rather than an API Key. The session cookie returned in the header should be used for subsequent requests.
     * @param {SessionSchema} SessionSchema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sessionsLoginPost(SessionSchema: SessionSchema, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>;
    /**
     * Logout the user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sessionsLogoutPost(options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>;
    /**
     * Returns a CSRF token.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sessionsTokenGet(options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<CsrfTokenSchema>;
    /**
     * Exchange a temporary single-use token for a valid user session and CSRF token. This is intended for use by mobile apps.
     * @param {AuthTokenSchema} AuthTokenSchema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sessionsTokenPost(AuthTokenSchema: AuthTokenSchema, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<CsrfTokenSchema>;
};
/**
 * SessionsApi - factory interface
 * @export
 */
export declare const SessionsApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     * Login a user. Use this endpoint if you are authenticating with an individual user rather than an API Key. The session cookie returned in the header should be used for subsequent requests.
     * @param {SessionSchema} SessionSchema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sessionsLoginPost(SessionSchema: SessionSchema, options?: any): AxiosPromise<void>;
    /**
     * Logout the user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sessionsLogoutPost(options?: any): AxiosPromise<void>;
    /**
     * Returns a CSRF token.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sessionsTokenGet(options?: any): AxiosPromise<CsrfTokenSchema>;
    /**
     * Exchange a temporary single-use token for a valid user session and CSRF token. This is intended for use by mobile apps.
     * @param {AuthTokenSchema} AuthTokenSchema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sessionsTokenPost(AuthTokenSchema: AuthTokenSchema, options?: any): AxiosPromise<CsrfTokenSchema>;
};
/**
 * SessionsApi - interface
 * @export
 * @interface SessionsApi
 */
export interface SessionsApiInterface {
    /**
     * Login a user. Use this endpoint if you are authenticating with an individual user rather than an API Key. The session cookie returned in the header should be used for subsequent requests.
     * @param {SessionSchema} SessionSchema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionsApiInterface
     */
    sessionsLoginPost(SessionSchema: SessionSchema, options?: any): AxiosPromise<void>;
    /**
     * Logout the user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionsApiInterface
     */
    sessionsLogoutPost(options?: any): AxiosPromise<void>;
    /**
     * Returns a CSRF token.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionsApiInterface
     */
    sessionsTokenGet(options?: any): AxiosPromise<CsrfTokenSchema>;
    /**
     * Exchange a temporary single-use token for a valid user session and CSRF token. This is intended for use by mobile apps.
     * @param {AuthTokenSchema} AuthTokenSchema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionsApiInterface
     */
    sessionsTokenPost(AuthTokenSchema: AuthTokenSchema, options?: any): AxiosPromise<CsrfTokenSchema>;
}
/**
 * SessionsApi - object-oriented interface
 * @export
 * @class SessionsApi
 * @extends {BaseAPI}
 */
export declare class SessionsApi extends BaseAPI implements SessionsApiInterface {
    /**
     * Login a user. Use this endpoint if you are authenticating with an individual user rather than an API Key. The session cookie returned in the header should be used for subsequent requests.
     * @param {SessionSchema} SessionSchema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionsApi
     */
    sessionsLoginPost(SessionSchema: SessionSchema, options?: any): AxiosPromise<void>;
    /**
     * Logout the user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionsApi
     */
    sessionsLogoutPost(options?: any): AxiosPromise<void>;
    /**
     * Returns a CSRF token.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionsApi
     */
    sessionsTokenGet(options?: any): AxiosPromise<CsrfTokenSchema>;
    /**
     * Exchange a temporary single-use token for a valid user session and CSRF token. This is intended for use by mobile apps.
     * @param {AuthTokenSchema} AuthTokenSchema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionsApi
     */
    sessionsTokenPost(AuthTokenSchema: AuthTokenSchema, options?: any): AxiosPromise<CsrfTokenSchema>;
}
