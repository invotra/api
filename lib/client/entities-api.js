// tslint:disable
/**
 * InvotraAPI
 * In general most fields are optional for update (PUT) requests; you can leave them blank (pass an empty string / array / whatever as appropriate) to clear them, or omit the key to leave them unchanged.
 *
 * The version of the OpenAPI document: 0.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import * as globalImportUrl from 'url';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, BaseAPI, RequiredError } from '../base';
/**
 * EntitiesApi - axios parameter creator
 * @export
 */
export var EntitiesApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Look up information about an entity based on its URL path.
         * @param {string} path The (Drupal) URL path of the entity to look up. Include the leading slash.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        entitiesPathLookupGet: function (path, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'path' is not null or undefined
            if (path === null || path === undefined) {
                throw new RequiredError('path', 'Required parameter path was null or undefined when calling entitiesPathLookupGet.');
            }
            var localVarPath = "/entities/path-lookup";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }
            // authentication SessionCookieHeader required
            if (path !== undefined) {
                localVarQueryParameter['path'] = path;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * EntitiesApi - functional programming interface
 * @export
 */
export var EntitiesApiFp = function (configuration) {
    return {
        /**
         *
         * @summary Look up information about an entity based on its URL path.
         * @param {string} path The (Drupal) URL path of the entity to look up. Include the leading slash.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        entitiesPathLookupGet: function (path, options) {
            var localVarAxiosArgs = EntitiesApiAxiosParamCreator(configuration).entitiesPathLookupGet(path, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = globalAxios; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
/**
 * EntitiesApi - factory interface
 * @export
 */
export var EntitiesApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary Look up information about an entity based on its URL path.
         * @param {string} path The (Drupal) URL path of the entity to look up. Include the leading slash.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        entitiesPathLookupGet: function (path, options) {
            return EntitiesApiFp(configuration).entitiesPathLookupGet(path, options)(axios, basePath);
        },
    };
};
/**
 * EntitiesApi - object-oriented interface
 * @export
 * @class EntitiesApi
 * @extends {BaseAPI}
 */
var EntitiesApi = /** @class */ (function (_super) {
    __extends(EntitiesApi, _super);
    function EntitiesApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Look up information about an entity based on its URL path.
     * @param {string} path The (Drupal) URL path of the entity to look up. Include the leading slash.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    EntitiesApi.prototype.entitiesPathLookupGet = function (path, options) {
        return EntitiesApiFp(this.configuration).entitiesPathLookupGet(path, options)(this.axios, this.basePath);
    };
    return EntitiesApi;
}(BaseAPI));
export { EntitiesApi };
//# sourceMappingURL=entities-api.js.map