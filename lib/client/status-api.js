// tslint:disable
/**
 * InvotraAPI
 * In general most fields are optional for update (PUT) requests; you can leave them blank (pass an empty string / array / whatever as appropriate) to clear them, or omit the key to leave them unchanged.
 *
 * The version of the OpenAPI document: 0.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import * as globalImportUrl from 'url';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, BaseAPI } from '../base';
/**
 * StatusApi - axios parameter creator
 * @export
 */
export var StatusApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Returns the status of the Invotra API. If successful, the API is running as expected and will return the \"OK\" response that includes the server time. (If it is not, an appropriate 5xx error message will be returned).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        statusGet: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/status";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * StatusApi - functional programming interface
 * @export
 */
export var StatusApiFp = function (configuration) {
    return {
        /**
         * Returns the status of the Invotra API. If successful, the API is running as expected and will return the \"OK\" response that includes the server time. (If it is not, an appropriate 5xx error message will be returned).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        statusGet: function (options) {
            var localVarAxiosArgs = StatusApiAxiosParamCreator(configuration).statusGet(options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = globalAxios; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
/**
 * StatusApi - factory interface
 * @export
 */
export var StatusApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * Returns the status of the Invotra API. If successful, the API is running as expected and will return the \"OK\" response that includes the server time. (If it is not, an appropriate 5xx error message will be returned).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        statusGet: function (options) {
            return StatusApiFp(configuration).statusGet(options)(axios, basePath);
        },
    };
};
/**
 * StatusApi - object-oriented interface
 * @export
 * @class StatusApi
 * @extends {BaseAPI}
 */
var StatusApi = /** @class */ (function (_super) {
    __extends(StatusApi, _super);
    function StatusApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Returns the status of the Invotra API. If successful, the API is running as expected and will return the \"OK\" response that includes the server time. (If it is not, an appropriate 5xx error message will be returned).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatusApi
     */
    StatusApi.prototype.statusGet = function (options) {
        return StatusApiFp(this.configuration).statusGet(options)(this.axios, this.basePath);
    };
    return StatusApi;
}(BaseAPI));
export { StatusApi };
//# sourceMappingURL=status-api.js.map