/**
 * Invotra API
 * In general most fields are optional for update (PUT) requests; you can leave them blank (pass an empty string / array / whatever as appropriate) to clear them, or omit the key to leave them unchanged.
 *
 * The version of the OpenAPI document: 0.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { InlineResponse20045 } from '../model';
import { PolicyTypeSchema } from '../model';
import { PolicyTypeSchemaCommon } from '../model';
import { PolicyTypeSchemaCreate } from '../model';
import { SuccessfulPostResponseSchema } from '../model';
/**
 * PolicyTypesApi - axios parameter creator
 * @export
 */
export declare const PolicyTypesApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * Search for policy types. An empty array is returned if no policy types are found.
     * @param {string} [name] Filter by name. Matches on whole words.
     * @param {string} [external_id] Filter by external ID.
     * @param {string} [status] Filter the list of policy types on a comma-separated list of statuses. Valid statuses are \&quot;published\&quot; and \&quot;unpublished\&quot;. You may include both. The default when not supplied is \&quot;published\&quot; only.
     * @param {string} [valid_parents_for] Filter out invalid parents (self and children) for the specified Invotra UUID of the policy type.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {number} [limit] The numbers of items to return. If the value specified is more than the maximum, the result count will be limited to the maximum.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    policyTypesListGet(name?: string | undefined, external_id?: string | undefined, status?: string | undefined, valid_parents_for?: string | undefined, offset?: number | undefined, limit?: number | undefined, options?: any): RequestArgs;
    /**
     * Delete a policy type.
     * @param {string} policy_type_id The Invotra UUID of the policy type.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    policyTypesPolicyTypeIdDelete(policy_type_id: string, options?: any): RequestArgs;
    /**
     * Get information about the policy type.
     * @param {string} policy_type_id The Invotra UUID of the policy type.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    policyTypesPolicyTypeIdGet(policy_type_id: string, options?: any): RequestArgs;
    /**
     * Update policy type information.
     * @param {string} policy_type_id The Invotra UUID of the policy type.
     * @param {PolicyTypeSchemaCommon} PolicyTypeSchemaCommon
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    policyTypesPolicyTypeIdPut(policy_type_id: string, PolicyTypeSchemaCommon: PolicyTypeSchemaCommon, options?: any): RequestArgs;
    /**
     * Provision a new policy type.
     * @param {PolicyTypeSchemaCreate} PolicyTypeSchemaCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    policyTypesPost(PolicyTypeSchemaCreate: PolicyTypeSchemaCreate, options?: any): RequestArgs;
};
/**
 * PolicyTypesApi - functional programming interface
 * @export
 */
export declare const PolicyTypesApiFp: (configuration?: Configuration | undefined) => {
    /**
     * Search for policy types. An empty array is returned if no policy types are found.
     * @param {string} [name] Filter by name. Matches on whole words.
     * @param {string} [external_id] Filter by external ID.
     * @param {string} [status] Filter the list of policy types on a comma-separated list of statuses. Valid statuses are \&quot;published\&quot; and \&quot;unpublished\&quot;. You may include both. The default when not supplied is \&quot;published\&quot; only.
     * @param {string} [valid_parents_for] Filter out invalid parents (self and children) for the specified Invotra UUID of the policy type.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {number} [limit] The numbers of items to return. If the value specified is more than the maximum, the result count will be limited to the maximum.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    policyTypesListGet(name?: string | undefined, external_id?: string | undefined, status?: string | undefined, valid_parents_for?: string | undefined, offset?: number | undefined, limit?: number | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<InlineResponse20045>;
    /**
     * Delete a policy type.
     * @param {string} policy_type_id The Invotra UUID of the policy type.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    policyTypesPolicyTypeIdDelete(policy_type_id: string, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>;
    /**
     * Get information about the policy type.
     * @param {string} policy_type_id The Invotra UUID of the policy type.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    policyTypesPolicyTypeIdGet(policy_type_id: string, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<PolicyTypeSchema>;
    /**
     * Update policy type information.
     * @param {string} policy_type_id The Invotra UUID of the policy type.
     * @param {PolicyTypeSchemaCommon} PolicyTypeSchemaCommon
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    policyTypesPolicyTypeIdPut(policy_type_id: string, PolicyTypeSchemaCommon: PolicyTypeSchemaCommon, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>;
    /**
     * Provision a new policy type.
     * @param {PolicyTypeSchemaCreate} PolicyTypeSchemaCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    policyTypesPost(PolicyTypeSchemaCreate: PolicyTypeSchemaCreate, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<SuccessfulPostResponseSchema>;
};
/**
 * PolicyTypesApi - factory interface
 * @export
 */
export declare const PolicyTypesApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     * Search for policy types. An empty array is returned if no policy types are found.
     * @param {string} [name] Filter by name. Matches on whole words.
     * @param {string} [external_id] Filter by external ID.
     * @param {string} [status] Filter the list of policy types on a comma-separated list of statuses. Valid statuses are \&quot;published\&quot; and \&quot;unpublished\&quot;. You may include both. The default when not supplied is \&quot;published\&quot; only.
     * @param {string} [valid_parents_for] Filter out invalid parents (self and children) for the specified Invotra UUID of the policy type.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {number} [limit] The numbers of items to return. If the value specified is more than the maximum, the result count will be limited to the maximum.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    policyTypesListGet(name?: string | undefined, external_id?: string | undefined, status?: string | undefined, valid_parents_for?: string | undefined, offset?: number | undefined, limit?: number | undefined, options?: any): AxiosPromise<InlineResponse20045>;
    /**
     * Delete a policy type.
     * @param {string} policy_type_id The Invotra UUID of the policy type.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    policyTypesPolicyTypeIdDelete(policy_type_id: string, options?: any): AxiosPromise<void>;
    /**
     * Get information about the policy type.
     * @param {string} policy_type_id The Invotra UUID of the policy type.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    policyTypesPolicyTypeIdGet(policy_type_id: string, options?: any): AxiosPromise<PolicyTypeSchema>;
    /**
     * Update policy type information.
     * @param {string} policy_type_id The Invotra UUID of the policy type.
     * @param {PolicyTypeSchemaCommon} PolicyTypeSchemaCommon
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    policyTypesPolicyTypeIdPut(policy_type_id: string, PolicyTypeSchemaCommon: PolicyTypeSchemaCommon, options?: any): AxiosPromise<void>;
    /**
     * Provision a new policy type.
     * @param {PolicyTypeSchemaCreate} PolicyTypeSchemaCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    policyTypesPost(PolicyTypeSchemaCreate: PolicyTypeSchemaCreate, options?: any): AxiosPromise<SuccessfulPostResponseSchema>;
};
/**
 * PolicyTypesApi - interface
 * @export
 * @interface PolicyTypesApi
 */
export interface PolicyTypesApiInterface {
    /**
     * Search for policy types. An empty array is returned if no policy types are found.
     * @param {string} [name] Filter by name. Matches on whole words.
     * @param {string} [external_id] Filter by external ID.
     * @param {string} [status] Filter the list of policy types on a comma-separated list of statuses. Valid statuses are \&quot;published\&quot; and \&quot;unpublished\&quot;. You may include both. The default when not supplied is \&quot;published\&quot; only.
     * @param {string} [valid_parents_for] Filter out invalid parents (self and children) for the specified Invotra UUID of the policy type.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {number} [limit] The numbers of items to return. If the value specified is more than the maximum, the result count will be limited to the maximum.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyTypesApiInterface
     */
    policyTypesListGet(name?: string, external_id?: string, status?: string, valid_parents_for?: string, offset?: number, limit?: number, options?: any): AxiosPromise<InlineResponse20045>;
    /**
     * Delete a policy type.
     * @param {string} policy_type_id The Invotra UUID of the policy type.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyTypesApiInterface
     */
    policyTypesPolicyTypeIdDelete(policy_type_id: string, options?: any): AxiosPromise<void>;
    /**
     * Get information about the policy type.
     * @param {string} policy_type_id The Invotra UUID of the policy type.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyTypesApiInterface
     */
    policyTypesPolicyTypeIdGet(policy_type_id: string, options?: any): AxiosPromise<PolicyTypeSchema>;
    /**
     * Update policy type information.
     * @param {string} policy_type_id The Invotra UUID of the policy type.
     * @param {PolicyTypeSchemaCommon} PolicyTypeSchemaCommon
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyTypesApiInterface
     */
    policyTypesPolicyTypeIdPut(policy_type_id: string, PolicyTypeSchemaCommon: PolicyTypeSchemaCommon, options?: any): AxiosPromise<void>;
    /**
     * Provision a new policy type.
     * @param {PolicyTypeSchemaCreate} PolicyTypeSchemaCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyTypesApiInterface
     */
    policyTypesPost(PolicyTypeSchemaCreate: PolicyTypeSchemaCreate, options?: any): AxiosPromise<SuccessfulPostResponseSchema>;
}
/**
 * PolicyTypesApi - object-oriented interface
 * @export
 * @class PolicyTypesApi
 * @extends {BaseAPI}
 */
export declare class PolicyTypesApi extends BaseAPI implements PolicyTypesApiInterface {
    /**
     * Search for policy types. An empty array is returned if no policy types are found.
     * @param {string} [name] Filter by name. Matches on whole words.
     * @param {string} [external_id] Filter by external ID.
     * @param {string} [status] Filter the list of policy types on a comma-separated list of statuses. Valid statuses are \&quot;published\&quot; and \&quot;unpublished\&quot;. You may include both. The default when not supplied is \&quot;published\&quot; only.
     * @param {string} [valid_parents_for] Filter out invalid parents (self and children) for the specified Invotra UUID of the policy type.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {number} [limit] The numbers of items to return. If the value specified is more than the maximum, the result count will be limited to the maximum.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyTypesApi
     */
    policyTypesListGet(name?: string, external_id?: string, status?: string, valid_parents_for?: string, offset?: number, limit?: number, options?: any): AxiosPromise<InlineResponse20045>;
    /**
     * Delete a policy type.
     * @param {string} policy_type_id The Invotra UUID of the policy type.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyTypesApi
     */
    policyTypesPolicyTypeIdDelete(policy_type_id: string, options?: any): AxiosPromise<void>;
    /**
     * Get information about the policy type.
     * @param {string} policy_type_id The Invotra UUID of the policy type.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyTypesApi
     */
    policyTypesPolicyTypeIdGet(policy_type_id: string, options?: any): AxiosPromise<PolicyTypeSchema>;
    /**
     * Update policy type information.
     * @param {string} policy_type_id The Invotra UUID of the policy type.
     * @param {PolicyTypeSchemaCommon} PolicyTypeSchemaCommon
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyTypesApi
     */
    policyTypesPolicyTypeIdPut(policy_type_id: string, PolicyTypeSchemaCommon: PolicyTypeSchemaCommon, options?: any): AxiosPromise<void>;
    /**
     * Provision a new policy type.
     * @param {PolicyTypeSchemaCreate} PolicyTypeSchemaCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyTypesApi
     */
    policyTypesPost(PolicyTypeSchemaCreate: PolicyTypeSchemaCreate, options?: any): AxiosPromise<SuccessfulPostResponseSchema>;
}
