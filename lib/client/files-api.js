// tslint:disable
/**
 * InvotraAPI
 * In general most fields are optional for update (PUT) requests; you can leave them blank (pass an empty string / array / whatever as appropriate) to clear them, or omit the key to leave them unchanged.
 *
 * The version of the OpenAPI document: 0.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import * as globalImportUrl from 'url';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, BaseAPI, RequiredError } from '../base';
/**
 * FilesApi - axios parameter creator
 * @export
 */
export var FilesApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Get information about the file.
         * @param {string} file_id The Invotra UUID of the file.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesFileIdGet: function (file_id, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'file_id' is not null or undefined
            if (file_id === null || file_id === undefined) {
                throw new RequiredError('file_id', 'Required parameter file_id was null or undefined when calling filesFileIdGet.');
            }
            var localVarPath = "/files/{file_id}"
                .replace("{" + "file_id" + "}", encodeURIComponent(String(file_id)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }
            // authentication CognitoJwt required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("CognitoJwt", ["invotra/files:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication SessionCookieHeader required
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} file_id The Invotra UUID of the file.
         * @param {FileSchemaUpdate} FileSchemaUpdate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesFileIdPut: function (file_id, FileSchemaUpdate, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'file_id' is not null or undefined
            if (file_id === null || file_id === undefined) {
                throw new RequiredError('file_id', 'Required parameter file_id was null or undefined when calling filesFileIdPut.');
            }
            // verify required parameter 'FileSchemaUpdate' is not null or undefined
            if (FileSchemaUpdate === null || FileSchemaUpdate === undefined) {
                throw new RequiredError('FileSchemaUpdate', 'Required parameter FileSchemaUpdate was null or undefined when calling filesFileIdPut.');
            }
            var localVarPath = "/files/{file_id}"
                .replace("{" + "file_id" + "}", encodeURIComponent(String(file_id)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }
            // authentication CognitoJwt required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("CognitoJwt", ["invotra/files:write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication SessionCookieHeader required
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            var needsSerialization = (typeof FileSchemaUpdate !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(FileSchemaUpdate !== undefined ? FileSchemaUpdate : {}) : (FileSchemaUpdate || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Provision a new file.
         * @param {FileSchemaCreate} FileSchemaCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesPost: function (FileSchemaCreate, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'FileSchemaCreate' is not null or undefined
            if (FileSchemaCreate === null || FileSchemaCreate === undefined) {
                throw new RequiredError('FileSchemaCreate', 'Required parameter FileSchemaCreate was null or undefined when calling filesPost.');
            }
            var localVarPath = "/files";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }
            // authentication CognitoJwt required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("CognitoJwt", ["invotra/files:write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication SessionCookieHeader required
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            var needsSerialization = (typeof FileSchemaCreate !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(FileSchemaCreate !== undefined ? FileSchemaCreate : {}) : (FileSchemaCreate || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * FilesApi - functional programming interface
 * @export
 */
export var FilesApiFp = function (configuration) {
    return {
        /**
         * Get information about the file.
         * @param {string} file_id The Invotra UUID of the file.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesFileIdGet: function (file_id, options) {
            var localVarAxiosArgs = FilesApiAxiosParamCreator(configuration).filesFileIdGet(file_id, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = globalAxios; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} file_id The Invotra UUID of the file.
         * @param {FileSchemaUpdate} FileSchemaUpdate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesFileIdPut: function (file_id, FileSchemaUpdate, options) {
            var localVarAxiosArgs = FilesApiAxiosParamCreator(configuration).filesFileIdPut(file_id, FileSchemaUpdate, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = globalAxios; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Provision a new file.
         * @param {FileSchemaCreate} FileSchemaCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesPost: function (FileSchemaCreate, options) {
            var localVarAxiosArgs = FilesApiAxiosParamCreator(configuration).filesPost(FileSchemaCreate, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = globalAxios; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
/**
 * FilesApi - factory interface
 * @export
 */
export var FilesApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * Get information about the file.
         * @param {string} file_id The Invotra UUID of the file.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesFileIdGet: function (file_id, options) {
            return FilesApiFp(configuration).filesFileIdGet(file_id, options)(axios, basePath);
        },
        /**
         *
         * @param {string} file_id The Invotra UUID of the file.
         * @param {FileSchemaUpdate} FileSchemaUpdate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesFileIdPut: function (file_id, FileSchemaUpdate, options) {
            return FilesApiFp(configuration).filesFileIdPut(file_id, FileSchemaUpdate, options)(axios, basePath);
        },
        /**
         * Provision a new file.
         * @param {FileSchemaCreate} FileSchemaCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesPost: function (FileSchemaCreate, options) {
            return FilesApiFp(configuration).filesPost(FileSchemaCreate, options)(axios, basePath);
        },
    };
};
/**
 * FilesApi - object-oriented interface
 * @export
 * @class FilesApi
 * @extends {BaseAPI}
 */
var FilesApi = /** @class */ (function (_super) {
    __extends(FilesApi, _super);
    function FilesApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Get information about the file.
     * @param {string} file_id The Invotra UUID of the file.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesApi
     */
    FilesApi.prototype.filesFileIdGet = function (file_id, options) {
        return FilesApiFp(this.configuration).filesFileIdGet(file_id, options)(this.axios, this.basePath);
    };
    /**
     *
     * @param {string} file_id The Invotra UUID of the file.
     * @param {FileSchemaUpdate} FileSchemaUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesApi
     */
    FilesApi.prototype.filesFileIdPut = function (file_id, FileSchemaUpdate, options) {
        return FilesApiFp(this.configuration).filesFileIdPut(file_id, FileSchemaUpdate, options)(this.axios, this.basePath);
    };
    /**
     * Provision a new file.
     * @param {FileSchemaCreate} FileSchemaCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesApi
     */
    FilesApi.prototype.filesPost = function (FileSchemaCreate, options) {
        return FilesApiFp(this.configuration).filesPost(FileSchemaCreate, options)(this.axios, this.basePath);
    };
    return FilesApi;
}(BaseAPI));
export { FilesApi };
//# sourceMappingURL=files-api.js.map