/**
 * Invotra API
 * In general most fields are optional for update (PUT) requests; you can leave them blank (pass an empty string / array / whatever as appropriate) to clear them, or omit the key to leave them unchanged.
 *
 * The version of the OpenAPI document: 0.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { FeedStatusSchema } from '../model';
import { InlineResponse2003 } from '../model';
/**
 * FeedsApi - axios parameter creator
 * @export
 */
export declare const FeedsApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * Returns the feed for a user.
     * @param {number} page Page to pull results from.
     * @param {boolean} [app_feeds_only] Filter the feed for the mobile app. Returns only group related messages.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    feedsGet(page: number, app_feeds_only?: boolean | undefined, options?: any): RequestArgs;
    /**
     * Check if any new feed items are available for a user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    feedsStatusGet(options?: any): RequestArgs;
    /**
     * Set the feed as read for a user. You should only set this to 0.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    feedsStatusPut(options?: any): RequestArgs;
};
/**
 * FeedsApi - functional programming interface
 * @export
 */
export declare const FeedsApiFp: (configuration?: Configuration | undefined) => {
    /**
     * Returns the feed for a user.
     * @param {number} page Page to pull results from.
     * @param {boolean} [app_feeds_only] Filter the feed for the mobile app. Returns only group related messages.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    feedsGet(page: number, app_feeds_only?: boolean | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<InlineResponse2003>;
    /**
     * Check if any new feed items are available for a user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    feedsStatusGet(options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<FeedStatusSchema>;
    /**
     * Set the feed as read for a user. You should only set this to 0.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    feedsStatusPut(options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<FeedStatusSchema>;
};
/**
 * FeedsApi - factory interface
 * @export
 */
export declare const FeedsApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     * Returns the feed for a user.
     * @param {number} page Page to pull results from.
     * @param {boolean} [app_feeds_only] Filter the feed for the mobile app. Returns only group related messages.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    feedsGet(page: number, app_feeds_only?: boolean | undefined, options?: any): AxiosPromise<InlineResponse2003>;
    /**
     * Check if any new feed items are available for a user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    feedsStatusGet(options?: any): AxiosPromise<FeedStatusSchema>;
    /**
     * Set the feed as read for a user. You should only set this to 0.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    feedsStatusPut(options?: any): AxiosPromise<FeedStatusSchema>;
};
/**
 * FeedsApi - interface
 * @export
 * @interface FeedsApi
 */
export interface FeedsApiInterface {
    /**
     * Returns the feed for a user.
     * @param {number} page Page to pull results from.
     * @param {boolean} [app_feeds_only] Filter the feed for the mobile app. Returns only group related messages.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedsApiInterface
     */
    feedsGet(page: number, app_feeds_only?: boolean, options?: any): AxiosPromise<InlineResponse2003>;
    /**
     * Check if any new feed items are available for a user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedsApiInterface
     */
    feedsStatusGet(options?: any): AxiosPromise<FeedStatusSchema>;
    /**
     * Set the feed as read for a user. You should only set this to 0.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedsApiInterface
     */
    feedsStatusPut(options?: any): AxiosPromise<FeedStatusSchema>;
}
/**
 * FeedsApi - object-oriented interface
 * @export
 * @class FeedsApi
 * @extends {BaseAPI}
 */
export declare class FeedsApi extends BaseAPI implements FeedsApiInterface {
    /**
     * Returns the feed for a user.
     * @param {number} page Page to pull results from.
     * @param {boolean} [app_feeds_only] Filter the feed for the mobile app. Returns only group related messages.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedsApi
     */
    feedsGet(page: number, app_feeds_only?: boolean, options?: any): AxiosPromise<InlineResponse2003>;
    /**
     * Check if any new feed items are available for a user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedsApi
     */
    feedsStatusGet(options?: any): AxiosPromise<FeedStatusSchema>;
    /**
     * Set the feed as read for a user. You should only set this to 0.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedsApi
     */
    feedsStatusPut(options?: any): AxiosPromise<FeedStatusSchema>;
}
