// tslint:disable
/**
 * InvotraAPI
 * In general most fields are optional for update (PUT) requests; you can leave them blank (pass an empty string / array / whatever as appropriate) to clear them, or omit the key to leave them unchanged.
 *
 * The version of the OpenAPI document: 0.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import * as globalImportUrl from 'url';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, BaseAPI, RequiredError } from '../base';
/**
 * TeamsApi - axios parameter creator
 * @export
 */
export var TeamsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Search for teams. An empty array is returned if no teams are found.
         * @param {string} external_id Filter by external ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsGet: function (external_id, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'external_id' is not null or undefined
            if (external_id === null || external_id === undefined) {
                throw new RequiredError('external_id', 'Required parameter external_id was null or undefined when calling teamsGet.');
            }
            var localVarPath = "/teams";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }
            // authentication CognitoJwt required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("CognitoJwt", ["invotra/teams:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication SessionCookieHeader required
            if (external_id !== undefined) {
                localVarQueryParameter['external_id'] = external_id;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Search for teams. An empty array is returned if no teams are found.
         * @param {string} [label] Filter by label. Matches on whole words.
         * @param {string} [autocomplete] Autocomplete term. Matches on team name, per letter, from the start of the word.
         * @param {string} [users_fulltext_search] Filter the list of teams to those that include users matching a search term. This is useful when you have already searched for users and want to refine your search by team (like a faceted search). Like the fulltext_search parameter of /users/search, this matches on whole words.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {number} [limit] The numbers of items to return.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsListGet: function (label, autocomplete, users_fulltext_search, offset, limit, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/teams/list";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }
            // authentication CognitoJwt required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("CognitoJwt", ["invotra/teams:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication SessionCookieHeader required
            if (label !== undefined) {
                localVarQueryParameter['label'] = label;
            }
            if (autocomplete !== undefined) {
                localVarQueryParameter['autocomplete'] = autocomplete;
            }
            if (users_fulltext_search !== undefined) {
                localVarQueryParameter['users_fulltext_search'] = users_fulltext_search;
            }
            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Provision a new team.
         * @param {TeamSchemaCreate} TeamSchemaCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsPost: function (TeamSchemaCreate, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'TeamSchemaCreate' is not null or undefined
            if (TeamSchemaCreate === null || TeamSchemaCreate === undefined) {
                throw new RequiredError('TeamSchemaCreate', 'Required parameter TeamSchemaCreate was null or undefined when calling teamsPost.');
            }
            var localVarPath = "/teams";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }
            // authentication CognitoJwt required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("CognitoJwt", ["invotra/teams:write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication SessionCookieHeader required
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            var needsSerialization = (typeof TeamSchemaCreate !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(TeamSchemaCreate !== undefined ? TeamSchemaCreate : {}) : (TeamSchemaCreate || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove team information
         * @param {string} team_id The Invotra UUID of the team.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsTeamIdDelete: function (team_id, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'team_id' is not null or undefined
            if (team_id === null || team_id === undefined) {
                throw new RequiredError('team_id', 'Required parameter team_id was null or undefined when calling teamsTeamIdDelete.');
            }
            var localVarPath = "/teams/{team_id}"
                .replace("{" + "team_id" + "}", encodeURIComponent(String(team_id)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }
            // authentication CognitoJwt required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("CognitoJwt", ["invotra/teams:write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication SessionCookieHeader required
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get information about the team.
         * @param {string} team_id The Invotra UUID of the team.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsTeamIdGet: function (team_id, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'team_id' is not null or undefined
            if (team_id === null || team_id === undefined) {
                throw new RequiredError('team_id', 'Required parameter team_id was null or undefined when calling teamsTeamIdGet.');
            }
            var localVarPath = "/teams/{team_id}"
                .replace("{" + "team_id" + "}", encodeURIComponent(String(team_id)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }
            // authentication CognitoJwt required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("CognitoJwt", ["invotra/teams:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication SessionCookieHeader required
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of team members.
         * @param {string} team_id The Invotra UUID of the team.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {number} [limit] The numbers of items to return.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsTeamIdMembershipsGet: function (team_id, offset, limit, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'team_id' is not null or undefined
            if (team_id === null || team_id === undefined) {
                throw new RequiredError('team_id', 'Required parameter team_id was null or undefined when calling teamsTeamIdMembershipsGet.');
            }
            var localVarPath = "/teams/{team_id}/memberships"
                .replace("{" + "team_id" + "}", encodeURIComponent(String(team_id)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }
            // authentication CognitoJwt required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("CognitoJwt", ["invotra/teams:read", "invotra/users:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication SessionCookieHeader required
            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove the user\'s membership of the team.
         * @param {string} team_id The Invotra UUID of the team.
         * @param {string} user_id The Invotra UUID of the user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsTeamIdMembershipsUserIdDelete: function (team_id, user_id, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'team_id' is not null or undefined
            if (team_id === null || team_id === undefined) {
                throw new RequiredError('team_id', 'Required parameter team_id was null or undefined when calling teamsTeamIdMembershipsUserIdDelete.');
            }
            // verify required parameter 'user_id' is not null or undefined
            if (user_id === null || user_id === undefined) {
                throw new RequiredError('user_id', 'Required parameter user_id was null or undefined when calling teamsTeamIdMembershipsUserIdDelete.');
            }
            var localVarPath = "/teams/{team_id}/memberships/{user_id}"
                .replace("{" + "team_id" + "}", encodeURIComponent(String(team_id)))
                .replace("{" + "user_id" + "}", encodeURIComponent(String(user_id)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }
            // authentication CognitoJwt required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("CognitoJwt", ["invotra/teams:write", "invotra/users:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication SessionCookieHeader required
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update information about a user\'s team membership.
         * @param {string} team_id The Invotra UUID of the team.
         * @param {string} user_id The Invotra UUID of the user.
         * @param {TeamMembershipCommonSchema} TeamMembershipCommonSchema
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsTeamIdMembershipsUserIdPut: function (team_id, user_id, TeamMembershipCommonSchema, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'team_id' is not null or undefined
            if (team_id === null || team_id === undefined) {
                throw new RequiredError('team_id', 'Required parameter team_id was null or undefined when calling teamsTeamIdMembershipsUserIdPut.');
            }
            // verify required parameter 'user_id' is not null or undefined
            if (user_id === null || user_id === undefined) {
                throw new RequiredError('user_id', 'Required parameter user_id was null or undefined when calling teamsTeamIdMembershipsUserIdPut.');
            }
            // verify required parameter 'TeamMembershipCommonSchema' is not null or undefined
            if (TeamMembershipCommonSchema === null || TeamMembershipCommonSchema === undefined) {
                throw new RequiredError('TeamMembershipCommonSchema', 'Required parameter TeamMembershipCommonSchema was null or undefined when calling teamsTeamIdMembershipsUserIdPut.');
            }
            var localVarPath = "/teams/{team_id}/memberships/{user_id}"
                .replace("{" + "team_id" + "}", encodeURIComponent(String(team_id)))
                .replace("{" + "user_id" + "}", encodeURIComponent(String(user_id)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }
            // authentication CognitoJwt required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("CognitoJwt", ["invotra/teams:write", "invotra/users:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication SessionCookieHeader required
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            var needsSerialization = (typeof TeamMembershipCommonSchema !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(TeamMembershipCommonSchema !== undefined ? TeamMembershipCommonSchema : {}) : (TeamMembershipCommonSchema || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update team information.
         * @param {string} team_id The Invotra UUID of the team.
         * @param {TeamSchema} TeamSchema
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsTeamIdPut: function (team_id, TeamSchema, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'team_id' is not null or undefined
            if (team_id === null || team_id === undefined) {
                throw new RequiredError('team_id', 'Required parameter team_id was null or undefined when calling teamsTeamIdPut.');
            }
            // verify required parameter 'TeamSchema' is not null or undefined
            if (TeamSchema === null || TeamSchema === undefined) {
                throw new RequiredError('TeamSchema', 'Required parameter TeamSchema was null or undefined when calling teamsTeamIdPut.');
            }
            var localVarPath = "/teams/{team_id}"
                .replace("{" + "team_id" + "}", encodeURIComponent(String(team_id)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }
            // authentication CognitoJwt required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("CognitoJwt", ["invotra/teams:write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication SessionCookieHeader required
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            var needsSerialization = (typeof TeamSchema !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(TeamSchema !== undefined ? TeamSchema : {}) : (TeamSchema || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * TeamsApi - functional programming interface
 * @export
 */
export var TeamsApiFp = function (configuration) {
    return {
        /**
         * Search for teams. An empty array is returned if no teams are found.
         * @param {string} external_id Filter by external ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsGet: function (external_id, options) {
            var localVarAxiosArgs = TeamsApiAxiosParamCreator(configuration).teamsGet(external_id, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = globalAxios; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Search for teams. An empty array is returned if no teams are found.
         * @param {string} [label] Filter by label. Matches on whole words.
         * @param {string} [autocomplete] Autocomplete term. Matches on team name, per letter, from the start of the word.
         * @param {string} [users_fulltext_search] Filter the list of teams to those that include users matching a search term. This is useful when you have already searched for users and want to refine your search by team (like a faceted search). Like the fulltext_search parameter of /users/search, this matches on whole words.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {number} [limit] The numbers of items to return.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsListGet: function (label, autocomplete, users_fulltext_search, offset, limit, options) {
            var localVarAxiosArgs = TeamsApiAxiosParamCreator(configuration).teamsListGet(label, autocomplete, users_fulltext_search, offset, limit, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = globalAxios; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Provision a new team.
         * @param {TeamSchemaCreate} TeamSchemaCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsPost: function (TeamSchemaCreate, options) {
            var localVarAxiosArgs = TeamsApiAxiosParamCreator(configuration).teamsPost(TeamSchemaCreate, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = globalAxios; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Remove team information
         * @param {string} team_id The Invotra UUID of the team.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsTeamIdDelete: function (team_id, options) {
            var localVarAxiosArgs = TeamsApiAxiosParamCreator(configuration).teamsTeamIdDelete(team_id, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = globalAxios; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get information about the team.
         * @param {string} team_id The Invotra UUID of the team.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsTeamIdGet: function (team_id, options) {
            var localVarAxiosArgs = TeamsApiAxiosParamCreator(configuration).teamsTeamIdGet(team_id, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = globalAxios; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get a list of team members.
         * @param {string} team_id The Invotra UUID of the team.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {number} [limit] The numbers of items to return.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsTeamIdMembershipsGet: function (team_id, offset, limit, options) {
            var localVarAxiosArgs = TeamsApiAxiosParamCreator(configuration).teamsTeamIdMembershipsGet(team_id, offset, limit, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = globalAxios; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Remove the user\'s membership of the team.
         * @param {string} team_id The Invotra UUID of the team.
         * @param {string} user_id The Invotra UUID of the user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsTeamIdMembershipsUserIdDelete: function (team_id, user_id, options) {
            var localVarAxiosArgs = TeamsApiAxiosParamCreator(configuration).teamsTeamIdMembershipsUserIdDelete(team_id, user_id, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = globalAxios; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update information about a user\'s team membership.
         * @param {string} team_id The Invotra UUID of the team.
         * @param {string} user_id The Invotra UUID of the user.
         * @param {TeamMembershipCommonSchema} TeamMembershipCommonSchema
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsTeamIdMembershipsUserIdPut: function (team_id, user_id, TeamMembershipCommonSchema, options) {
            var localVarAxiosArgs = TeamsApiAxiosParamCreator(configuration).teamsTeamIdMembershipsUserIdPut(team_id, user_id, TeamMembershipCommonSchema, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = globalAxios; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update team information.
         * @param {string} team_id The Invotra UUID of the team.
         * @param {TeamSchema} TeamSchema
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsTeamIdPut: function (team_id, TeamSchema, options) {
            var localVarAxiosArgs = TeamsApiAxiosParamCreator(configuration).teamsTeamIdPut(team_id, TeamSchema, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = globalAxios; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
/**
 * TeamsApi - factory interface
 * @export
 */
export var TeamsApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * Search for teams. An empty array is returned if no teams are found.
         * @param {string} external_id Filter by external ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsGet: function (external_id, options) {
            return TeamsApiFp(configuration).teamsGet(external_id, options)(axios, basePath);
        },
        /**
         * Search for teams. An empty array is returned if no teams are found.
         * @param {string} [label] Filter by label. Matches on whole words.
         * @param {string} [autocomplete] Autocomplete term. Matches on team name, per letter, from the start of the word.
         * @param {string} [users_fulltext_search] Filter the list of teams to those that include users matching a search term. This is useful when you have already searched for users and want to refine your search by team (like a faceted search). Like the fulltext_search parameter of /users/search, this matches on whole words.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {number} [limit] The numbers of items to return.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsListGet: function (label, autocomplete, users_fulltext_search, offset, limit, options) {
            return TeamsApiFp(configuration).teamsListGet(label, autocomplete, users_fulltext_search, offset, limit, options)(axios, basePath);
        },
        /**
         * Provision a new team.
         * @param {TeamSchemaCreate} TeamSchemaCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsPost: function (TeamSchemaCreate, options) {
            return TeamsApiFp(configuration).teamsPost(TeamSchemaCreate, options)(axios, basePath);
        },
        /**
         * Remove team information
         * @param {string} team_id The Invotra UUID of the team.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsTeamIdDelete: function (team_id, options) {
            return TeamsApiFp(configuration).teamsTeamIdDelete(team_id, options)(axios, basePath);
        },
        /**
         * Get information about the team.
         * @param {string} team_id The Invotra UUID of the team.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsTeamIdGet: function (team_id, options) {
            return TeamsApiFp(configuration).teamsTeamIdGet(team_id, options)(axios, basePath);
        },
        /**
         * Get a list of team members.
         * @param {string} team_id The Invotra UUID of the team.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {number} [limit] The numbers of items to return.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsTeamIdMembershipsGet: function (team_id, offset, limit, options) {
            return TeamsApiFp(configuration).teamsTeamIdMembershipsGet(team_id, offset, limit, options)(axios, basePath);
        },
        /**
         * Remove the user\'s membership of the team.
         * @param {string} team_id The Invotra UUID of the team.
         * @param {string} user_id The Invotra UUID of the user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsTeamIdMembershipsUserIdDelete: function (team_id, user_id, options) {
            return TeamsApiFp(configuration).teamsTeamIdMembershipsUserIdDelete(team_id, user_id, options)(axios, basePath);
        },
        /**
         * Update information about a user\'s team membership.
         * @param {string} team_id The Invotra UUID of the team.
         * @param {string} user_id The Invotra UUID of the user.
         * @param {TeamMembershipCommonSchema} TeamMembershipCommonSchema
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsTeamIdMembershipsUserIdPut: function (team_id, user_id, TeamMembershipCommonSchema, options) {
            return TeamsApiFp(configuration).teamsTeamIdMembershipsUserIdPut(team_id, user_id, TeamMembershipCommonSchema, options)(axios, basePath);
        },
        /**
         * Update team information.
         * @param {string} team_id The Invotra UUID of the team.
         * @param {TeamSchema} TeamSchema
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsTeamIdPut: function (team_id, TeamSchema, options) {
            return TeamsApiFp(configuration).teamsTeamIdPut(team_id, TeamSchema, options)(axios, basePath);
        },
    };
};
/**
 * TeamsApi - object-oriented interface
 * @export
 * @class TeamsApi
 * @extends {BaseAPI}
 */
var TeamsApi = /** @class */ (function (_super) {
    __extends(TeamsApi, _super);
    function TeamsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Search for teams. An empty array is returned if no teams are found.
     * @param {string} external_id Filter by external ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    TeamsApi.prototype.teamsGet = function (external_id, options) {
        return TeamsApiFp(this.configuration).teamsGet(external_id, options)(this.axios, this.basePath);
    };
    /**
     * Search for teams. An empty array is returned if no teams are found.
     * @param {string} [label] Filter by label. Matches on whole words.
     * @param {string} [autocomplete] Autocomplete term. Matches on team name, per letter, from the start of the word.
     * @param {string} [users_fulltext_search] Filter the list of teams to those that include users matching a search term. This is useful when you have already searched for users and want to refine your search by team (like a faceted search). Like the fulltext_search parameter of /users/search, this matches on whole words.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {number} [limit] The numbers of items to return.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    TeamsApi.prototype.teamsListGet = function (label, autocomplete, users_fulltext_search, offset, limit, options) {
        return TeamsApiFp(this.configuration).teamsListGet(label, autocomplete, users_fulltext_search, offset, limit, options)(this.axios, this.basePath);
    };
    /**
     * Provision a new team.
     * @param {TeamSchemaCreate} TeamSchemaCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    TeamsApi.prototype.teamsPost = function (TeamSchemaCreate, options) {
        return TeamsApiFp(this.configuration).teamsPost(TeamSchemaCreate, options)(this.axios, this.basePath);
    };
    /**
     * Remove team information
     * @param {string} team_id The Invotra UUID of the team.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    TeamsApi.prototype.teamsTeamIdDelete = function (team_id, options) {
        return TeamsApiFp(this.configuration).teamsTeamIdDelete(team_id, options)(this.axios, this.basePath);
    };
    /**
     * Get information about the team.
     * @param {string} team_id The Invotra UUID of the team.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    TeamsApi.prototype.teamsTeamIdGet = function (team_id, options) {
        return TeamsApiFp(this.configuration).teamsTeamIdGet(team_id, options)(this.axios, this.basePath);
    };
    /**
     * Get a list of team members.
     * @param {string} team_id The Invotra UUID of the team.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {number} [limit] The numbers of items to return.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    TeamsApi.prototype.teamsTeamIdMembershipsGet = function (team_id, offset, limit, options) {
        return TeamsApiFp(this.configuration).teamsTeamIdMembershipsGet(team_id, offset, limit, options)(this.axios, this.basePath);
    };
    /**
     * Remove the user\'s membership of the team.
     * @param {string} team_id The Invotra UUID of the team.
     * @param {string} user_id The Invotra UUID of the user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    TeamsApi.prototype.teamsTeamIdMembershipsUserIdDelete = function (team_id, user_id, options) {
        return TeamsApiFp(this.configuration).teamsTeamIdMembershipsUserIdDelete(team_id, user_id, options)(this.axios, this.basePath);
    };
    /**
     * Update information about a user\'s team membership.
     * @param {string} team_id The Invotra UUID of the team.
     * @param {string} user_id The Invotra UUID of the user.
     * @param {TeamMembershipCommonSchema} TeamMembershipCommonSchema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    TeamsApi.prototype.teamsTeamIdMembershipsUserIdPut = function (team_id, user_id, TeamMembershipCommonSchema, options) {
        return TeamsApiFp(this.configuration).teamsTeamIdMembershipsUserIdPut(team_id, user_id, TeamMembershipCommonSchema, options)(this.axios, this.basePath);
    };
    /**
     * Update team information.
     * @param {string} team_id The Invotra UUID of the team.
     * @param {TeamSchema} TeamSchema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    TeamsApi.prototype.teamsTeamIdPut = function (team_id, TeamSchema, options) {
        return TeamsApiFp(this.configuration).teamsTeamIdPut(team_id, TeamSchema, options)(this.axios, this.basePath);
    };
    return TeamsApi;
}(BaseAPI));
export { TeamsApi };
//# sourceMappingURL=teams-api.js.map