/**
 * Invotra API
 * In general most fields are optional for update (PUT) requests; you can leave them blank (pass an empty string / array / whatever as appropriate) to clear them, or omit the key to leave them unchanged.
 *
 * The version of the OpenAPI document: 0.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { GroupPollSchema } from '../model';
import { GroupPollSchemaCreate } from '../model';
import { InlineResponse20017 } from '../model';
import { SuccessfulPostResponseSchema } from '../model';
/**
 * GroupPollsApi - axios parameter creator
 * @export
 */
export declare const GroupPollsApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * Delete a group poll.
     * @param {string} group_poll_id The Invotra UUID of the group poll.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupPollsGroupPollIdDelete(group_poll_id: string, options?: any): RequestArgs;
    /**
     * Get information about the group poll.
     * @param {string} group_poll_id The Invotra UUID of the group poll.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupPollsGroupPollIdGet(group_poll_id: string, options?: any): RequestArgs;
    /**
     * Search for group polls. An empty array is returned if no group polls where found.
     * @param {string} [author_uuid] Filter on Invotra UUID of the author.
     * @param {string} [group_uuid] Filter on Invotra UUID of the group.
     * @param {string} [created_date] Filter on date created. Format: YYYY-MM-DD.
     * @param {string} [updated_date] Filter on date updated. Format: YYYY-MM-DD.
     * @param {string} [external_id] Filter by external ID.
     * @param {'timestamp_created' | 'timestamp_updated'} [sort] Field to sort by.
     * @param {'asc' | 'desc'} [order] Sort order.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {number} [limit] The numbers of items to return. If the value specified is more than the maximum, the result count will be limited to the maximum.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupPollsListGet(author_uuid?: string | undefined, group_uuid?: string | undefined, created_date?: string | undefined, updated_date?: string | undefined, external_id?: string | undefined, sort?: "timestamp_created" | "timestamp_updated" | undefined, order?: "asc" | "desc" | undefined, offset?: number | undefined, limit?: number | undefined, options?: any): RequestArgs;
    /**
     * Provision a new group poll.
     * @param {GroupPollSchemaCreate} GroupPollSchemaCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupPollsPost(GroupPollSchemaCreate: GroupPollSchemaCreate, options?: any): RequestArgs;
};
/**
 * GroupPollsApi - functional programming interface
 * @export
 */
export declare const GroupPollsApiFp: (configuration?: Configuration | undefined) => {
    /**
     * Delete a group poll.
     * @param {string} group_poll_id The Invotra UUID of the group poll.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupPollsGroupPollIdDelete(group_poll_id: string, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>;
    /**
     * Get information about the group poll.
     * @param {string} group_poll_id The Invotra UUID of the group poll.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupPollsGroupPollIdGet(group_poll_id: string, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<GroupPollSchema>;
    /**
     * Search for group polls. An empty array is returned if no group polls where found.
     * @param {string} [author_uuid] Filter on Invotra UUID of the author.
     * @param {string} [group_uuid] Filter on Invotra UUID of the group.
     * @param {string} [created_date] Filter on date created. Format: YYYY-MM-DD.
     * @param {string} [updated_date] Filter on date updated. Format: YYYY-MM-DD.
     * @param {string} [external_id] Filter by external ID.
     * @param {'timestamp_created' | 'timestamp_updated'} [sort] Field to sort by.
     * @param {'asc' | 'desc'} [order] Sort order.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {number} [limit] The numbers of items to return. If the value specified is more than the maximum, the result count will be limited to the maximum.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupPollsListGet(author_uuid?: string | undefined, group_uuid?: string | undefined, created_date?: string | undefined, updated_date?: string | undefined, external_id?: string | undefined, sort?: "timestamp_created" | "timestamp_updated" | undefined, order?: "asc" | "desc" | undefined, offset?: number | undefined, limit?: number | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<InlineResponse20017>;
    /**
     * Provision a new group poll.
     * @param {GroupPollSchemaCreate} GroupPollSchemaCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupPollsPost(GroupPollSchemaCreate: GroupPollSchemaCreate, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<SuccessfulPostResponseSchema>;
};
/**
 * GroupPollsApi - factory interface
 * @export
 */
export declare const GroupPollsApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     * Delete a group poll.
     * @param {string} group_poll_id The Invotra UUID of the group poll.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupPollsGroupPollIdDelete(group_poll_id: string, options?: any): AxiosPromise<void>;
    /**
     * Get information about the group poll.
     * @param {string} group_poll_id The Invotra UUID of the group poll.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupPollsGroupPollIdGet(group_poll_id: string, options?: any): AxiosPromise<GroupPollSchema>;
    /**
     * Search for group polls. An empty array is returned if no group polls where found.
     * @param {string} [author_uuid] Filter on Invotra UUID of the author.
     * @param {string} [group_uuid] Filter on Invotra UUID of the group.
     * @param {string} [created_date] Filter on date created. Format: YYYY-MM-DD.
     * @param {string} [updated_date] Filter on date updated. Format: YYYY-MM-DD.
     * @param {string} [external_id] Filter by external ID.
     * @param {'timestamp_created' | 'timestamp_updated'} [sort] Field to sort by.
     * @param {'asc' | 'desc'} [order] Sort order.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {number} [limit] The numbers of items to return. If the value specified is more than the maximum, the result count will be limited to the maximum.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupPollsListGet(author_uuid?: string | undefined, group_uuid?: string | undefined, created_date?: string | undefined, updated_date?: string | undefined, external_id?: string | undefined, sort?: "timestamp_created" | "timestamp_updated" | undefined, order?: "asc" | "desc" | undefined, offset?: number | undefined, limit?: number | undefined, options?: any): AxiosPromise<InlineResponse20017>;
    /**
     * Provision a new group poll.
     * @param {GroupPollSchemaCreate} GroupPollSchemaCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupPollsPost(GroupPollSchemaCreate: GroupPollSchemaCreate, options?: any): AxiosPromise<SuccessfulPostResponseSchema>;
};
/**
 * GroupPollsApi - interface
 * @export
 * @interface GroupPollsApi
 */
export interface GroupPollsApiInterface {
    /**
     * Delete a group poll.
     * @param {string} group_poll_id The Invotra UUID of the group poll.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupPollsApiInterface
     */
    groupPollsGroupPollIdDelete(group_poll_id: string, options?: any): AxiosPromise<void>;
    /**
     * Get information about the group poll.
     * @param {string} group_poll_id The Invotra UUID of the group poll.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupPollsApiInterface
     */
    groupPollsGroupPollIdGet(group_poll_id: string, options?: any): AxiosPromise<GroupPollSchema>;
    /**
     * Search for group polls. An empty array is returned if no group polls where found.
     * @param {string} [author_uuid] Filter on Invotra UUID of the author.
     * @param {string} [group_uuid] Filter on Invotra UUID of the group.
     * @param {string} [created_date] Filter on date created. Format: YYYY-MM-DD.
     * @param {string} [updated_date] Filter on date updated. Format: YYYY-MM-DD.
     * @param {string} [external_id] Filter by external ID.
     * @param {'timestamp_created' | 'timestamp_updated'} [sort] Field to sort by.
     * @param {'asc' | 'desc'} [order] Sort order.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {number} [limit] The numbers of items to return. If the value specified is more than the maximum, the result count will be limited to the maximum.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupPollsApiInterface
     */
    groupPollsListGet(author_uuid?: string, group_uuid?: string, created_date?: string, updated_date?: string, external_id?: string, sort?: 'timestamp_created' | 'timestamp_updated', order?: 'asc' | 'desc', offset?: number, limit?: number, options?: any): AxiosPromise<InlineResponse20017>;
    /**
     * Provision a new group poll.
     * @param {GroupPollSchemaCreate} GroupPollSchemaCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupPollsApiInterface
     */
    groupPollsPost(GroupPollSchemaCreate: GroupPollSchemaCreate, options?: any): AxiosPromise<SuccessfulPostResponseSchema>;
}
/**
 * GroupPollsApi - object-oriented interface
 * @export
 * @class GroupPollsApi
 * @extends {BaseAPI}
 */
export declare class GroupPollsApi extends BaseAPI implements GroupPollsApiInterface {
    /**
     * Delete a group poll.
     * @param {string} group_poll_id The Invotra UUID of the group poll.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupPollsApi
     */
    groupPollsGroupPollIdDelete(group_poll_id: string, options?: any): AxiosPromise<void>;
    /**
     * Get information about the group poll.
     * @param {string} group_poll_id The Invotra UUID of the group poll.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupPollsApi
     */
    groupPollsGroupPollIdGet(group_poll_id: string, options?: any): AxiosPromise<GroupPollSchema>;
    /**
     * Search for group polls. An empty array is returned if no group polls where found.
     * @param {string} [author_uuid] Filter on Invotra UUID of the author.
     * @param {string} [group_uuid] Filter on Invotra UUID of the group.
     * @param {string} [created_date] Filter on date created. Format: YYYY-MM-DD.
     * @param {string} [updated_date] Filter on date updated. Format: YYYY-MM-DD.
     * @param {string} [external_id] Filter by external ID.
     * @param {'timestamp_created' | 'timestamp_updated'} [sort] Field to sort by.
     * @param {'asc' | 'desc'} [order] Sort order.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {number} [limit] The numbers of items to return. If the value specified is more than the maximum, the result count will be limited to the maximum.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupPollsApi
     */
    groupPollsListGet(author_uuid?: string, group_uuid?: string, created_date?: string, updated_date?: string, external_id?: string, sort?: 'timestamp_created' | 'timestamp_updated', order?: 'asc' | 'desc', offset?: number, limit?: number, options?: any): AxiosPromise<InlineResponse20017>;
    /**
     * Provision a new group poll.
     * @param {GroupPollSchemaCreate} GroupPollSchemaCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupPollsApi
     */
    groupPollsPost(GroupPollSchemaCreate: GroupPollSchemaCreate, options?: any): AxiosPromise<SuccessfulPostResponseSchema>;
}
