/**
 * InvotraAPI
 * In general most fields are optional for update (PUT) requests; you can leave them blank (pass an empty string / array / whatever as appropriate) to clear them, or omit the key to leave them unchanged.
 *
 * The version of the OpenAPI document: 0.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { CommonStatusSchema } from '../model';
import { InlineResponse2002 } from '../model';
import { InlineResponse2003 } from '../model';
import { InlineResponse2004 } from '../model';
import { InlineResponse2005 } from '../model';
import { InlineResponse2006 } from '../model';
import { InlineResponse2007 } from '../model';
import { InlineResponse2008 } from '../model';
import { SuccessfulPostResponseSchema } from '../model';
import { UserMetricsAccessedSchema } from '../model';
import { UserMetricsProfilesSchema } from '../model';
import { UserSchema } from '../model';
import { UserSchemaCreate } from '../model';
import { UserSchemaUpdate } from '../model';
import { UserSearchSchema } from '../model';
import { UuidListSchema } from '../model';
/**
 * UsersApi - axios parameter creator
 * @export
 */
export declare const UsersApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * Search for users. Returns list of uuids.
     * @param {string} external_id Filter by external ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersGet(external_id: string, options?: any): RequestArgs;
    /**
     * Get the current user\'s information.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersMeGet(options?: any): RequestArgs;
    /**
     * Autocomplete names and email addresses for @-mentioning. The text parameter matches against the start of the user\'s full name (forename surname or surname forename) or email address. Full user objects are returned. The list may optionally be filtered by group to show only members of the group, to allow completing only users that can be mentioned when composing a group post. You can not filter by members of a private or secret group unless you are a member yourself. Webmasters can always be mentioned, so they are always matched even if they are not members of the group being filtered. Redacted users are never matched.
     * @summary Autocomplete names and email addresses for @-mentioning.
     * @param {string} text Text to match against the start of the user\&#39;s full name or email address.
     * @param {string} [group] UUID of the group to filter by.
     * @param {number} [limit] The numbers of items to return. If the value specified is more than the maximum, the result count will be limited to the maximum.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersMentionGet(text: string, group?: string | undefined, limit?: number | undefined, options?: any): RequestArgs;
    /**
     * Returns a count of users who accessed the site on 4 or more days within a given calendar month.
     * @param {string} month Filter by calendar month. Format: YYYY-MM
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersMetricsAccessedGet(month: string, options?: any): RequestArgs;
    /**
     * Returns the total count of active users (i.e. not blocked) profiles matching various conditions.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersMetricsProfilesGet(options?: any): RequestArgs;
    /**
     * Provision a new user in Invotra.
     * @param {UserSchemaCreate} UserSchemaCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersPost(UserSchemaCreate: import("../model").UserSchemaCommon, options?: any): RequestArgs;
    /**
     * Search for users. Returns user snippets. If there are no result, an empty array is returned.
     * @param {string} [fulltext_search] Search term. Matches on whole words.
     * @param {string} [team] Filter by team.
     * @param {string} [location] Filter by location.
     * @param {string} [group] Filter by group.
     * @param {'firstname' | 'surname' | 'updated' | 'relevance'} [sort] Field to sort by
     * @param {'asc' | 'desc'} [order] Sort order
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {number} [limit] The numbers of items to return. If the value specified is more than the maximum, the result count will be limited to the maximum.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersSearchGet(fulltext_search?: string | undefined, team?: string | undefined, location?: string | undefined, group?: string | undefined, sort?: "relevance" | "firstname" | "surname" | "updated" | undefined, order?: "asc" | "desc" | undefined, offset?: number | undefined, limit?: number | undefined, options?: any): RequestArgs;
    /**
     * Return the user\'s activity feed.
     * @param {string} user_id The Invotra UUID of the user.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {number} [limit] The numbers of items to return. If the value specified is more than the maximum, the result count will be limited to the maximum.
     * @param {boolean} [app_feeds_only] Filter the feed for the mobile app. Returns only group related messages.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIdActivityGet(user_id: string, offset?: number | undefined, limit?: number | undefined, app_feeds_only?: boolean | undefined, options?: any): RequestArgs;
    /**
     * Stop following a user.
     * @param {string} user_id The Invotra UUID of the user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIdFollowDelete(user_id: string, options?: any): RequestArgs;
    /**
     *
     * @param {string} user_id The Invotra UUID of the user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIdFollowGet(user_id: string, options?: any): RequestArgs;
    /**
     * Follow a user as another user.
     * @param {string} user_id The Invotra UUID of the user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIdFollowPut(user_id: string, options?: any): RequestArgs;
    /**
     * List of who a user is following.
     * @param {string} user_id The Invotra UUID of the user.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {number} [limit] The numbers of items to return. If the value specified is more than the maximum, the result count will be limited to the maximum.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIdFollowingGet(user_id: string, offset?: number | undefined, limit?: number | undefined, options?: any): RequestArgs;
    /**
     * Get the user\'s information.
     * @param {string} user_id The Invotra UUID of the user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIdGet(user_id: string, options?: any): RequestArgs;
    /**
     * List a user\'s groups.
     * @param {string} user_id The Invotra UUID of the user.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {number} [limit] The numbers of items to return. If the value specified is more than the maximum, the result count will be limited to the maximum.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIdGroupsGet(user_id: string, offset?: number | undefined, limit?: number | undefined, options?: any): RequestArgs;
    /**
     * List the user\'s job roles.
     * @param {string} user_id The Invotra UUID of the user.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {number} [limit] The numbers of items to return. If the value specified is more than the maximum, the result count will be limited to the maximum.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIdJobRolesGet(user_id: string, offset?: number | undefined, limit?: number | undefined, options?: any): RequestArgs;
    /**
     * Remove a job role from a user.
     * @param {string} user_id The Invotra UUID of the user.
     * @param {string} job_role_id The Invotra UUID of the job role.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIdJobRolesJobRoleIdDelete(user_id: string, job_role_id: string, options?: any): RequestArgs;
    /**
     * Add a job role to a user.
     * @param {string} user_id The Invotra UUID of the user.
     * @param {string} job_role_id The Invotra UUID of the job role.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIdJobRolesJobRoleIdPut(user_id: string, job_role_id: string, options?: any): RequestArgs;
    /**
     * List the user\'s locations.
     * @param {string} user_id The Invotra UUID of the user.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {number} [limit] The numbers of items to return. If the value specified is more than the maximum, the result count will be limited to the maximum.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIdLocationsGet(user_id: string, offset?: number | undefined, limit?: number | undefined, options?: any): RequestArgs;
    /**
     * Remove a location from a user.
     * @param {string} user_id The Invotra UUID of the user.
     * @param {string} location_id The Invotra UUID of the location.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIdLocationsLocationIdDelete(user_id: string, location_id: string, options?: any): RequestArgs;
    /**
     * Add a location to a user.
     * @param {string} user_id The Invotra UUID of the user.
     * @param {string} location_id The Invotra UUID of the location.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIdLocationsLocationIdPut(user_id: string, location_id: string, options?: any): RequestArgs;
    /**
     * Update the user\'s information.
     * @param {string} user_id The Invotra UUID of the user.
     * @param {UserSchemaUpdate} UserSchemaUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIdPut(user_id: string, UserSchemaUpdate: import("../model").UserSchemaCommon, options?: any): RequestArgs;
    /**
     * List a user\'s teams
     * @param {string} user_id The Invotra UUID of the user.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {number} [limit] The numbers of items to return. If the value specified is more than the maximum, the result count will be limited to the maximum.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIdTeamsGet(user_id: string, offset?: number | undefined, limit?: number | undefined, options?: any): RequestArgs;
};
/**
 * UsersApi - functional programming interface
 * @export
 */
export declare const UsersApiFp: (configuration?: Configuration | undefined) => {
    /**
     * Search for users. Returns list of uuids.
     * @param {string} external_id Filter by external ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersGet(external_id: string, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<UuidListSchema>;
    /**
     * Get the current user\'s information.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersMeGet(options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<import("../model").UserSchemaCommon>;
    /**
     * Autocomplete names and email addresses for @-mentioning. The text parameter matches against the start of the user\'s full name (forename surname or surname forename) or email address. Full user objects are returned. The list may optionally be filtered by group to show only members of the group, to allow completing only users that can be mentioned when composing a group post. You can not filter by members of a private or secret group unless you are a member yourself. Webmasters can always be mentioned, so they are always matched even if they are not members of the group being filtered. Redacted users are never matched.
     * @summary Autocomplete names and email addresses for @-mentioning.
     * @param {string} text Text to match against the start of the user\&#39;s full name or email address.
     * @param {string} [group] UUID of the group to filter by.
     * @param {number} [limit] The numbers of items to return. If the value specified is more than the maximum, the result count will be limited to the maximum.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersMentionGet(text: string, group?: string | undefined, limit?: number | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<UserSearchSchema[]>;
    /**
     * Returns a count of users who accessed the site on 4 or more days within a given calendar month.
     * @param {string} month Filter by calendar month. Format: YYYY-MM
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersMetricsAccessedGet(month: string, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<UserMetricsAccessedSchema>;
    /**
     * Returns the total count of active users (i.e. not blocked) profiles matching various conditions.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersMetricsProfilesGet(options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<UserMetricsProfilesSchema>;
    /**
     * Provision a new user in Invotra.
     * @param {UserSchemaCreate} UserSchemaCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersPost(UserSchemaCreate: import("../model").UserSchemaCommon, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<SuccessfulPostResponseSchema>;
    /**
     * Search for users. Returns user snippets. If there are no result, an empty array is returned.
     * @param {string} [fulltext_search] Search term. Matches on whole words.
     * @param {string} [team] Filter by team.
     * @param {string} [location] Filter by location.
     * @param {string} [group] Filter by group.
     * @param {'firstname' | 'surname' | 'updated' | 'relevance'} [sort] Field to sort by
     * @param {'asc' | 'desc'} [order] Sort order
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {number} [limit] The numbers of items to return. If the value specified is more than the maximum, the result count will be limited to the maximum.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersSearchGet(fulltext_search?: string | undefined, team?: string | undefined, location?: string | undefined, group?: string | undefined, sort?: "relevance" | "firstname" | "surname" | "updated" | undefined, order?: "asc" | "desc" | undefined, offset?: number | undefined, limit?: number | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<InlineResponse2002>;
    /**
     * Return the user\'s activity feed.
     * @param {string} user_id The Invotra UUID of the user.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {number} [limit] The numbers of items to return. If the value specified is more than the maximum, the result count will be limited to the maximum.
     * @param {boolean} [app_feeds_only] Filter the feed for the mobile app. Returns only group related messages.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIdActivityGet(user_id: string, offset?: number | undefined, limit?: number | undefined, app_feeds_only?: boolean | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<InlineResponse2003>;
    /**
     * Stop following a user.
     * @param {string} user_id The Invotra UUID of the user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIdFollowDelete(user_id: string, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>;
    /**
     *
     * @param {string} user_id The Invotra UUID of the user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIdFollowGet(user_id: string, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<CommonStatusSchema>;
    /**
     * Follow a user as another user.
     * @param {string} user_id The Invotra UUID of the user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIdFollowPut(user_id: string, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>;
    /**
     * List of who a user is following.
     * @param {string} user_id The Invotra UUID of the user.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {number} [limit] The numbers of items to return. If the value specified is more than the maximum, the result count will be limited to the maximum.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIdFollowingGet(user_id: string, offset?: number | undefined, limit?: number | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<InlineResponse2007>;
    /**
     * Get the user\'s information.
     * @param {string} user_id The Invotra UUID of the user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIdGet(user_id: string, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<import("../model").UserSchemaCommon>;
    /**
     * List a user\'s groups.
     * @param {string} user_id The Invotra UUID of the user.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {number} [limit] The numbers of items to return. If the value specified is more than the maximum, the result count will be limited to the maximum.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIdGroupsGet(user_id: string, offset?: number | undefined, limit?: number | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<InlineResponse2008>;
    /**
     * List the user\'s job roles.
     * @param {string} user_id The Invotra UUID of the user.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {number} [limit] The numbers of items to return. If the value specified is more than the maximum, the result count will be limited to the maximum.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIdJobRolesGet(user_id: string, offset?: number | undefined, limit?: number | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<InlineResponse2004>;
    /**
     * Remove a job role from a user.
     * @param {string} user_id The Invotra UUID of the user.
     * @param {string} job_role_id The Invotra UUID of the job role.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIdJobRolesJobRoleIdDelete(user_id: string, job_role_id: string, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>;
    /**
     * Add a job role to a user.
     * @param {string} user_id The Invotra UUID of the user.
     * @param {string} job_role_id The Invotra UUID of the job role.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIdJobRolesJobRoleIdPut(user_id: string, job_role_id: string, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>;
    /**
     * List the user\'s locations.
     * @param {string} user_id The Invotra UUID of the user.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {number} [limit] The numbers of items to return. If the value specified is more than the maximum, the result count will be limited to the maximum.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIdLocationsGet(user_id: string, offset?: number | undefined, limit?: number | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<InlineResponse2005>;
    /**
     * Remove a location from a user.
     * @param {string} user_id The Invotra UUID of the user.
     * @param {string} location_id The Invotra UUID of the location.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIdLocationsLocationIdDelete(user_id: string, location_id: string, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>;
    /**
     * Add a location to a user.
     * @param {string} user_id The Invotra UUID of the user.
     * @param {string} location_id The Invotra UUID of the location.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIdLocationsLocationIdPut(user_id: string, location_id: string, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>;
    /**
     * Update the user\'s information.
     * @param {string} user_id The Invotra UUID of the user.
     * @param {UserSchemaUpdate} UserSchemaUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIdPut(user_id: string, UserSchemaUpdate: import("../model").UserSchemaCommon, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>;
    /**
     * List a user\'s teams
     * @param {string} user_id The Invotra UUID of the user.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {number} [limit] The numbers of items to return. If the value specified is more than the maximum, the result count will be limited to the maximum.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIdTeamsGet(user_id: string, offset?: number | undefined, limit?: number | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<InlineResponse2006>;
};
/**
 * UsersApi - factory interface
 * @export
 */
export declare const UsersApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     * Search for users. Returns list of uuids.
     * @param {string} external_id Filter by external ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersGet(external_id: string, options?: any): AxiosPromise<UuidListSchema>;
    /**
     * Get the current user\'s information.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersMeGet(options?: any): AxiosPromise<import("../model").UserSchemaCommon>;
    /**
     * Autocomplete names and email addresses for @-mentioning. The text parameter matches against the start of the user\'s full name (forename surname or surname forename) or email address. Full user objects are returned. The list may optionally be filtered by group to show only members of the group, to allow completing only users that can be mentioned when composing a group post. You can not filter by members of a private or secret group unless you are a member yourself. Webmasters can always be mentioned, so they are always matched even if they are not members of the group being filtered. Redacted users are never matched.
     * @summary Autocomplete names and email addresses for @-mentioning.
     * @param {string} text Text to match against the start of the user\&#39;s full name or email address.
     * @param {string} [group] UUID of the group to filter by.
     * @param {number} [limit] The numbers of items to return. If the value specified is more than the maximum, the result count will be limited to the maximum.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersMentionGet(text: string, group?: string | undefined, limit?: number | undefined, options?: any): AxiosPromise<UserSearchSchema[]>;
    /**
     * Returns a count of users who accessed the site on 4 or more days within a given calendar month.
     * @param {string} month Filter by calendar month. Format: YYYY-MM
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersMetricsAccessedGet(month: string, options?: any): AxiosPromise<UserMetricsAccessedSchema>;
    /**
     * Returns the total count of active users (i.e. not blocked) profiles matching various conditions.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersMetricsProfilesGet(options?: any): AxiosPromise<UserMetricsProfilesSchema>;
    /**
     * Provision a new user in Invotra.
     * @param {UserSchemaCreate} UserSchemaCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersPost(UserSchemaCreate: import("../model").UserSchemaCommon, options?: any): AxiosPromise<SuccessfulPostResponseSchema>;
    /**
     * Search for users. Returns user snippets. If there are no result, an empty array is returned.
     * @param {string} [fulltext_search] Search term. Matches on whole words.
     * @param {string} [team] Filter by team.
     * @param {string} [location] Filter by location.
     * @param {string} [group] Filter by group.
     * @param {'firstname' | 'surname' | 'updated' | 'relevance'} [sort] Field to sort by
     * @param {'asc' | 'desc'} [order] Sort order
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {number} [limit] The numbers of items to return. If the value specified is more than the maximum, the result count will be limited to the maximum.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersSearchGet(fulltext_search?: string | undefined, team?: string | undefined, location?: string | undefined, group?: string | undefined, sort?: "relevance" | "firstname" | "surname" | "updated" | undefined, order?: "asc" | "desc" | undefined, offset?: number | undefined, limit?: number | undefined, options?: any): AxiosPromise<InlineResponse2002>;
    /**
     * Return the user\'s activity feed.
     * @param {string} user_id The Invotra UUID of the user.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {number} [limit] The numbers of items to return. If the value specified is more than the maximum, the result count will be limited to the maximum.
     * @param {boolean} [app_feeds_only] Filter the feed for the mobile app. Returns only group related messages.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIdActivityGet(user_id: string, offset?: number | undefined, limit?: number | undefined, app_feeds_only?: boolean | undefined, options?: any): AxiosPromise<InlineResponse2003>;
    /**
     * Stop following a user.
     * @param {string} user_id The Invotra UUID of the user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIdFollowDelete(user_id: string, options?: any): AxiosPromise<void>;
    /**
     *
     * @param {string} user_id The Invotra UUID of the user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIdFollowGet(user_id: string, options?: any): AxiosPromise<CommonStatusSchema>;
    /**
     * Follow a user as another user.
     * @param {string} user_id The Invotra UUID of the user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIdFollowPut(user_id: string, options?: any): AxiosPromise<void>;
    /**
     * List of who a user is following.
     * @param {string} user_id The Invotra UUID of the user.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {number} [limit] The numbers of items to return. If the value specified is more than the maximum, the result count will be limited to the maximum.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIdFollowingGet(user_id: string, offset?: number | undefined, limit?: number | undefined, options?: any): AxiosPromise<InlineResponse2007>;
    /**
     * Get the user\'s information.
     * @param {string} user_id The Invotra UUID of the user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIdGet(user_id: string, options?: any): AxiosPromise<import("../model").UserSchemaCommon>;
    /**
     * List a user\'s groups.
     * @param {string} user_id The Invotra UUID of the user.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {number} [limit] The numbers of items to return. If the value specified is more than the maximum, the result count will be limited to the maximum.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIdGroupsGet(user_id: string, offset?: number | undefined, limit?: number | undefined, options?: any): AxiosPromise<InlineResponse2008>;
    /**
     * List the user\'s job roles.
     * @param {string} user_id The Invotra UUID of the user.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {number} [limit] The numbers of items to return. If the value specified is more than the maximum, the result count will be limited to the maximum.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIdJobRolesGet(user_id: string, offset?: number | undefined, limit?: number | undefined, options?: any): AxiosPromise<InlineResponse2004>;
    /**
     * Remove a job role from a user.
     * @param {string} user_id The Invotra UUID of the user.
     * @param {string} job_role_id The Invotra UUID of the job role.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIdJobRolesJobRoleIdDelete(user_id: string, job_role_id: string, options?: any): AxiosPromise<void>;
    /**
     * Add a job role to a user.
     * @param {string} user_id The Invotra UUID of the user.
     * @param {string} job_role_id The Invotra UUID of the job role.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIdJobRolesJobRoleIdPut(user_id: string, job_role_id: string, options?: any): AxiosPromise<void>;
    /**
     * List the user\'s locations.
     * @param {string} user_id The Invotra UUID of the user.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {number} [limit] The numbers of items to return. If the value specified is more than the maximum, the result count will be limited to the maximum.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIdLocationsGet(user_id: string, offset?: number | undefined, limit?: number | undefined, options?: any): AxiosPromise<InlineResponse2005>;
    /**
     * Remove a location from a user.
     * @param {string} user_id The Invotra UUID of the user.
     * @param {string} location_id The Invotra UUID of the location.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIdLocationsLocationIdDelete(user_id: string, location_id: string, options?: any): AxiosPromise<void>;
    /**
     * Add a location to a user.
     * @param {string} user_id The Invotra UUID of the user.
     * @param {string} location_id The Invotra UUID of the location.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIdLocationsLocationIdPut(user_id: string, location_id: string, options?: any): AxiosPromise<void>;
    /**
     * Update the user\'s information.
     * @param {string} user_id The Invotra UUID of the user.
     * @param {UserSchemaUpdate} UserSchemaUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIdPut(user_id: string, UserSchemaUpdate: import("../model").UserSchemaCommon, options?: any): AxiosPromise<void>;
    /**
     * List a user\'s teams
     * @param {string} user_id The Invotra UUID of the user.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {number} [limit] The numbers of items to return. If the value specified is more than the maximum, the result count will be limited to the maximum.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIdTeamsGet(user_id: string, offset?: number | undefined, limit?: number | undefined, options?: any): AxiosPromise<InlineResponse2006>;
};
/**
 * UsersApi - interface
 * @export
 * @interface UsersApi
 */
export interface UsersApiInterface {
    /**
     * Search for users. Returns list of uuids.
     * @param {string} external_id Filter by external ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    usersGet(external_id: string, options?: any): AxiosPromise<UuidListSchema>;
    /**
     * Get the current user\'s information.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    usersMeGet(options?: any): AxiosPromise<UserSchema>;
    /**
     * Autocomplete names and email addresses for @-mentioning. The text parameter matches against the start of the user\'s full name (forename surname or surname forename) or email address. Full user objects are returned. The list may optionally be filtered by group to show only members of the group, to allow completing only users that can be mentioned when composing a group post. You can not filter by members of a private or secret group unless you are a member yourself. Webmasters can always be mentioned, so they are always matched even if they are not members of the group being filtered. Redacted users are never matched.
     * @summary Autocomplete names and email addresses for @-mentioning.
     * @param {string} text Text to match against the start of the user\&#39;s full name or email address.
     * @param {string} [group] UUID of the group to filter by.
     * @param {number} [limit] The numbers of items to return. If the value specified is more than the maximum, the result count will be limited to the maximum.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    usersMentionGet(text: string, group?: string, limit?: number, options?: any): AxiosPromise<Array<UserSearchSchema>>;
    /**
     * Returns a count of users who accessed the site on 4 or more days within a given calendar month.
     * @param {string} month Filter by calendar month. Format: YYYY-MM
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    usersMetricsAccessedGet(month: string, options?: any): AxiosPromise<UserMetricsAccessedSchema>;
    /**
     * Returns the total count of active users (i.e. not blocked) profiles matching various conditions.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    usersMetricsProfilesGet(options?: any): AxiosPromise<UserMetricsProfilesSchema>;
    /**
     * Provision a new user in Invotra.
     * @param {UserSchemaCreate} UserSchemaCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    usersPost(UserSchemaCreate: UserSchemaCreate, options?: any): AxiosPromise<SuccessfulPostResponseSchema>;
    /**
     * Search for users. Returns user snippets. If there are no result, an empty array is returned.
     * @param {string} [fulltext_search] Search term. Matches on whole words.
     * @param {string} [team] Filter by team.
     * @param {string} [location] Filter by location.
     * @param {string} [group] Filter by group.
     * @param {'firstname' | 'surname' | 'updated' | 'relevance'} [sort] Field to sort by
     * @param {'asc' | 'desc'} [order] Sort order
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {number} [limit] The numbers of items to return. If the value specified is more than the maximum, the result count will be limited to the maximum.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    usersSearchGet(fulltext_search?: string, team?: string, location?: string, group?: string, sort?: 'firstname' | 'surname' | 'updated' | 'relevance', order?: 'asc' | 'desc', offset?: number, limit?: number, options?: any): AxiosPromise<InlineResponse2002>;
    /**
     * Return the user\'s activity feed.
     * @param {string} user_id The Invotra UUID of the user.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {number} [limit] The numbers of items to return. If the value specified is more than the maximum, the result count will be limited to the maximum.
     * @param {boolean} [app_feeds_only] Filter the feed for the mobile app. Returns only group related messages.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    usersUserIdActivityGet(user_id: string, offset?: number, limit?: number, app_feeds_only?: boolean, options?: any): AxiosPromise<InlineResponse2003>;
    /**
     * Stop following a user.
     * @param {string} user_id The Invotra UUID of the user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    usersUserIdFollowDelete(user_id: string, options?: any): AxiosPromise<void>;
    /**
     *
     * @param {string} user_id The Invotra UUID of the user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    usersUserIdFollowGet(user_id: string, options?: any): AxiosPromise<CommonStatusSchema>;
    /**
     * Follow a user as another user.
     * @param {string} user_id The Invotra UUID of the user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    usersUserIdFollowPut(user_id: string, options?: any): AxiosPromise<void>;
    /**
     * List of who a user is following.
     * @param {string} user_id The Invotra UUID of the user.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {number} [limit] The numbers of items to return. If the value specified is more than the maximum, the result count will be limited to the maximum.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    usersUserIdFollowingGet(user_id: string, offset?: number, limit?: number, options?: any): AxiosPromise<InlineResponse2007>;
    /**
     * Get the user\'s information.
     * @param {string} user_id The Invotra UUID of the user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    usersUserIdGet(user_id: string, options?: any): AxiosPromise<UserSchema>;
    /**
     * List a user\'s groups.
     * @param {string} user_id The Invotra UUID of the user.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {number} [limit] The numbers of items to return. If the value specified is more than the maximum, the result count will be limited to the maximum.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    usersUserIdGroupsGet(user_id: string, offset?: number, limit?: number, options?: any): AxiosPromise<InlineResponse2008>;
    /**
     * List the user\'s job roles.
     * @param {string} user_id The Invotra UUID of the user.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {number} [limit] The numbers of items to return. If the value specified is more than the maximum, the result count will be limited to the maximum.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    usersUserIdJobRolesGet(user_id: string, offset?: number, limit?: number, options?: any): AxiosPromise<InlineResponse2004>;
    /**
     * Remove a job role from a user.
     * @param {string} user_id The Invotra UUID of the user.
     * @param {string} job_role_id The Invotra UUID of the job role.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    usersUserIdJobRolesJobRoleIdDelete(user_id: string, job_role_id: string, options?: any): AxiosPromise<void>;
    /**
     * Add a job role to a user.
     * @param {string} user_id The Invotra UUID of the user.
     * @param {string} job_role_id The Invotra UUID of the job role.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    usersUserIdJobRolesJobRoleIdPut(user_id: string, job_role_id: string, options?: any): AxiosPromise<void>;
    /**
     * List the user\'s locations.
     * @param {string} user_id The Invotra UUID of the user.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {number} [limit] The numbers of items to return. If the value specified is more than the maximum, the result count will be limited to the maximum.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    usersUserIdLocationsGet(user_id: string, offset?: number, limit?: number, options?: any): AxiosPromise<InlineResponse2005>;
    /**
     * Remove a location from a user.
     * @param {string} user_id The Invotra UUID of the user.
     * @param {string} location_id The Invotra UUID of the location.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    usersUserIdLocationsLocationIdDelete(user_id: string, location_id: string, options?: any): AxiosPromise<void>;
    /**
     * Add a location to a user.
     * @param {string} user_id The Invotra UUID of the user.
     * @param {string} location_id The Invotra UUID of the location.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    usersUserIdLocationsLocationIdPut(user_id: string, location_id: string, options?: any): AxiosPromise<void>;
    /**
     * Update the user\'s information.
     * @param {string} user_id The Invotra UUID of the user.
     * @param {UserSchemaUpdate} UserSchemaUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    usersUserIdPut(user_id: string, UserSchemaUpdate: UserSchemaUpdate, options?: any): AxiosPromise<void>;
    /**
     * List a user\'s teams
     * @param {string} user_id The Invotra UUID of the user.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {number} [limit] The numbers of items to return. If the value specified is more than the maximum, the result count will be limited to the maximum.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    usersUserIdTeamsGet(user_id: string, offset?: number, limit?: number, options?: any): AxiosPromise<InlineResponse2006>;
}
/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export declare class UsersApi extends BaseAPI implements UsersApiInterface {
    /**
     * Search for users. Returns list of uuids.
     * @param {string} external_id Filter by external ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    usersGet(external_id: string, options?: any): AxiosPromise<UuidListSchema>;
    /**
     * Get the current user\'s information.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    usersMeGet(options?: any): AxiosPromise<import("../model").UserSchemaCommon>;
    /**
     * Autocomplete names and email addresses for @-mentioning. The text parameter matches against the start of the user\'s full name (forename surname or surname forename) or email address. Full user objects are returned. The list may optionally be filtered by group to show only members of the group, to allow completing only users that can be mentioned when composing a group post. You can not filter by members of a private or secret group unless you are a member yourself. Webmasters can always be mentioned, so they are always matched even if they are not members of the group being filtered. Redacted users are never matched.
     * @summary Autocomplete names and email addresses for @-mentioning.
     * @param {string} text Text to match against the start of the user\&#39;s full name or email address.
     * @param {string} [group] UUID of the group to filter by.
     * @param {number} [limit] The numbers of items to return. If the value specified is more than the maximum, the result count will be limited to the maximum.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    usersMentionGet(text: string, group?: string, limit?: number, options?: any): AxiosPromise<UserSearchSchema[]>;
    /**
     * Returns a count of users who accessed the site on 4 or more days within a given calendar month.
     * @param {string} month Filter by calendar month. Format: YYYY-MM
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    usersMetricsAccessedGet(month: string, options?: any): AxiosPromise<UserMetricsAccessedSchema>;
    /**
     * Returns the total count of active users (i.e. not blocked) profiles matching various conditions.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    usersMetricsProfilesGet(options?: any): AxiosPromise<UserMetricsProfilesSchema>;
    /**
     * Provision a new user in Invotra.
     * @param {UserSchemaCreate} UserSchemaCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    usersPost(UserSchemaCreate: UserSchemaCreate, options?: any): AxiosPromise<SuccessfulPostResponseSchema>;
    /**
     * Search for users. Returns user snippets. If there are no result, an empty array is returned.
     * @param {string} [fulltext_search] Search term. Matches on whole words.
     * @param {string} [team] Filter by team.
     * @param {string} [location] Filter by location.
     * @param {string} [group] Filter by group.
     * @param {'firstname' | 'surname' | 'updated' | 'relevance'} [sort] Field to sort by
     * @param {'asc' | 'desc'} [order] Sort order
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {number} [limit] The numbers of items to return. If the value specified is more than the maximum, the result count will be limited to the maximum.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    usersSearchGet(fulltext_search?: string, team?: string, location?: string, group?: string, sort?: 'firstname' | 'surname' | 'updated' | 'relevance', order?: 'asc' | 'desc', offset?: number, limit?: number, options?: any): AxiosPromise<InlineResponse2002>;
    /**
     * Return the user\'s activity feed.
     * @param {string} user_id The Invotra UUID of the user.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {number} [limit] The numbers of items to return. If the value specified is more than the maximum, the result count will be limited to the maximum.
     * @param {boolean} [app_feeds_only] Filter the feed for the mobile app. Returns only group related messages.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    usersUserIdActivityGet(user_id: string, offset?: number, limit?: number, app_feeds_only?: boolean, options?: any): AxiosPromise<InlineResponse2003>;
    /**
     * Stop following a user.
     * @param {string} user_id The Invotra UUID of the user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    usersUserIdFollowDelete(user_id: string, options?: any): AxiosPromise<void>;
    /**
     *
     * @param {string} user_id The Invotra UUID of the user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    usersUserIdFollowGet(user_id: string, options?: any): AxiosPromise<CommonStatusSchema>;
    /**
     * Follow a user as another user.
     * @param {string} user_id The Invotra UUID of the user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    usersUserIdFollowPut(user_id: string, options?: any): AxiosPromise<void>;
    /**
     * List of who a user is following.
     * @param {string} user_id The Invotra UUID of the user.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {number} [limit] The numbers of items to return. If the value specified is more than the maximum, the result count will be limited to the maximum.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    usersUserIdFollowingGet(user_id: string, offset?: number, limit?: number, options?: any): AxiosPromise<InlineResponse2007>;
    /**
     * Get the user\'s information.
     * @param {string} user_id The Invotra UUID of the user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    usersUserIdGet(user_id: string, options?: any): AxiosPromise<import("../model").UserSchemaCommon>;
    /**
     * List a user\'s groups.
     * @param {string} user_id The Invotra UUID of the user.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {number} [limit] The numbers of items to return. If the value specified is more than the maximum, the result count will be limited to the maximum.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    usersUserIdGroupsGet(user_id: string, offset?: number, limit?: number, options?: any): AxiosPromise<InlineResponse2008>;
    /**
     * List the user\'s job roles.
     * @param {string} user_id The Invotra UUID of the user.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {number} [limit] The numbers of items to return. If the value specified is more than the maximum, the result count will be limited to the maximum.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    usersUserIdJobRolesGet(user_id: string, offset?: number, limit?: number, options?: any): AxiosPromise<InlineResponse2004>;
    /**
     * Remove a job role from a user.
     * @param {string} user_id The Invotra UUID of the user.
     * @param {string} job_role_id The Invotra UUID of the job role.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    usersUserIdJobRolesJobRoleIdDelete(user_id: string, job_role_id: string, options?: any): AxiosPromise<void>;
    /**
     * Add a job role to a user.
     * @param {string} user_id The Invotra UUID of the user.
     * @param {string} job_role_id The Invotra UUID of the job role.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    usersUserIdJobRolesJobRoleIdPut(user_id: string, job_role_id: string, options?: any): AxiosPromise<void>;
    /**
     * List the user\'s locations.
     * @param {string} user_id The Invotra UUID of the user.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {number} [limit] The numbers of items to return. If the value specified is more than the maximum, the result count will be limited to the maximum.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    usersUserIdLocationsGet(user_id: string, offset?: number, limit?: number, options?: any): AxiosPromise<InlineResponse2005>;
    /**
     * Remove a location from a user.
     * @param {string} user_id The Invotra UUID of the user.
     * @param {string} location_id The Invotra UUID of the location.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    usersUserIdLocationsLocationIdDelete(user_id: string, location_id: string, options?: any): AxiosPromise<void>;
    /**
     * Add a location to a user.
     * @param {string} user_id The Invotra UUID of the user.
     * @param {string} location_id The Invotra UUID of the location.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    usersUserIdLocationsLocationIdPut(user_id: string, location_id: string, options?: any): AxiosPromise<void>;
    /**
     * Update the user\'s information.
     * @param {string} user_id The Invotra UUID of the user.
     * @param {UserSchemaUpdate} UserSchemaUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    usersUserIdPut(user_id: string, UserSchemaUpdate: UserSchemaUpdate, options?: any): AxiosPromise<void>;
    /**
     * List a user\'s teams
     * @param {string} user_id The Invotra UUID of the user.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {number} [limit] The numbers of items to return. If the value specified is more than the maximum, the result count will be limited to the maximum.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    usersUserIdTeamsGet(user_id: string, offset?: number, limit?: number, options?: any): AxiosPromise<InlineResponse2006>;
}
