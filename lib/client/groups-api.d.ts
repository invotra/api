/**
 * Invotra API
 * In general most fields are optional for update (PUT) requests; you can leave them blank (pass an empty string / array / whatever as appropriate) to clear them, or omit the key to leave them unchanged.
 *
 * The version of the OpenAPI document: 0.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { GroupDocumentFolderSchema } from '../model';
import { GroupDocumentFolderSchemaCommon } from '../model';
import { GroupDocumentFolderSchemaCreate } from '../model';
import { GroupDocumentFolderSchemaUpdate } from '../model';
import { GroupMembershipCommonSchema } from '../model';
import { GroupMembershipStatusSchema } from '../model';
import { GroupMetricsSchema } from '../model';
import { GroupSchema } from '../model';
import { InlineResponse20010 } from '../model';
import { InlineResponse20011 } from '../model';
import { InlineResponse20012 } from '../model';
import { InlineResponse20013 } from '../model';
import { InlineResponse2009 } from '../model';
import { SuccessfulPostResponseSchema } from '../model';
import { UuidListSchema } from '../model';
/**
 * GroupsApi - axios parameter creator
 * @export
 */
export declare const GroupsApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * List all group categories. An empty array is returned if no categories are found
     * @param {string} [label] Filter by label. Matches on whole words.
     * @param {string} [autocomplete] Autocomplete term. Matches on group category name, per letter, from the start of the word.
     * @param {string} [group_fulltext_search] Filter the list of categories to those that include groups matching a search term. This is useful when you have already searched for groups and want to refine your search by category (like a faceted search). Like the fulltext_search parameter of /groups/search, this matches on whole words.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {number} [limit] The numbers of items to return. If the value specified is more than the maximum, the result count will be limited to the maximum.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsCategoriesGet(label?: string | undefined, autocomplete?: string | undefined, group_fulltext_search?: string | undefined, offset?: number | undefined, limit?: number | undefined, options?: any): RequestArgs;
    /**
     * Search for groups. Returns list of uuids. Returns an empty array if no groups are found.
     * @param {string} external_id Filter by external ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsGet(external_id: string, options?: any): RequestArgs;
    /**
     * Delete a group document folder.
     * @param {string} group_id The Invotra UUID of the group.
     * @param {string} group_document_folder_id The Invotra UUID of the group document folders.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsGroupIdDocumentFoldersGroupDocumentFolderIdDelete(group_id: string, group_document_folder_id: string, options?: any): RequestArgs;
    /**
     * Get information about the group document folder.
     * @param {string} group_id The Invotra UUID of the group.
     * @param {string} group_document_folder_id The Invotra UUID of the group document folders.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsGroupIdDocumentFoldersGroupDocumentFolderIdGet(group_id: string, group_document_folder_id: string, options?: any): RequestArgs;
    /**
     * Update group document folder information.
     * @param {string} group_id The Invotra UUID of the group.
     * @param {string} group_document_folder_id The Invotra UUID of the group document folders.
     * @param {GroupDocumentFolderSchemaUpdate} GroupDocumentFolderSchemaUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsGroupIdDocumentFoldersGroupDocumentFolderIdPut(group_id: string, group_document_folder_id: string, GroupDocumentFolderSchemaUpdate: GroupDocumentFolderSchemaCommon, options?: any): RequestArgs;
    /**
     * Search for group document folders. An empty array is returned if no group document folders are found.
     * @param {string} group_id The Invotra UUID of the group.
     * @param {string} [name] Filter by name. Matches on whole words.
     * @param {string} [external_id] Filter by external ID.
     * @param {string} [valid_parents_for] Filter out invalid parents (self and children) for the specified Invotra UUID of the group document folder.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {number} [limit] The numbers of items to return. If the value specified is more than the maximum, the result count will be limited to the maximum.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsGroupIdDocumentFoldersListGet(group_id: string, name?: string | undefined, external_id?: string | undefined, valid_parents_for?: string | undefined, offset?: number | undefined, limit?: number | undefined, options?: any): RequestArgs;
    /**
     * Provision a new group document folder.
     * @param {string} group_id The Invotra UUID of the group.
     * @param {GroupDocumentFolderSchemaCreate} GroupDocumentFolderSchemaCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsGroupIdDocumentFoldersPost(group_id: string, GroupDocumentFolderSchemaCreate: GroupDocumentFolderSchemaCommon, options?: any): RequestArgs;
    /**
     * Get information about the group.
     * @param {string} group_id The Invotra UUID of the group.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsGroupIdGet(group_id: string, options?: any): RequestArgs;
    /**
     * Get a list of group members.
     * @param {string} group_id The Invotra UUID of the group.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {number} [limit] The numbers of items to return. If the value specified is more than the maximum, the result count will be limited to the maximum.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsGroupIdMembersGet(group_id: string, offset?: number | undefined, limit?: number | undefined, options?: any): RequestArgs;
    /**
     * Remove the user\'s membership of the group. Note that at present the {user_id} must match that of the current logged-in user.
     * @param {string} group_id The Invotra UUID of the group.
     * @param {string} user_id The Invotra UUID of the user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsGroupIdMembersUserIdDelete(group_id: string, user_id: string, options?: any): RequestArgs;
    /**
     * Add a user to a group or update information about a user\'s existing group membership. Note that at present the {user_id} must match that of the current logged-in user.
     * @param {string} group_id The Invotra UUID of the group.
     * @param {string} user_id The Invotra UUID of the user.
     * @param {GroupMembershipCommonSchema} [GroupMembershipCommonSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsGroupIdMembersUserIdPut(group_id: string, user_id: string, GroupMembershipCommonSchema?: GroupMembershipCommonSchema | undefined, options?: any): RequestArgs;
    /**
     * Check if the current user is a member of a group.
     * @param {string} group_id The Invotra UUID of the group to check membership status against.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsGroupIdMyMembershipGet(group_id: string, options?: any): RequestArgs;
    /**
     * Get a list of group posts. This returns only the top-level posts in the group, not their replies.
     * @param {string} group_id The Invotra UUID of the group.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {number} [limit] The numbers of items to return. If the value specified is more than the maximum, the result count will be limited to the maximum.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsGroupIdPostsGet(group_id: string, offset?: number | undefined, limit?: number | undefined, options?: any): RequestArgs;
    /**
     * Update a group.
     * @param {string} group_id The Invotra UUID of the group.
     * @param {GroupSchema} GroupSchema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsGroupIdPut(group_id: string, GroupSchema: GroupSchema, options?: any): RequestArgs;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsMetricsGet(options?: any): RequestArgs;
    /**
     * Create a group.
     * @param {GroupSchema} GroupSchema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsPost(GroupSchema: GroupSchema, options?: any): RequestArgs;
    /**
     * Search for groups. Returns group snippets. An empty array is returned if no groups are found.
     * @param {string} [fulltext_search] Search term. Matches on whole words.
     * @param {string} [category] Filter by UUID of a category.
     * @param {boolean} [my_groups] Filter by groups the current user is a member of.
     * @param {string} [external_id] Filter by external ID.
     * @param {'relevance' | 'likes' | 'members_count' | 'timestamp_created'} [sort] Field to sort by.
     * @param {'asc' | 'desc'} [order] Sort order.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {number} [limit] The numbers of items to return. If the value specified is more than the maximum, the result count will be limited to the maximum.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsSearchGet(fulltext_search?: string | undefined, category?: string | undefined, my_groups?: boolean | undefined, external_id?: string | undefined, sort?: "timestamp_created" | "relevance" | "likes" | "members_count" | undefined, order?: "asc" | "desc" | undefined, offset?: number | undefined, limit?: number | undefined, options?: any): RequestArgs;
};
/**
 * GroupsApi - functional programming interface
 * @export
 */
export declare const GroupsApiFp: (configuration?: Configuration | undefined) => {
    /**
     * List all group categories. An empty array is returned if no categories are found
     * @param {string} [label] Filter by label. Matches on whole words.
     * @param {string} [autocomplete] Autocomplete term. Matches on group category name, per letter, from the start of the word.
     * @param {string} [group_fulltext_search] Filter the list of categories to those that include groups matching a search term. This is useful when you have already searched for groups and want to refine your search by category (like a faceted search). Like the fulltext_search parameter of /groups/search, this matches on whole words.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {number} [limit] The numbers of items to return. If the value specified is more than the maximum, the result count will be limited to the maximum.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsCategoriesGet(label?: string | undefined, autocomplete?: string | undefined, group_fulltext_search?: string | undefined, offset?: number | undefined, limit?: number | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<InlineResponse20011>;
    /**
     * Search for groups. Returns list of uuids. Returns an empty array if no groups are found.
     * @param {string} external_id Filter by external ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsGet(external_id: string, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<UuidListSchema>;
    /**
     * Delete a group document folder.
     * @param {string} group_id The Invotra UUID of the group.
     * @param {string} group_document_folder_id The Invotra UUID of the group document folders.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsGroupIdDocumentFoldersGroupDocumentFolderIdDelete(group_id: string, group_document_folder_id: string, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>;
    /**
     * Get information about the group document folder.
     * @param {string} group_id The Invotra UUID of the group.
     * @param {string} group_document_folder_id The Invotra UUID of the group document folders.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsGroupIdDocumentFoldersGroupDocumentFolderIdGet(group_id: string, group_document_folder_id: string, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<GroupDocumentFolderSchema>;
    /**
     * Update group document folder information.
     * @param {string} group_id The Invotra UUID of the group.
     * @param {string} group_document_folder_id The Invotra UUID of the group document folders.
     * @param {GroupDocumentFolderSchemaUpdate} GroupDocumentFolderSchemaUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsGroupIdDocumentFoldersGroupDocumentFolderIdPut(group_id: string, group_document_folder_id: string, GroupDocumentFolderSchemaUpdate: GroupDocumentFolderSchemaCommon, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>;
    /**
     * Search for group document folders. An empty array is returned if no group document folders are found.
     * @param {string} group_id The Invotra UUID of the group.
     * @param {string} [name] Filter by name. Matches on whole words.
     * @param {string} [external_id] Filter by external ID.
     * @param {string} [valid_parents_for] Filter out invalid parents (self and children) for the specified Invotra UUID of the group document folder.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {number} [limit] The numbers of items to return. If the value specified is more than the maximum, the result count will be limited to the maximum.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsGroupIdDocumentFoldersListGet(group_id: string, name?: string | undefined, external_id?: string | undefined, valid_parents_for?: string | undefined, offset?: number | undefined, limit?: number | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<InlineResponse20013>;
    /**
     * Provision a new group document folder.
     * @param {string} group_id The Invotra UUID of the group.
     * @param {GroupDocumentFolderSchemaCreate} GroupDocumentFolderSchemaCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsGroupIdDocumentFoldersPost(group_id: string, GroupDocumentFolderSchemaCreate: GroupDocumentFolderSchemaCommon, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<SuccessfulPostResponseSchema>;
    /**
     * Get information about the group.
     * @param {string} group_id The Invotra UUID of the group.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsGroupIdGet(group_id: string, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<GroupSchema>;
    /**
     * Get a list of group members.
     * @param {string} group_id The Invotra UUID of the group.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {number} [limit] The numbers of items to return. If the value specified is more than the maximum, the result count will be limited to the maximum.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsGroupIdMembersGet(group_id: string, offset?: number | undefined, limit?: number | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<InlineResponse20012>;
    /**
     * Remove the user\'s membership of the group. Note that at present the {user_id} must match that of the current logged-in user.
     * @param {string} group_id The Invotra UUID of the group.
     * @param {string} user_id The Invotra UUID of the user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsGroupIdMembersUserIdDelete(group_id: string, user_id: string, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>;
    /**
     * Add a user to a group or update information about a user\'s existing group membership. Note that at present the {user_id} must match that of the current logged-in user.
     * @param {string} group_id The Invotra UUID of the group.
     * @param {string} user_id The Invotra UUID of the user.
     * @param {GroupMembershipCommonSchema} [GroupMembershipCommonSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsGroupIdMembersUserIdPut(group_id: string, user_id: string, GroupMembershipCommonSchema?: GroupMembershipCommonSchema | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<GroupMembershipStatusSchema>;
    /**
     * Check if the current user is a member of a group.
     * @param {string} group_id The Invotra UUID of the group to check membership status against.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsGroupIdMyMembershipGet(group_id: string, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<GroupMembershipStatusSchema>;
    /**
     * Get a list of group posts. This returns only the top-level posts in the group, not their replies.
     * @param {string} group_id The Invotra UUID of the group.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {number} [limit] The numbers of items to return. If the value specified is more than the maximum, the result count will be limited to the maximum.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsGroupIdPostsGet(group_id: string, offset?: number | undefined, limit?: number | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<InlineResponse2009>;
    /**
     * Update a group.
     * @param {string} group_id The Invotra UUID of the group.
     * @param {GroupSchema} GroupSchema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsGroupIdPut(group_id: string, GroupSchema: GroupSchema, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsMetricsGet(options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<GroupMetricsSchema>;
    /**
     * Create a group.
     * @param {GroupSchema} GroupSchema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsPost(GroupSchema: GroupSchema, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<SuccessfulPostResponseSchema>;
    /**
     * Search for groups. Returns group snippets. An empty array is returned if no groups are found.
     * @param {string} [fulltext_search] Search term. Matches on whole words.
     * @param {string} [category] Filter by UUID of a category.
     * @param {boolean} [my_groups] Filter by groups the current user is a member of.
     * @param {string} [external_id] Filter by external ID.
     * @param {'relevance' | 'likes' | 'members_count' | 'timestamp_created'} [sort] Field to sort by.
     * @param {'asc' | 'desc'} [order] Sort order.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {number} [limit] The numbers of items to return. If the value specified is more than the maximum, the result count will be limited to the maximum.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsSearchGet(fulltext_search?: string | undefined, category?: string | undefined, my_groups?: boolean | undefined, external_id?: string | undefined, sort?: "timestamp_created" | "relevance" | "likes" | "members_count" | undefined, order?: "asc" | "desc" | undefined, offset?: number | undefined, limit?: number | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<InlineResponse20010>;
};
/**
 * GroupsApi - factory interface
 * @export
 */
export declare const GroupsApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     * List all group categories. An empty array is returned if no categories are found
     * @param {string} [label] Filter by label. Matches on whole words.
     * @param {string} [autocomplete] Autocomplete term. Matches on group category name, per letter, from the start of the word.
     * @param {string} [group_fulltext_search] Filter the list of categories to those that include groups matching a search term. This is useful when you have already searched for groups and want to refine your search by category (like a faceted search). Like the fulltext_search parameter of /groups/search, this matches on whole words.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {number} [limit] The numbers of items to return. If the value specified is more than the maximum, the result count will be limited to the maximum.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsCategoriesGet(label?: string | undefined, autocomplete?: string | undefined, group_fulltext_search?: string | undefined, offset?: number | undefined, limit?: number | undefined, options?: any): AxiosPromise<InlineResponse20011>;
    /**
     * Search for groups. Returns list of uuids. Returns an empty array if no groups are found.
     * @param {string} external_id Filter by external ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsGet(external_id: string, options?: any): AxiosPromise<UuidListSchema>;
    /**
     * Delete a group document folder.
     * @param {string} group_id The Invotra UUID of the group.
     * @param {string} group_document_folder_id The Invotra UUID of the group document folders.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsGroupIdDocumentFoldersGroupDocumentFolderIdDelete(group_id: string, group_document_folder_id: string, options?: any): AxiosPromise<void>;
    /**
     * Get information about the group document folder.
     * @param {string} group_id The Invotra UUID of the group.
     * @param {string} group_document_folder_id The Invotra UUID of the group document folders.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsGroupIdDocumentFoldersGroupDocumentFolderIdGet(group_id: string, group_document_folder_id: string, options?: any): AxiosPromise<GroupDocumentFolderSchema>;
    /**
     * Update group document folder information.
     * @param {string} group_id The Invotra UUID of the group.
     * @param {string} group_document_folder_id The Invotra UUID of the group document folders.
     * @param {GroupDocumentFolderSchemaUpdate} GroupDocumentFolderSchemaUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsGroupIdDocumentFoldersGroupDocumentFolderIdPut(group_id: string, group_document_folder_id: string, GroupDocumentFolderSchemaUpdate: GroupDocumentFolderSchemaCommon, options?: any): AxiosPromise<void>;
    /**
     * Search for group document folders. An empty array is returned if no group document folders are found.
     * @param {string} group_id The Invotra UUID of the group.
     * @param {string} [name] Filter by name. Matches on whole words.
     * @param {string} [external_id] Filter by external ID.
     * @param {string} [valid_parents_for] Filter out invalid parents (self and children) for the specified Invotra UUID of the group document folder.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {number} [limit] The numbers of items to return. If the value specified is more than the maximum, the result count will be limited to the maximum.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsGroupIdDocumentFoldersListGet(group_id: string, name?: string | undefined, external_id?: string | undefined, valid_parents_for?: string | undefined, offset?: number | undefined, limit?: number | undefined, options?: any): AxiosPromise<InlineResponse20013>;
    /**
     * Provision a new group document folder.
     * @param {string} group_id The Invotra UUID of the group.
     * @param {GroupDocumentFolderSchemaCreate} GroupDocumentFolderSchemaCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsGroupIdDocumentFoldersPost(group_id: string, GroupDocumentFolderSchemaCreate: GroupDocumentFolderSchemaCommon, options?: any): AxiosPromise<SuccessfulPostResponseSchema>;
    /**
     * Get information about the group.
     * @param {string} group_id The Invotra UUID of the group.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsGroupIdGet(group_id: string, options?: any): AxiosPromise<GroupSchema>;
    /**
     * Get a list of group members.
     * @param {string} group_id The Invotra UUID of the group.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {number} [limit] The numbers of items to return. If the value specified is more than the maximum, the result count will be limited to the maximum.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsGroupIdMembersGet(group_id: string, offset?: number | undefined, limit?: number | undefined, options?: any): AxiosPromise<InlineResponse20012>;
    /**
     * Remove the user\'s membership of the group. Note that at present the {user_id} must match that of the current logged-in user.
     * @param {string} group_id The Invotra UUID of the group.
     * @param {string} user_id The Invotra UUID of the user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsGroupIdMembersUserIdDelete(group_id: string, user_id: string, options?: any): AxiosPromise<void>;
    /**
     * Add a user to a group or update information about a user\'s existing group membership. Note that at present the {user_id} must match that of the current logged-in user.
     * @param {string} group_id The Invotra UUID of the group.
     * @param {string} user_id The Invotra UUID of the user.
     * @param {GroupMembershipCommonSchema} [GroupMembershipCommonSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsGroupIdMembersUserIdPut(group_id: string, user_id: string, GroupMembershipCommonSchema?: GroupMembershipCommonSchema | undefined, options?: any): AxiosPromise<GroupMembershipStatusSchema>;
    /**
     * Check if the current user is a member of a group.
     * @param {string} group_id The Invotra UUID of the group to check membership status against.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsGroupIdMyMembershipGet(group_id: string, options?: any): AxiosPromise<GroupMembershipStatusSchema>;
    /**
     * Get a list of group posts. This returns only the top-level posts in the group, not their replies.
     * @param {string} group_id The Invotra UUID of the group.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {number} [limit] The numbers of items to return. If the value specified is more than the maximum, the result count will be limited to the maximum.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsGroupIdPostsGet(group_id: string, offset?: number | undefined, limit?: number | undefined, options?: any): AxiosPromise<InlineResponse2009>;
    /**
     * Update a group.
     * @param {string} group_id The Invotra UUID of the group.
     * @param {GroupSchema} GroupSchema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsGroupIdPut(group_id: string, GroupSchema: GroupSchema, options?: any): AxiosPromise<void>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsMetricsGet(options?: any): AxiosPromise<GroupMetricsSchema>;
    /**
     * Create a group.
     * @param {GroupSchema} GroupSchema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsPost(GroupSchema: GroupSchema, options?: any): AxiosPromise<SuccessfulPostResponseSchema>;
    /**
     * Search for groups. Returns group snippets. An empty array is returned if no groups are found.
     * @param {string} [fulltext_search] Search term. Matches on whole words.
     * @param {string} [category] Filter by UUID of a category.
     * @param {boolean} [my_groups] Filter by groups the current user is a member of.
     * @param {string} [external_id] Filter by external ID.
     * @param {'relevance' | 'likes' | 'members_count' | 'timestamp_created'} [sort] Field to sort by.
     * @param {'asc' | 'desc'} [order] Sort order.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {number} [limit] The numbers of items to return. If the value specified is more than the maximum, the result count will be limited to the maximum.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsSearchGet(fulltext_search?: string | undefined, category?: string | undefined, my_groups?: boolean | undefined, external_id?: string | undefined, sort?: "timestamp_created" | "relevance" | "likes" | "members_count" | undefined, order?: "asc" | "desc" | undefined, offset?: number | undefined, limit?: number | undefined, options?: any): AxiosPromise<InlineResponse20010>;
};
/**
 * GroupsApi - interface
 * @export
 * @interface GroupsApi
 */
export interface GroupsApiInterface {
    /**
     * List all group categories. An empty array is returned if no categories are found
     * @param {string} [label] Filter by label. Matches on whole words.
     * @param {string} [autocomplete] Autocomplete term. Matches on group category name, per letter, from the start of the word.
     * @param {string} [group_fulltext_search] Filter the list of categories to those that include groups matching a search term. This is useful when you have already searched for groups and want to refine your search by category (like a faceted search). Like the fulltext_search parameter of /groups/search, this matches on whole words.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {number} [limit] The numbers of items to return. If the value specified is more than the maximum, the result count will be limited to the maximum.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApiInterface
     */
    groupsCategoriesGet(label?: string, autocomplete?: string, group_fulltext_search?: string, offset?: number, limit?: number, options?: any): AxiosPromise<InlineResponse20011>;
    /**
     * Search for groups. Returns list of uuids. Returns an empty array if no groups are found.
     * @param {string} external_id Filter by external ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApiInterface
     */
    groupsGet(external_id: string, options?: any): AxiosPromise<UuidListSchema>;
    /**
     * Delete a group document folder.
     * @param {string} group_id The Invotra UUID of the group.
     * @param {string} group_document_folder_id The Invotra UUID of the group document folders.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApiInterface
     */
    groupsGroupIdDocumentFoldersGroupDocumentFolderIdDelete(group_id: string, group_document_folder_id: string, options?: any): AxiosPromise<void>;
    /**
     * Get information about the group document folder.
     * @param {string} group_id The Invotra UUID of the group.
     * @param {string} group_document_folder_id The Invotra UUID of the group document folders.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApiInterface
     */
    groupsGroupIdDocumentFoldersGroupDocumentFolderIdGet(group_id: string, group_document_folder_id: string, options?: any): AxiosPromise<GroupDocumentFolderSchema>;
    /**
     * Update group document folder information.
     * @param {string} group_id The Invotra UUID of the group.
     * @param {string} group_document_folder_id The Invotra UUID of the group document folders.
     * @param {GroupDocumentFolderSchemaUpdate} GroupDocumentFolderSchemaUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApiInterface
     */
    groupsGroupIdDocumentFoldersGroupDocumentFolderIdPut(group_id: string, group_document_folder_id: string, GroupDocumentFolderSchemaUpdate: GroupDocumentFolderSchemaUpdate, options?: any): AxiosPromise<void>;
    /**
     * Search for group document folders. An empty array is returned if no group document folders are found.
     * @param {string} group_id The Invotra UUID of the group.
     * @param {string} [name] Filter by name. Matches on whole words.
     * @param {string} [external_id] Filter by external ID.
     * @param {string} [valid_parents_for] Filter out invalid parents (self and children) for the specified Invotra UUID of the group document folder.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {number} [limit] The numbers of items to return. If the value specified is more than the maximum, the result count will be limited to the maximum.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApiInterface
     */
    groupsGroupIdDocumentFoldersListGet(group_id: string, name?: string, external_id?: string, valid_parents_for?: string, offset?: number, limit?: number, options?: any): AxiosPromise<InlineResponse20013>;
    /**
     * Provision a new group document folder.
     * @param {string} group_id The Invotra UUID of the group.
     * @param {GroupDocumentFolderSchemaCreate} GroupDocumentFolderSchemaCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApiInterface
     */
    groupsGroupIdDocumentFoldersPost(group_id: string, GroupDocumentFolderSchemaCreate: GroupDocumentFolderSchemaCreate, options?: any): AxiosPromise<SuccessfulPostResponseSchema>;
    /**
     * Get information about the group.
     * @param {string} group_id The Invotra UUID of the group.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApiInterface
     */
    groupsGroupIdGet(group_id: string, options?: any): AxiosPromise<GroupSchema>;
    /**
     * Get a list of group members.
     * @param {string} group_id The Invotra UUID of the group.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {number} [limit] The numbers of items to return. If the value specified is more than the maximum, the result count will be limited to the maximum.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApiInterface
     */
    groupsGroupIdMembersGet(group_id: string, offset?: number, limit?: number, options?: any): AxiosPromise<InlineResponse20012>;
    /**
     * Remove the user\'s membership of the group. Note that at present the {user_id} must match that of the current logged-in user.
     * @param {string} group_id The Invotra UUID of the group.
     * @param {string} user_id The Invotra UUID of the user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApiInterface
     */
    groupsGroupIdMembersUserIdDelete(group_id: string, user_id: string, options?: any): AxiosPromise<void>;
    /**
     * Add a user to a group or update information about a user\'s existing group membership. Note that at present the {user_id} must match that of the current logged-in user.
     * @param {string} group_id The Invotra UUID of the group.
     * @param {string} user_id The Invotra UUID of the user.
     * @param {GroupMembershipCommonSchema} [GroupMembershipCommonSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApiInterface
     */
    groupsGroupIdMembersUserIdPut(group_id: string, user_id: string, GroupMembershipCommonSchema?: GroupMembershipCommonSchema, options?: any): AxiosPromise<GroupMembershipStatusSchema>;
    /**
     * Check if the current user is a member of a group.
     * @param {string} group_id The Invotra UUID of the group to check membership status against.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApiInterface
     */
    groupsGroupIdMyMembershipGet(group_id: string, options?: any): AxiosPromise<GroupMembershipStatusSchema>;
    /**
     * Get a list of group posts. This returns only the top-level posts in the group, not their replies.
     * @param {string} group_id The Invotra UUID of the group.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {number} [limit] The numbers of items to return. If the value specified is more than the maximum, the result count will be limited to the maximum.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApiInterface
     */
    groupsGroupIdPostsGet(group_id: string, offset?: number, limit?: number, options?: any): AxiosPromise<InlineResponse2009>;
    /**
     * Update a group.
     * @param {string} group_id The Invotra UUID of the group.
     * @param {GroupSchema} GroupSchema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApiInterface
     */
    groupsGroupIdPut(group_id: string, GroupSchema: GroupSchema, options?: any): AxiosPromise<void>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApiInterface
     */
    groupsMetricsGet(options?: any): AxiosPromise<GroupMetricsSchema>;
    /**
     * Create a group.
     * @param {GroupSchema} GroupSchema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApiInterface
     */
    groupsPost(GroupSchema: GroupSchema, options?: any): AxiosPromise<SuccessfulPostResponseSchema>;
    /**
     * Search for groups. Returns group snippets. An empty array is returned if no groups are found.
     * @param {string} [fulltext_search] Search term. Matches on whole words.
     * @param {string} [category] Filter by UUID of a category.
     * @param {boolean} [my_groups] Filter by groups the current user is a member of.
     * @param {string} [external_id] Filter by external ID.
     * @param {'relevance' | 'likes' | 'members_count' | 'timestamp_created'} [sort] Field to sort by.
     * @param {'asc' | 'desc'} [order] Sort order.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {number} [limit] The numbers of items to return. If the value specified is more than the maximum, the result count will be limited to the maximum.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApiInterface
     */
    groupsSearchGet(fulltext_search?: string, category?: string, my_groups?: boolean, external_id?: string, sort?: 'relevance' | 'likes' | 'members_count' | 'timestamp_created', order?: 'asc' | 'desc', offset?: number, limit?: number, options?: any): AxiosPromise<InlineResponse20010>;
}
/**
 * GroupsApi - object-oriented interface
 * @export
 * @class GroupsApi
 * @extends {BaseAPI}
 */
export declare class GroupsApi extends BaseAPI implements GroupsApiInterface {
    /**
     * List all group categories. An empty array is returned if no categories are found
     * @param {string} [label] Filter by label. Matches on whole words.
     * @param {string} [autocomplete] Autocomplete term. Matches on group category name, per letter, from the start of the word.
     * @param {string} [group_fulltext_search] Filter the list of categories to those that include groups matching a search term. This is useful when you have already searched for groups and want to refine your search by category (like a faceted search). Like the fulltext_search parameter of /groups/search, this matches on whole words.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {number} [limit] The numbers of items to return. If the value specified is more than the maximum, the result count will be limited to the maximum.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    groupsCategoriesGet(label?: string, autocomplete?: string, group_fulltext_search?: string, offset?: number, limit?: number, options?: any): AxiosPromise<InlineResponse20011>;
    /**
     * Search for groups. Returns list of uuids. Returns an empty array if no groups are found.
     * @param {string} external_id Filter by external ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    groupsGet(external_id: string, options?: any): AxiosPromise<UuidListSchema>;
    /**
     * Delete a group document folder.
     * @param {string} group_id The Invotra UUID of the group.
     * @param {string} group_document_folder_id The Invotra UUID of the group document folders.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    groupsGroupIdDocumentFoldersGroupDocumentFolderIdDelete(group_id: string, group_document_folder_id: string, options?: any): AxiosPromise<void>;
    /**
     * Get information about the group document folder.
     * @param {string} group_id The Invotra UUID of the group.
     * @param {string} group_document_folder_id The Invotra UUID of the group document folders.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    groupsGroupIdDocumentFoldersGroupDocumentFolderIdGet(group_id: string, group_document_folder_id: string, options?: any): AxiosPromise<GroupDocumentFolderSchema>;
    /**
     * Update group document folder information.
     * @param {string} group_id The Invotra UUID of the group.
     * @param {string} group_document_folder_id The Invotra UUID of the group document folders.
     * @param {GroupDocumentFolderSchemaUpdate} GroupDocumentFolderSchemaUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    groupsGroupIdDocumentFoldersGroupDocumentFolderIdPut(group_id: string, group_document_folder_id: string, GroupDocumentFolderSchemaUpdate: GroupDocumentFolderSchemaUpdate, options?: any): AxiosPromise<void>;
    /**
     * Search for group document folders. An empty array is returned if no group document folders are found.
     * @param {string} group_id The Invotra UUID of the group.
     * @param {string} [name] Filter by name. Matches on whole words.
     * @param {string} [external_id] Filter by external ID.
     * @param {string} [valid_parents_for] Filter out invalid parents (self and children) for the specified Invotra UUID of the group document folder.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {number} [limit] The numbers of items to return. If the value specified is more than the maximum, the result count will be limited to the maximum.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    groupsGroupIdDocumentFoldersListGet(group_id: string, name?: string, external_id?: string, valid_parents_for?: string, offset?: number, limit?: number, options?: any): AxiosPromise<InlineResponse20013>;
    /**
     * Provision a new group document folder.
     * @param {string} group_id The Invotra UUID of the group.
     * @param {GroupDocumentFolderSchemaCreate} GroupDocumentFolderSchemaCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    groupsGroupIdDocumentFoldersPost(group_id: string, GroupDocumentFolderSchemaCreate: GroupDocumentFolderSchemaCreate, options?: any): AxiosPromise<SuccessfulPostResponseSchema>;
    /**
     * Get information about the group.
     * @param {string} group_id The Invotra UUID of the group.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    groupsGroupIdGet(group_id: string, options?: any): AxiosPromise<GroupSchema>;
    /**
     * Get a list of group members.
     * @param {string} group_id The Invotra UUID of the group.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {number} [limit] The numbers of items to return. If the value specified is more than the maximum, the result count will be limited to the maximum.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    groupsGroupIdMembersGet(group_id: string, offset?: number, limit?: number, options?: any): AxiosPromise<InlineResponse20012>;
    /**
     * Remove the user\'s membership of the group. Note that at present the {user_id} must match that of the current logged-in user.
     * @param {string} group_id The Invotra UUID of the group.
     * @param {string} user_id The Invotra UUID of the user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    groupsGroupIdMembersUserIdDelete(group_id: string, user_id: string, options?: any): AxiosPromise<void>;
    /**
     * Add a user to a group or update information about a user\'s existing group membership. Note that at present the {user_id} must match that of the current logged-in user.
     * @param {string} group_id The Invotra UUID of the group.
     * @param {string} user_id The Invotra UUID of the user.
     * @param {GroupMembershipCommonSchema} [GroupMembershipCommonSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    groupsGroupIdMembersUserIdPut(group_id: string, user_id: string, GroupMembershipCommonSchema?: GroupMembershipCommonSchema, options?: any): AxiosPromise<GroupMembershipStatusSchema>;
    /**
     * Check if the current user is a member of a group.
     * @param {string} group_id The Invotra UUID of the group to check membership status against.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    groupsGroupIdMyMembershipGet(group_id: string, options?: any): AxiosPromise<GroupMembershipStatusSchema>;
    /**
     * Get a list of group posts. This returns only the top-level posts in the group, not their replies.
     * @param {string} group_id The Invotra UUID of the group.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {number} [limit] The numbers of items to return. If the value specified is more than the maximum, the result count will be limited to the maximum.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    groupsGroupIdPostsGet(group_id: string, offset?: number, limit?: number, options?: any): AxiosPromise<InlineResponse2009>;
    /**
     * Update a group.
     * @param {string} group_id The Invotra UUID of the group.
     * @param {GroupSchema} GroupSchema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    groupsGroupIdPut(group_id: string, GroupSchema: GroupSchema, options?: any): AxiosPromise<void>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    groupsMetricsGet(options?: any): AxiosPromise<GroupMetricsSchema>;
    /**
     * Create a group.
     * @param {GroupSchema} GroupSchema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    groupsPost(GroupSchema: GroupSchema, options?: any): AxiosPromise<SuccessfulPostResponseSchema>;
    /**
     * Search for groups. Returns group snippets. An empty array is returned if no groups are found.
     * @param {string} [fulltext_search] Search term. Matches on whole words.
     * @param {string} [category] Filter by UUID of a category.
     * @param {boolean} [my_groups] Filter by groups the current user is a member of.
     * @param {string} [external_id] Filter by external ID.
     * @param {'relevance' | 'likes' | 'members_count' | 'timestamp_created'} [sort] Field to sort by.
     * @param {'asc' | 'desc'} [order] Sort order.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {number} [limit] The numbers of items to return. If the value specified is more than the maximum, the result count will be limited to the maximum.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    groupsSearchGet(fulltext_search?: string, category?: string, my_groups?: boolean, external_id?: string, sort?: 'relevance' | 'likes' | 'members_count' | 'timestamp_created', order?: 'asc' | 'desc', offset?: number, limit?: number, options?: any): AxiosPromise<InlineResponse20010>;
}
