/**
 * Invotra API
 * In general most fields are optional for update (PUT) requests; you can leave them blank (pass an empty string / array / whatever as appropriate) to clear them, or omit the key to leave them unchanged.
 *
 * The version of the OpenAPI document: 0.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { StatusSchema } from '../model';
/**
 * StatusApi - axios parameter creator
 * @export
 */
export declare const StatusApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * Returns the status of the Invotra API. If successful, the API is running as expected and will return the \"OK\" response that includes the server time. (If it is not, an appropriate 5xx error message will be returned).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    statusGet(options?: any): RequestArgs;
};
/**
 * StatusApi - functional programming interface
 * @export
 */
export declare const StatusApiFp: (configuration?: Configuration | undefined) => {
    /**
     * Returns the status of the Invotra API. If successful, the API is running as expected and will return the \"OK\" response that includes the server time. (If it is not, an appropriate 5xx error message will be returned).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    statusGet(options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<StatusSchema>;
};
/**
 * StatusApi - factory interface
 * @export
 */
export declare const StatusApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     * Returns the status of the Invotra API. If successful, the API is running as expected and will return the \"OK\" response that includes the server time. (If it is not, an appropriate 5xx error message will be returned).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    statusGet(options?: any): AxiosPromise<StatusSchema>;
};
/**
 * StatusApi - interface
 * @export
 * @interface StatusApi
 */
export interface StatusApiInterface {
    /**
     * Returns the status of the Invotra API. If successful, the API is running as expected and will return the \"OK\" response that includes the server time. (If it is not, an appropriate 5xx error message will be returned).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatusApiInterface
     */
    statusGet(options?: any): AxiosPromise<StatusSchema>;
}
/**
 * StatusApi - object-oriented interface
 * @export
 * @class StatusApi
 * @extends {BaseAPI}
 */
export declare class StatusApi extends BaseAPI implements StatusApiInterface {
    /**
     * Returns the status of the Invotra API. If successful, the API is running as expected and will return the \"OK\" response that includes the server time. (If it is not, an appropriate 5xx error message will be returned).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatusApi
     */
    statusGet(options?: any): AxiosPromise<StatusSchema>;
}
