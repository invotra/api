/**
 * InvotraAPI
 * In general most fields are optional for update (PUT) requests; you can leave them blank (pass an empty string / array / whatever as appropriate) to clear them, or omit the key to leave them unchanged.
 *
 * The version of the OpenAPI document: 0.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { InlineResponse20023 } from '../model';
import { PromotionSchema } from '../model';
import { PromotionSchemaCreate } from '../model';
import { PromotionSchemaUpdate } from '../model';
import { SuccessfulPostResponseSchema } from '../model';
/**
 * PromotionsApi - axios parameter creator
 * @export
 */
export declare const PromotionsApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * Search for promotions. An empty array is returned if no promotions where found.
     * @param {string} [author_uuid] Filter on Invotra UUID of the author.
     * @param {string} [created_date] Filter on date created. Format: YYYY-MM-DD.
     * @param {string} [updated_date] Filter on date updated. Format: YYYY-MM-DD.
     * @param {string} [state] Filter the list of custom content on a comma seperated list of states. Valid statuses are \&quot;draft\&quot;, \&quot;needs_review\&quot;, \&quot;reviewed\&quot;, \&quot;published\&quot;, and \&quot;unpublished\&quot;. You may include multiple. The default when not supplied is \&quot;published\&quot; only.
     * @param {'timestamp_created' | 'timestamp_updated'} [sort] Field to sort by.
     * @param {'asc' | 'desc'} [order] Sort order.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {number} [limit] The numbers of items to return.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    promotionsListGet(author_uuid?: string | undefined, created_date?: string | undefined, updated_date?: string | undefined, state?: string | undefined, sort?: "timestamp_created" | "timestamp_updated" | undefined, order?: "asc" | "desc" | undefined, offset?: number | undefined, limit?: number | undefined, options?: any): RequestArgs;
    /**
     * Provision a new promotion.
     * @param {PromotionSchemaCreate} PromotionSchemaCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    promotionsPost(PromotionSchemaCreate: PromotionSchemaCreate, options?: any): RequestArgs;
    /**
     * Delete a promotion.
     * @param {string} promotion_id The Invotra UUID of the promotion.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    promotionsPromotionIdDelete(promotion_id: string, options?: any): RequestArgs;
    /**
     * Get information about the promotion.
     * @param {string} promotion_id The Invotra UUID of the promotion.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    promotionsPromotionIdGet(promotion_id: string, options?: any): RequestArgs;
    /**
     * Update promotion information.
     * @param {string} promotion_id The Invotra UUID of the promotion.
     * @param {PromotionSchemaUpdate} PromotionSchemaUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    promotionsPromotionIdPut(promotion_id: string, PromotionSchemaUpdate: PromotionSchemaUpdate, options?: any): RequestArgs;
};
/**
 * PromotionsApi - functional programming interface
 * @export
 */
export declare const PromotionsApiFp: (configuration?: Configuration | undefined) => {
    /**
     * Search for promotions. An empty array is returned if no promotions where found.
     * @param {string} [author_uuid] Filter on Invotra UUID of the author.
     * @param {string} [created_date] Filter on date created. Format: YYYY-MM-DD.
     * @param {string} [updated_date] Filter on date updated. Format: YYYY-MM-DD.
     * @param {string} [state] Filter the list of custom content on a comma seperated list of states. Valid statuses are \&quot;draft\&quot;, \&quot;needs_review\&quot;, \&quot;reviewed\&quot;, \&quot;published\&quot;, and \&quot;unpublished\&quot;. You may include multiple. The default when not supplied is \&quot;published\&quot; only.
     * @param {'timestamp_created' | 'timestamp_updated'} [sort] Field to sort by.
     * @param {'asc' | 'desc'} [order] Sort order.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {number} [limit] The numbers of items to return.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    promotionsListGet(author_uuid?: string | undefined, created_date?: string | undefined, updated_date?: string | undefined, state?: string | undefined, sort?: "timestamp_created" | "timestamp_updated" | undefined, order?: "asc" | "desc" | undefined, offset?: number | undefined, limit?: number | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<InlineResponse20023>;
    /**
     * Provision a new promotion.
     * @param {PromotionSchemaCreate} PromotionSchemaCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    promotionsPost(PromotionSchemaCreate: PromotionSchemaCreate, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<SuccessfulPostResponseSchema>;
    /**
     * Delete a promotion.
     * @param {string} promotion_id The Invotra UUID of the promotion.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    promotionsPromotionIdDelete(promotion_id: string, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>;
    /**
     * Get information about the promotion.
     * @param {string} promotion_id The Invotra UUID of the promotion.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    promotionsPromotionIdGet(promotion_id: string, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<PromotionSchema>;
    /**
     * Update promotion information.
     * @param {string} promotion_id The Invotra UUID of the promotion.
     * @param {PromotionSchemaUpdate} PromotionSchemaUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    promotionsPromotionIdPut(promotion_id: string, PromotionSchemaUpdate: PromotionSchemaUpdate, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>;
};
/**
 * PromotionsApi - factory interface
 * @export
 */
export declare const PromotionsApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     * Search for promotions. An empty array is returned if no promotions where found.
     * @param {string} [author_uuid] Filter on Invotra UUID of the author.
     * @param {string} [created_date] Filter on date created. Format: YYYY-MM-DD.
     * @param {string} [updated_date] Filter on date updated. Format: YYYY-MM-DD.
     * @param {string} [state] Filter the list of custom content on a comma seperated list of states. Valid statuses are \&quot;draft\&quot;, \&quot;needs_review\&quot;, \&quot;reviewed\&quot;, \&quot;published\&quot;, and \&quot;unpublished\&quot;. You may include multiple. The default when not supplied is \&quot;published\&quot; only.
     * @param {'timestamp_created' | 'timestamp_updated'} [sort] Field to sort by.
     * @param {'asc' | 'desc'} [order] Sort order.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {number} [limit] The numbers of items to return.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    promotionsListGet(author_uuid?: string | undefined, created_date?: string | undefined, updated_date?: string | undefined, state?: string | undefined, sort?: "timestamp_created" | "timestamp_updated" | undefined, order?: "asc" | "desc" | undefined, offset?: number | undefined, limit?: number | undefined, options?: any): AxiosPromise<InlineResponse20023>;
    /**
     * Provision a new promotion.
     * @param {PromotionSchemaCreate} PromotionSchemaCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    promotionsPost(PromotionSchemaCreate: PromotionSchemaCreate, options?: any): AxiosPromise<SuccessfulPostResponseSchema>;
    /**
     * Delete a promotion.
     * @param {string} promotion_id The Invotra UUID of the promotion.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    promotionsPromotionIdDelete(promotion_id: string, options?: any): AxiosPromise<void>;
    /**
     * Get information about the promotion.
     * @param {string} promotion_id The Invotra UUID of the promotion.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    promotionsPromotionIdGet(promotion_id: string, options?: any): AxiosPromise<PromotionSchema>;
    /**
     * Update promotion information.
     * @param {string} promotion_id The Invotra UUID of the promotion.
     * @param {PromotionSchemaUpdate} PromotionSchemaUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    promotionsPromotionIdPut(promotion_id: string, PromotionSchemaUpdate: PromotionSchemaUpdate, options?: any): AxiosPromise<void>;
};
/**
 * PromotionsApi - interface
 * @export
 * @interface PromotionsApi
 */
export interface PromotionsApiInterface {
    /**
     * Search for promotions. An empty array is returned if no promotions where found.
     * @param {string} [author_uuid] Filter on Invotra UUID of the author.
     * @param {string} [created_date] Filter on date created. Format: YYYY-MM-DD.
     * @param {string} [updated_date] Filter on date updated. Format: YYYY-MM-DD.
     * @param {string} [state] Filter the list of custom content on a comma seperated list of states. Valid statuses are \&quot;draft\&quot;, \&quot;needs_review\&quot;, \&quot;reviewed\&quot;, \&quot;published\&quot;, and \&quot;unpublished\&quot;. You may include multiple. The default when not supplied is \&quot;published\&quot; only.
     * @param {'timestamp_created' | 'timestamp_updated'} [sort] Field to sort by.
     * @param {'asc' | 'desc'} [order] Sort order.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {number} [limit] The numbers of items to return.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromotionsApiInterface
     */
    promotionsListGet(author_uuid?: string, created_date?: string, updated_date?: string, state?: string, sort?: 'timestamp_created' | 'timestamp_updated', order?: 'asc' | 'desc', offset?: number, limit?: number, options?: any): AxiosPromise<InlineResponse20023>;
    /**
     * Provision a new promotion.
     * @param {PromotionSchemaCreate} PromotionSchemaCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromotionsApiInterface
     */
    promotionsPost(PromotionSchemaCreate: PromotionSchemaCreate, options?: any): AxiosPromise<SuccessfulPostResponseSchema>;
    /**
     * Delete a promotion.
     * @param {string} promotion_id The Invotra UUID of the promotion.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromotionsApiInterface
     */
    promotionsPromotionIdDelete(promotion_id: string, options?: any): AxiosPromise<void>;
    /**
     * Get information about the promotion.
     * @param {string} promotion_id The Invotra UUID of the promotion.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromotionsApiInterface
     */
    promotionsPromotionIdGet(promotion_id: string, options?: any): AxiosPromise<PromotionSchema>;
    /**
     * Update promotion information.
     * @param {string} promotion_id The Invotra UUID of the promotion.
     * @param {PromotionSchemaUpdate} PromotionSchemaUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromotionsApiInterface
     */
    promotionsPromotionIdPut(promotion_id: string, PromotionSchemaUpdate: PromotionSchemaUpdate, options?: any): AxiosPromise<void>;
}
/**
 * PromotionsApi - object-oriented interface
 * @export
 * @class PromotionsApi
 * @extends {BaseAPI}
 */
export declare class PromotionsApi extends BaseAPI implements PromotionsApiInterface {
    /**
     * Search for promotions. An empty array is returned if no promotions where found.
     * @param {string} [author_uuid] Filter on Invotra UUID of the author.
     * @param {string} [created_date] Filter on date created. Format: YYYY-MM-DD.
     * @param {string} [updated_date] Filter on date updated. Format: YYYY-MM-DD.
     * @param {string} [state] Filter the list of custom content on a comma seperated list of states. Valid statuses are \&quot;draft\&quot;, \&quot;needs_review\&quot;, \&quot;reviewed\&quot;, \&quot;published\&quot;, and \&quot;unpublished\&quot;. You may include multiple. The default when not supplied is \&quot;published\&quot; only.
     * @param {'timestamp_created' | 'timestamp_updated'} [sort] Field to sort by.
     * @param {'asc' | 'desc'} [order] Sort order.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {number} [limit] The numbers of items to return.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromotionsApi
     */
    promotionsListGet(author_uuid?: string, created_date?: string, updated_date?: string, state?: string, sort?: 'timestamp_created' | 'timestamp_updated', order?: 'asc' | 'desc', offset?: number, limit?: number, options?: any): AxiosPromise<InlineResponse20023>;
    /**
     * Provision a new promotion.
     * @param {PromotionSchemaCreate} PromotionSchemaCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromotionsApi
     */
    promotionsPost(PromotionSchemaCreate: PromotionSchemaCreate, options?: any): AxiosPromise<SuccessfulPostResponseSchema>;
    /**
     * Delete a promotion.
     * @param {string} promotion_id The Invotra UUID of the promotion.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromotionsApi
     */
    promotionsPromotionIdDelete(promotion_id: string, options?: any): AxiosPromise<void>;
    /**
     * Get information about the promotion.
     * @param {string} promotion_id The Invotra UUID of the promotion.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromotionsApi
     */
    promotionsPromotionIdGet(promotion_id: string, options?: any): AxiosPromise<PromotionSchema>;
    /**
     * Update promotion information.
     * @param {string} promotion_id The Invotra UUID of the promotion.
     * @param {PromotionSchemaUpdate} PromotionSchemaUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromotionsApi
     */
    promotionsPromotionIdPut(promotion_id: string, PromotionSchemaUpdate: PromotionSchemaUpdate, options?: any): AxiosPromise<void>;
}
