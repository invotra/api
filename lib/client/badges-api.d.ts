/**
 * InvotraAPI
 * In general most fields are optional for update (PUT) requests; you can leave them blank (pass an empty string / array / whatever as appropriate) to clear them, or omit the key to leave them unchanged.
 *
 * The version of the OpenAPI document: 0.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { BadgeSchema } from '../model';
import { BadgeSchemaCreate } from '../model';
import { BadgeSchemaUpdate } from '../model';
import { InlineResponse20030 } from '../model';
import { SuccessfulPostResponseSchema } from '../model';
/**
 * BadgesApi - axios parameter creator
 * @export
 */
export declare const BadgesApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * Delete a badge.
     * @param {string} badge_id The Invotra UUID of the badge.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    badgesBadgeIdDelete(badge_id: string, options?: any): RequestArgs;
    /**
     * Get information about the badge.
     * @param {string} badge_id The Invotra UUID of the badge.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    badgesBadgeIdGet(badge_id: string, options?: any): RequestArgs;
    /**
     * Update badge information.
     * @param {string} badge_id The Invotra UUID of the badge.
     * @param {BadgeSchemaUpdate} BadgeSchemaUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    badgesBadgeIdPut(badge_id: string, BadgeSchemaUpdate: BadgeSchemaUpdate, options?: any): RequestArgs;
    /**
     * Search for badges. An empty array is returned if no badges are found.
     * @param {string} [name] Filter by name. Matches on whole words.
     * @param {string} [external_id] Filter by external ID.
     * @param {string} [status] Filter the list of badges on a comma seperated list of statuses. Valid statuses are \&quot;published\&quot; and \&quot;unpublished\&quot;, you may inlude both. The default when not supplied is \&quot;published\&quot; only.
     * @param {string} [valid_parents_for] Filter out invalid parents (self and children) for the specified Invotra UUID of the badge.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {number} [limit] The numbers of items to return. If the value specified is more than the maximum, the result count will be limited to the maximum.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    badgesListGet(name?: string | undefined, external_id?: string | undefined, status?: string | undefined, valid_parents_for?: string | undefined, offset?: number | undefined, limit?: number | undefined, options?: any): RequestArgs;
    /**
     * Provision a new badge.
     * @param {BadgeSchemaCreate} BadgeSchemaCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    badgesPost(BadgeSchemaCreate: BadgeSchemaCreate, options?: any): RequestArgs;
};
/**
 * BadgesApi - functional programming interface
 * @export
 */
export declare const BadgesApiFp: (configuration?: Configuration | undefined) => {
    /**
     * Delete a badge.
     * @param {string} badge_id The Invotra UUID of the badge.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    badgesBadgeIdDelete(badge_id: string, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>;
    /**
     * Get information about the badge.
     * @param {string} badge_id The Invotra UUID of the badge.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    badgesBadgeIdGet(badge_id: string, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<BadgeSchema>;
    /**
     * Update badge information.
     * @param {string} badge_id The Invotra UUID of the badge.
     * @param {BadgeSchemaUpdate} BadgeSchemaUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    badgesBadgeIdPut(badge_id: string, BadgeSchemaUpdate: BadgeSchemaUpdate, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>;
    /**
     * Search for badges. An empty array is returned if no badges are found.
     * @param {string} [name] Filter by name. Matches on whole words.
     * @param {string} [external_id] Filter by external ID.
     * @param {string} [status] Filter the list of badges on a comma seperated list of statuses. Valid statuses are \&quot;published\&quot; and \&quot;unpublished\&quot;, you may inlude both. The default when not supplied is \&quot;published\&quot; only.
     * @param {string} [valid_parents_for] Filter out invalid parents (self and children) for the specified Invotra UUID of the badge.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {number} [limit] The numbers of items to return. If the value specified is more than the maximum, the result count will be limited to the maximum.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    badgesListGet(name?: string | undefined, external_id?: string | undefined, status?: string | undefined, valid_parents_for?: string | undefined, offset?: number | undefined, limit?: number | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<InlineResponse20030>;
    /**
     * Provision a new badge.
     * @param {BadgeSchemaCreate} BadgeSchemaCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    badgesPost(BadgeSchemaCreate: BadgeSchemaCreate, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<SuccessfulPostResponseSchema>;
};
/**
 * BadgesApi - factory interface
 * @export
 */
export declare const BadgesApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     * Delete a badge.
     * @param {string} badge_id The Invotra UUID of the badge.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    badgesBadgeIdDelete(badge_id: string, options?: any): AxiosPromise<void>;
    /**
     * Get information about the badge.
     * @param {string} badge_id The Invotra UUID of the badge.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    badgesBadgeIdGet(badge_id: string, options?: any): AxiosPromise<BadgeSchema>;
    /**
     * Update badge information.
     * @param {string} badge_id The Invotra UUID of the badge.
     * @param {BadgeSchemaUpdate} BadgeSchemaUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    badgesBadgeIdPut(badge_id: string, BadgeSchemaUpdate: BadgeSchemaUpdate, options?: any): AxiosPromise<void>;
    /**
     * Search for badges. An empty array is returned if no badges are found.
     * @param {string} [name] Filter by name. Matches on whole words.
     * @param {string} [external_id] Filter by external ID.
     * @param {string} [status] Filter the list of badges on a comma seperated list of statuses. Valid statuses are \&quot;published\&quot; and \&quot;unpublished\&quot;, you may inlude both. The default when not supplied is \&quot;published\&quot; only.
     * @param {string} [valid_parents_for] Filter out invalid parents (self and children) for the specified Invotra UUID of the badge.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {number} [limit] The numbers of items to return. If the value specified is more than the maximum, the result count will be limited to the maximum.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    badgesListGet(name?: string | undefined, external_id?: string | undefined, status?: string | undefined, valid_parents_for?: string | undefined, offset?: number | undefined, limit?: number | undefined, options?: any): AxiosPromise<InlineResponse20030>;
    /**
     * Provision a new badge.
     * @param {BadgeSchemaCreate} BadgeSchemaCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    badgesPost(BadgeSchemaCreate: BadgeSchemaCreate, options?: any): AxiosPromise<SuccessfulPostResponseSchema>;
};
/**
 * BadgesApi - interface
 * @export
 * @interface BadgesApi
 */
export interface BadgesApiInterface {
    /**
     * Delete a badge.
     * @param {string} badge_id The Invotra UUID of the badge.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BadgesApiInterface
     */
    badgesBadgeIdDelete(badge_id: string, options?: any): AxiosPromise<void>;
    /**
     * Get information about the badge.
     * @param {string} badge_id The Invotra UUID of the badge.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BadgesApiInterface
     */
    badgesBadgeIdGet(badge_id: string, options?: any): AxiosPromise<BadgeSchema>;
    /**
     * Update badge information.
     * @param {string} badge_id The Invotra UUID of the badge.
     * @param {BadgeSchemaUpdate} BadgeSchemaUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BadgesApiInterface
     */
    badgesBadgeIdPut(badge_id: string, BadgeSchemaUpdate: BadgeSchemaUpdate, options?: any): AxiosPromise<void>;
    /**
     * Search for badges. An empty array is returned if no badges are found.
     * @param {string} [name] Filter by name. Matches on whole words.
     * @param {string} [external_id] Filter by external ID.
     * @param {string} [status] Filter the list of badges on a comma seperated list of statuses. Valid statuses are \&quot;published\&quot; and \&quot;unpublished\&quot;, you may inlude both. The default when not supplied is \&quot;published\&quot; only.
     * @param {string} [valid_parents_for] Filter out invalid parents (self and children) for the specified Invotra UUID of the badge.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {number} [limit] The numbers of items to return. If the value specified is more than the maximum, the result count will be limited to the maximum.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BadgesApiInterface
     */
    badgesListGet(name?: string, external_id?: string, status?: string, valid_parents_for?: string, offset?: number, limit?: number, options?: any): AxiosPromise<InlineResponse20030>;
    /**
     * Provision a new badge.
     * @param {BadgeSchemaCreate} BadgeSchemaCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BadgesApiInterface
     */
    badgesPost(BadgeSchemaCreate: BadgeSchemaCreate, options?: any): AxiosPromise<SuccessfulPostResponseSchema>;
}
/**
 * BadgesApi - object-oriented interface
 * @export
 * @class BadgesApi
 * @extends {BaseAPI}
 */
export declare class BadgesApi extends BaseAPI implements BadgesApiInterface {
    /**
     * Delete a badge.
     * @param {string} badge_id The Invotra UUID of the badge.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BadgesApi
     */
    badgesBadgeIdDelete(badge_id: string, options?: any): AxiosPromise<void>;
    /**
     * Get information about the badge.
     * @param {string} badge_id The Invotra UUID of the badge.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BadgesApi
     */
    badgesBadgeIdGet(badge_id: string, options?: any): AxiosPromise<BadgeSchema>;
    /**
     * Update badge information.
     * @param {string} badge_id The Invotra UUID of the badge.
     * @param {BadgeSchemaUpdate} BadgeSchemaUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BadgesApi
     */
    badgesBadgeIdPut(badge_id: string, BadgeSchemaUpdate: BadgeSchemaUpdate, options?: any): AxiosPromise<void>;
    /**
     * Search for badges. An empty array is returned if no badges are found.
     * @param {string} [name] Filter by name. Matches on whole words.
     * @param {string} [external_id] Filter by external ID.
     * @param {string} [status] Filter the list of badges on a comma seperated list of statuses. Valid statuses are \&quot;published\&quot; and \&quot;unpublished\&quot;, you may inlude both. The default when not supplied is \&quot;published\&quot; only.
     * @param {string} [valid_parents_for] Filter out invalid parents (self and children) for the specified Invotra UUID of the badge.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {number} [limit] The numbers of items to return. If the value specified is more than the maximum, the result count will be limited to the maximum.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BadgesApi
     */
    badgesListGet(name?: string, external_id?: string, status?: string, valid_parents_for?: string, offset?: number, limit?: number, options?: any): AxiosPromise<InlineResponse20030>;
    /**
     * Provision a new badge.
     * @param {BadgeSchemaCreate} BadgeSchemaCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BadgesApi
     */
    badgesPost(BadgeSchemaCreate: BadgeSchemaCreate, options?: any): AxiosPromise<SuccessfulPostResponseSchema>;
}
