// tslint:disable
/**
 * Invotra API
 * In general most fields are optional for update (PUT) requests; you can leave them blank (pass an empty string / array / whatever as appropriate) to clear them, or omit the key to leave them unchanged.
 *
 * The version of the OpenAPI document: 0.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import * as globalImportUrl from 'url';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, BaseAPI, RequiredError } from '../base';
/**
 * ListsApi - axios parameter creator
 * @export
 */
export var ListsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Search for lists. An empty array is returned if no lists where found.
         * @param {string} [author_uuid] Filter on Invotra UUID of the author.
         * @param {string} [created_date] Filter on date created. Format: YYYY-MM-DD.
         * @param {string} [updated_date] Filter on date updated. Format: YYYY-MM-DD.
         * @param {string} [state] Filter the list of lists on a comma-separated list of states. Valid statuses are \&quot;draft\&quot;, \&quot;needs_review\&quot;, \&quot;reviewed\&quot;, \&quot;published\&quot;, and \&quot;unpublished\&quot;. You may include multiple. The default when not supplied is \&quot;published\&quot; only.
         * @param {'timestamp_created' | 'timestamp_updated'} [sort] Field to sort by.
         * @param {'asc' | 'desc'} [order] Sort order.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {number} [limit] The numbers of items to return. If the value specified is more than the maximum, the result count will be limited to the maximum.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listsListGet: function (author_uuid, created_date, updated_date, state, sort, order, offset, limit, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/lists/list";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }
            // authentication CognitoJwt required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("CognitoJwt", ["invotra/lists:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication SessionCookieHeader required
            if (author_uuid !== undefined) {
                localVarQueryParameter['author_uuid'] = author_uuid;
            }
            if (created_date !== undefined) {
                localVarQueryParameter['created_date'] = created_date;
            }
            if (updated_date !== undefined) {
                localVarQueryParameter['updated_date'] = updated_date;
            }
            if (state !== undefined) {
                localVarQueryParameter['state'] = state;
            }
            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }
            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }
            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a list.
         * @param {string} list_id The Invotra UUID of the list.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listsListIdDelete: function (list_id, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'list_id' is not null or undefined
            if (list_id === null || list_id === undefined) {
                throw new RequiredError('list_id', 'Required parameter list_id was null or undefined when calling listsListIdDelete.');
            }
            var localVarPath = "/lists/{list_id}"
                .replace("{" + "list_id" + "}", encodeURIComponent(String(list_id)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }
            // authentication CognitoJwt required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("CognitoJwt", ["invotra/lists:write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication SessionCookieHeader required
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get information about the list.
         * @param {string} list_id The Invotra UUID of the list.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listsListIdGet: function (list_id, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'list_id' is not null or undefined
            if (list_id === null || list_id === undefined) {
                throw new RequiredError('list_id', 'Required parameter list_id was null or undefined when calling listsListIdGet.');
            }
            var localVarPath = "/lists/{list_id}"
                .replace("{" + "list_id" + "}", encodeURIComponent(String(list_id)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }
            // authentication CognitoJwt required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("CognitoJwt", ["invotra/lists:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication SessionCookieHeader required
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update list information.
         * @param {string} list_id The Invotra UUID of the list.
         * @param {ListSchemaUpdate} ListSchemaUpdate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listsListIdPut: function (list_id, ListSchemaUpdate, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'list_id' is not null or undefined
            if (list_id === null || list_id === undefined) {
                throw new RequiredError('list_id', 'Required parameter list_id was null or undefined when calling listsListIdPut.');
            }
            // verify required parameter 'ListSchemaUpdate' is not null or undefined
            if (ListSchemaUpdate === null || ListSchemaUpdate === undefined) {
                throw new RequiredError('ListSchemaUpdate', 'Required parameter ListSchemaUpdate was null or undefined when calling listsListIdPut.');
            }
            var localVarPath = "/lists/{list_id}"
                .replace("{" + "list_id" + "}", encodeURIComponent(String(list_id)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }
            // authentication CognitoJwt required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("CognitoJwt", ["invotra/lists:write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication SessionCookieHeader required
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            var needsSerialization = (typeof ListSchemaUpdate !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(ListSchemaUpdate !== undefined ? ListSchemaUpdate : {}) : (ListSchemaUpdate || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Provision a new list.
         * @param {ListSchemaCreate} ListSchemaCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listsPost: function (ListSchemaCreate, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'ListSchemaCreate' is not null or undefined
            if (ListSchemaCreate === null || ListSchemaCreate === undefined) {
                throw new RequiredError('ListSchemaCreate', 'Required parameter ListSchemaCreate was null or undefined when calling listsPost.');
            }
            var localVarPath = "/lists";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }
            // authentication CognitoJwt required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("CognitoJwt", ["invotra/lists:write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication SessionCookieHeader required
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            var needsSerialization = (typeof ListSchemaCreate !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(ListSchemaCreate !== undefined ? ListSchemaCreate : {}) : (ListSchemaCreate || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * ListsApi - functional programming interface
 * @export
 */
export var ListsApiFp = function (configuration) {
    return {
        /**
         * Search for lists. An empty array is returned if no lists where found.
         * @param {string} [author_uuid] Filter on Invotra UUID of the author.
         * @param {string} [created_date] Filter on date created. Format: YYYY-MM-DD.
         * @param {string} [updated_date] Filter on date updated. Format: YYYY-MM-DD.
         * @param {string} [state] Filter the list of lists on a comma-separated list of states. Valid statuses are \&quot;draft\&quot;, \&quot;needs_review\&quot;, \&quot;reviewed\&quot;, \&quot;published\&quot;, and \&quot;unpublished\&quot;. You may include multiple. The default when not supplied is \&quot;published\&quot; only.
         * @param {'timestamp_created' | 'timestamp_updated'} [sort] Field to sort by.
         * @param {'asc' | 'desc'} [order] Sort order.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {number} [limit] The numbers of items to return. If the value specified is more than the maximum, the result count will be limited to the maximum.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listsListGet: function (author_uuid, created_date, updated_date, state, sort, order, offset, limit, options) {
            var localVarAxiosArgs = ListsApiAxiosParamCreator(configuration).listsListGet(author_uuid, created_date, updated_date, state, sort, order, offset, limit, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = globalAxios; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete a list.
         * @param {string} list_id The Invotra UUID of the list.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listsListIdDelete: function (list_id, options) {
            var localVarAxiosArgs = ListsApiAxiosParamCreator(configuration).listsListIdDelete(list_id, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = globalAxios; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get information about the list.
         * @param {string} list_id The Invotra UUID of the list.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listsListIdGet: function (list_id, options) {
            var localVarAxiosArgs = ListsApiAxiosParamCreator(configuration).listsListIdGet(list_id, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = globalAxios; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update list information.
         * @param {string} list_id The Invotra UUID of the list.
         * @param {ListSchemaUpdate} ListSchemaUpdate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listsListIdPut: function (list_id, ListSchemaUpdate, options) {
            var localVarAxiosArgs = ListsApiAxiosParamCreator(configuration).listsListIdPut(list_id, ListSchemaUpdate, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = globalAxios; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Provision a new list.
         * @param {ListSchemaCreate} ListSchemaCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listsPost: function (ListSchemaCreate, options) {
            var localVarAxiosArgs = ListsApiAxiosParamCreator(configuration).listsPost(ListSchemaCreate, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = globalAxios; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
/**
 * ListsApi - factory interface
 * @export
 */
export var ListsApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * Search for lists. An empty array is returned if no lists where found.
         * @param {string} [author_uuid] Filter on Invotra UUID of the author.
         * @param {string} [created_date] Filter on date created. Format: YYYY-MM-DD.
         * @param {string} [updated_date] Filter on date updated. Format: YYYY-MM-DD.
         * @param {string} [state] Filter the list of lists on a comma-separated list of states. Valid statuses are \&quot;draft\&quot;, \&quot;needs_review\&quot;, \&quot;reviewed\&quot;, \&quot;published\&quot;, and \&quot;unpublished\&quot;. You may include multiple. The default when not supplied is \&quot;published\&quot; only.
         * @param {'timestamp_created' | 'timestamp_updated'} [sort] Field to sort by.
         * @param {'asc' | 'desc'} [order] Sort order.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {number} [limit] The numbers of items to return. If the value specified is more than the maximum, the result count will be limited to the maximum.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listsListGet: function (author_uuid, created_date, updated_date, state, sort, order, offset, limit, options) {
            return ListsApiFp(configuration).listsListGet(author_uuid, created_date, updated_date, state, sort, order, offset, limit, options)(axios, basePath);
        },
        /**
         * Delete a list.
         * @param {string} list_id The Invotra UUID of the list.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listsListIdDelete: function (list_id, options) {
            return ListsApiFp(configuration).listsListIdDelete(list_id, options)(axios, basePath);
        },
        /**
         * Get information about the list.
         * @param {string} list_id The Invotra UUID of the list.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listsListIdGet: function (list_id, options) {
            return ListsApiFp(configuration).listsListIdGet(list_id, options)(axios, basePath);
        },
        /**
         * Update list information.
         * @param {string} list_id The Invotra UUID of the list.
         * @param {ListSchemaUpdate} ListSchemaUpdate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listsListIdPut: function (list_id, ListSchemaUpdate, options) {
            return ListsApiFp(configuration).listsListIdPut(list_id, ListSchemaUpdate, options)(axios, basePath);
        },
        /**
         * Provision a new list.
         * @param {ListSchemaCreate} ListSchemaCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listsPost: function (ListSchemaCreate, options) {
            return ListsApiFp(configuration).listsPost(ListSchemaCreate, options)(axios, basePath);
        },
    };
};
/**
 * ListsApi - object-oriented interface
 * @export
 * @class ListsApi
 * @extends {BaseAPI}
 */
var ListsApi = /** @class */ (function (_super) {
    __extends(ListsApi, _super);
    function ListsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Search for lists. An empty array is returned if no lists where found.
     * @param {string} [author_uuid] Filter on Invotra UUID of the author.
     * @param {string} [created_date] Filter on date created. Format: YYYY-MM-DD.
     * @param {string} [updated_date] Filter on date updated. Format: YYYY-MM-DD.
     * @param {string} [state] Filter the list of lists on a comma-separated list of states. Valid statuses are \&quot;draft\&quot;, \&quot;needs_review\&quot;, \&quot;reviewed\&quot;, \&quot;published\&quot;, and \&quot;unpublished\&quot;. You may include multiple. The default when not supplied is \&quot;published\&quot; only.
     * @param {'timestamp_created' | 'timestamp_updated'} [sort] Field to sort by.
     * @param {'asc' | 'desc'} [order] Sort order.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {number} [limit] The numbers of items to return. If the value specified is more than the maximum, the result count will be limited to the maximum.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListsApi
     */
    ListsApi.prototype.listsListGet = function (author_uuid, created_date, updated_date, state, sort, order, offset, limit, options) {
        return ListsApiFp(this.configuration).listsListGet(author_uuid, created_date, updated_date, state, sort, order, offset, limit, options)(this.axios, this.basePath);
    };
    /**
     * Delete a list.
     * @param {string} list_id The Invotra UUID of the list.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListsApi
     */
    ListsApi.prototype.listsListIdDelete = function (list_id, options) {
        return ListsApiFp(this.configuration).listsListIdDelete(list_id, options)(this.axios, this.basePath);
    };
    /**
     * Get information about the list.
     * @param {string} list_id The Invotra UUID of the list.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListsApi
     */
    ListsApi.prototype.listsListIdGet = function (list_id, options) {
        return ListsApiFp(this.configuration).listsListIdGet(list_id, options)(this.axios, this.basePath);
    };
    /**
     * Update list information.
     * @param {string} list_id The Invotra UUID of the list.
     * @param {ListSchemaUpdate} ListSchemaUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListsApi
     */
    ListsApi.prototype.listsListIdPut = function (list_id, ListSchemaUpdate, options) {
        return ListsApiFp(this.configuration).listsListIdPut(list_id, ListSchemaUpdate, options)(this.axios, this.basePath);
    };
    /**
     * Provision a new list.
     * @param {ListSchemaCreate} ListSchemaCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListsApi
     */
    ListsApi.prototype.listsPost = function (ListSchemaCreate, options) {
        return ListsApiFp(this.configuration).listsPost(ListSchemaCreate, options)(this.axios, this.basePath);
    };
    return ListsApi;
}(BaseAPI));
export { ListsApi };
//# sourceMappingURL=lists-api.js.map