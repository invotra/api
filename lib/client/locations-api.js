// tslint:disable
/**
 * InvotraAPI
 * In general most fields are optional for update (PUT) requests; you can leave them blank (pass an empty string / array / whatever as appropriate) to clear them, or omit the key to leave them unchanged.
 *
 * The version of the OpenAPI document: 0.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import * as globalImportUrl from 'url';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, BaseAPI, RequiredError } from '../base';
/**
 * LocationsApi - axios parameter creator
 * @export
 */
export var LocationsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Remove location information
         * @param {string} location_id The Invotra UUID of the location.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationsBuildingsLocationIdDelete: function (location_id, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'location_id' is not null or undefined
            if (location_id === null || location_id === undefined) {
                throw new RequiredError('location_id', 'Required parameter location_id was null or undefined when calling locationsBuildingsLocationIdDelete.');
            }
            var localVarPath = "/locations/buildings/{location_id}"
                .replace("{" + "location_id" + "}", encodeURIComponent(String(location_id)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }
            // authentication CognitoJwt required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("CognitoJwt", ["invotra/locations:write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication SessionCookieHeader required
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get information about the location.
         * @param {string} location_id The Invotra UUID of the location.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationsBuildingsLocationIdGet: function (location_id, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'location_id' is not null or undefined
            if (location_id === null || location_id === undefined) {
                throw new RequiredError('location_id', 'Required parameter location_id was null or undefined when calling locationsBuildingsLocationIdGet.');
            }
            var localVarPath = "/locations/buildings/{location_id}"
                .replace("{" + "location_id" + "}", encodeURIComponent(String(location_id)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }
            // authentication CognitoJwt required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("CognitoJwt", ["invotra/locations:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication SessionCookieHeader required
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update location information.
         * @param {string} location_id The Invotra UUID of the location.
         * @param {LocationBuildingSchemaUpdate} LocationBuildingSchemaUpdate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationsBuildingsLocationIdPut: function (location_id, LocationBuildingSchemaUpdate, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'location_id' is not null or undefined
            if (location_id === null || location_id === undefined) {
                throw new RequiredError('location_id', 'Required parameter location_id was null or undefined when calling locationsBuildingsLocationIdPut.');
            }
            // verify required parameter 'LocationBuildingSchemaUpdate' is not null or undefined
            if (LocationBuildingSchemaUpdate === null || LocationBuildingSchemaUpdate === undefined) {
                throw new RequiredError('LocationBuildingSchemaUpdate', 'Required parameter LocationBuildingSchemaUpdate was null or undefined when calling locationsBuildingsLocationIdPut.');
            }
            var localVarPath = "/locations/buildings/{location_id}"
                .replace("{" + "location_id" + "}", encodeURIComponent(String(location_id)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }
            // authentication CognitoJwt required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("CognitoJwt", ["invotra/locations:write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication SessionCookieHeader required
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            var needsSerialization = (typeof LocationBuildingSchemaUpdate !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(LocationBuildingSchemaUpdate !== undefined ? LocationBuildingSchemaUpdate : {}) : (LocationBuildingSchemaUpdate || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Provision a new location.
         * @param {LocationBuildingSchemaCreate} LocationBuildingSchemaCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationsBuildingsPost: function (LocationBuildingSchemaCreate, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'LocationBuildingSchemaCreate' is not null or undefined
            if (LocationBuildingSchemaCreate === null || LocationBuildingSchemaCreate === undefined) {
                throw new RequiredError('LocationBuildingSchemaCreate', 'Required parameter LocationBuildingSchemaCreate was null or undefined when calling locationsBuildingsPost.');
            }
            var localVarPath = "/locations/buildings";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }
            // authentication CognitoJwt required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("CognitoJwt", ["invotra/locations:write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication SessionCookieHeader required
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            var needsSerialization = (typeof LocationBuildingSchemaCreate !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(LocationBuildingSchemaCreate !== undefined ? LocationBuildingSchemaCreate : {}) : (LocationBuildingSchemaCreate || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove location information
         * @param {string} location_id The Invotra UUID of the location.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationsFloorsLocationIdDelete: function (location_id, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'location_id' is not null or undefined
            if (location_id === null || location_id === undefined) {
                throw new RequiredError('location_id', 'Required parameter location_id was null or undefined when calling locationsFloorsLocationIdDelete.');
            }
            var localVarPath = "/locations/floors/{location_id}"
                .replace("{" + "location_id" + "}", encodeURIComponent(String(location_id)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }
            // authentication CognitoJwt required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("CognitoJwt", ["invotra/locations:write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication SessionCookieHeader required
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get information about the location.
         * @param {string} location_id The Invotra UUID of the location.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationsFloorsLocationIdGet: function (location_id, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'location_id' is not null or undefined
            if (location_id === null || location_id === undefined) {
                throw new RequiredError('location_id', 'Required parameter location_id was null or undefined when calling locationsFloorsLocationIdGet.');
            }
            var localVarPath = "/locations/floors/{location_id}"
                .replace("{" + "location_id" + "}", encodeURIComponent(String(location_id)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }
            // authentication CognitoJwt required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("CognitoJwt", ["invotra/locations:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication SessionCookieHeader required
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update location information.
         * @param {string} location_id The Invotra UUID of the location.
         * @param {LocationFloorSchemaUpdate} LocationFloorSchemaUpdate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationsFloorsLocationIdPut: function (location_id, LocationFloorSchemaUpdate, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'location_id' is not null or undefined
            if (location_id === null || location_id === undefined) {
                throw new RequiredError('location_id', 'Required parameter location_id was null or undefined when calling locationsFloorsLocationIdPut.');
            }
            // verify required parameter 'LocationFloorSchemaUpdate' is not null or undefined
            if (LocationFloorSchemaUpdate === null || LocationFloorSchemaUpdate === undefined) {
                throw new RequiredError('LocationFloorSchemaUpdate', 'Required parameter LocationFloorSchemaUpdate was null or undefined when calling locationsFloorsLocationIdPut.');
            }
            var localVarPath = "/locations/floors/{location_id}"
                .replace("{" + "location_id" + "}", encodeURIComponent(String(location_id)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }
            // authentication CognitoJwt required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("CognitoJwt", ["invotra/locations:write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication SessionCookieHeader required
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            var needsSerialization = (typeof LocationFloorSchemaUpdate !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(LocationFloorSchemaUpdate !== undefined ? LocationFloorSchemaUpdate : {}) : (LocationFloorSchemaUpdate || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Provision a new location.
         * @param {LocationFloorSchemaCreate} LocationFloorSchemaCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationsFloorsPost: function (LocationFloorSchemaCreate, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'LocationFloorSchemaCreate' is not null or undefined
            if (LocationFloorSchemaCreate === null || LocationFloorSchemaCreate === undefined) {
                throw new RequiredError('LocationFloorSchemaCreate', 'Required parameter LocationFloorSchemaCreate was null or undefined when calling locationsFloorsPost.');
            }
            var localVarPath = "/locations/floors";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }
            // authentication CognitoJwt required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("CognitoJwt", ["invotra/locations:write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication SessionCookieHeader required
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            var needsSerialization = (typeof LocationFloorSchemaCreate !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(LocationFloorSchemaCreate !== undefined ? LocationFloorSchemaCreate : {}) : (LocationFloorSchemaCreate || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Search for locations.
         * @param {string} external_id Filter by external ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationsGet: function (external_id, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'external_id' is not null or undefined
            if (external_id === null || external_id === undefined) {
                throw new RequiredError('external_id', 'Required parameter external_id was null or undefined when calling locationsGet.');
            }
            var localVarPath = "/locations";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }
            // authentication CognitoJwt required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("CognitoJwt", ["invotra/locations:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication SessionCookieHeader required
            if (external_id !== undefined) {
                localVarQueryParameter['external_id'] = external_id;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Search for locations. An empty array is returned if no locations are found.
         * @param {string} [title] Filter by title. Matches on whole words.
         * @param {string} [autocomplete] Autocomplete term. Matches on location name, per letter, from the start of the word.
         * @param {string} [users_fulltext_search] Filter the list of locations to those that include users matching a search term. This is useful when you have already searched for users and want to refine your search by location (like a faceted search). Like the fulltext_search parameter of /users/search, this matches on whole words.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {number} [limit] The numbers of items to return. If the value specified is more than the maximum, the result count will be limited to the maximum.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationsListGet: function (title, autocomplete, users_fulltext_search, offset, limit, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/locations/list";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }
            // authentication CognitoJwt required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("CognitoJwt", ["invotra/locations:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication SessionCookieHeader required
            if (title !== undefined) {
                localVarQueryParameter['title'] = title;
            }
            if (autocomplete !== undefined) {
                localVarQueryParameter['autocomplete'] = autocomplete;
            }
            if (users_fulltext_search !== undefined) {
                localVarQueryParameter['users_fulltext_search'] = users_fulltext_search;
            }
            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove location information
         * @param {string} location_id The Invotra UUID of the location.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationsSitesLocationIdDelete: function (location_id, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'location_id' is not null or undefined
            if (location_id === null || location_id === undefined) {
                throw new RequiredError('location_id', 'Required parameter location_id was null or undefined when calling locationsSitesLocationIdDelete.');
            }
            var localVarPath = "/locations/sites/{location_id}"
                .replace("{" + "location_id" + "}", encodeURIComponent(String(location_id)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }
            // authentication CognitoJwt required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("CognitoJwt", ["invotra/locations:write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication SessionCookieHeader required
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get information about the location.
         * @param {string} location_id The Invotra UUID of the location.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationsSitesLocationIdGet: function (location_id, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'location_id' is not null or undefined
            if (location_id === null || location_id === undefined) {
                throw new RequiredError('location_id', 'Required parameter location_id was null or undefined when calling locationsSitesLocationIdGet.');
            }
            var localVarPath = "/locations/sites/{location_id}"
                .replace("{" + "location_id" + "}", encodeURIComponent(String(location_id)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }
            // authentication CognitoJwt required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("CognitoJwt", ["invotra/locations:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication SessionCookieHeader required
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update location information.
         * @param {string} location_id The Invotra UUID of the location.
         * @param {LocationSiteSchemaUpdate} LocationSiteSchemaUpdate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationsSitesLocationIdPut: function (location_id, LocationSiteSchemaUpdate, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'location_id' is not null or undefined
            if (location_id === null || location_id === undefined) {
                throw new RequiredError('location_id', 'Required parameter location_id was null or undefined when calling locationsSitesLocationIdPut.');
            }
            // verify required parameter 'LocationSiteSchemaUpdate' is not null or undefined
            if (LocationSiteSchemaUpdate === null || LocationSiteSchemaUpdate === undefined) {
                throw new RequiredError('LocationSiteSchemaUpdate', 'Required parameter LocationSiteSchemaUpdate was null or undefined when calling locationsSitesLocationIdPut.');
            }
            var localVarPath = "/locations/sites/{location_id}"
                .replace("{" + "location_id" + "}", encodeURIComponent(String(location_id)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }
            // authentication CognitoJwt required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("CognitoJwt", ["invotra/locations:write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication SessionCookieHeader required
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            var needsSerialization = (typeof LocationSiteSchemaUpdate !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(LocationSiteSchemaUpdate !== undefined ? LocationSiteSchemaUpdate : {}) : (LocationSiteSchemaUpdate || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Provision a new location.
         * @param {LocationSiteSchemaCreate} LocationSiteSchemaCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationsSitesPost: function (LocationSiteSchemaCreate, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'LocationSiteSchemaCreate' is not null or undefined
            if (LocationSiteSchemaCreate === null || LocationSiteSchemaCreate === undefined) {
                throw new RequiredError('LocationSiteSchemaCreate', 'Required parameter LocationSiteSchemaCreate was null or undefined when calling locationsSitesPost.');
            }
            var localVarPath = "/locations/sites";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }
            // authentication CognitoJwt required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("CognitoJwt", ["invotra/locations:write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication SessionCookieHeader required
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            var needsSerialization = (typeof LocationSiteSchemaCreate !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(LocationSiteSchemaCreate !== undefined ? LocationSiteSchemaCreate : {}) : (LocationSiteSchemaCreate || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove location information
         * @param {string} location_id The Invotra UUID of the location.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationsSpacesLocationIdDelete: function (location_id, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'location_id' is not null or undefined
            if (location_id === null || location_id === undefined) {
                throw new RequiredError('location_id', 'Required parameter location_id was null or undefined when calling locationsSpacesLocationIdDelete.');
            }
            var localVarPath = "/locations/spaces/{location_id}"
                .replace("{" + "location_id" + "}", encodeURIComponent(String(location_id)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }
            // authentication CognitoJwt required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("CognitoJwt", ["invotra/locations:write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication SessionCookieHeader required
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get information about the location.
         * @param {string} location_id The Invotra UUID of the location.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationsSpacesLocationIdGet: function (location_id, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'location_id' is not null or undefined
            if (location_id === null || location_id === undefined) {
                throw new RequiredError('location_id', 'Required parameter location_id was null or undefined when calling locationsSpacesLocationIdGet.');
            }
            var localVarPath = "/locations/spaces/{location_id}"
                .replace("{" + "location_id" + "}", encodeURIComponent(String(location_id)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }
            // authentication CognitoJwt required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("CognitoJwt", ["invotra/locations:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication SessionCookieHeader required
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update location information.
         * @param {string} location_id The Invotra UUID of the location.
         * @param {LocationSpaceSchemaUpdate} LocationSpaceSchemaUpdate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationsSpacesLocationIdPut: function (location_id, LocationSpaceSchemaUpdate, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'location_id' is not null or undefined
            if (location_id === null || location_id === undefined) {
                throw new RequiredError('location_id', 'Required parameter location_id was null or undefined when calling locationsSpacesLocationIdPut.');
            }
            // verify required parameter 'LocationSpaceSchemaUpdate' is not null or undefined
            if (LocationSpaceSchemaUpdate === null || LocationSpaceSchemaUpdate === undefined) {
                throw new RequiredError('LocationSpaceSchemaUpdate', 'Required parameter LocationSpaceSchemaUpdate was null or undefined when calling locationsSpacesLocationIdPut.');
            }
            var localVarPath = "/locations/spaces/{location_id}"
                .replace("{" + "location_id" + "}", encodeURIComponent(String(location_id)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }
            // authentication CognitoJwt required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("CognitoJwt", ["invotra/locations:write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication SessionCookieHeader required
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            var needsSerialization = (typeof LocationSpaceSchemaUpdate !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(LocationSpaceSchemaUpdate !== undefined ? LocationSpaceSchemaUpdate : {}) : (LocationSpaceSchemaUpdate || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Provision a new location.
         * @param {LocationSpaceSchemaCreate} LocationSpaceSchemaCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationsSpacesPost: function (LocationSpaceSchemaCreate, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'LocationSpaceSchemaCreate' is not null or undefined
            if (LocationSpaceSchemaCreate === null || LocationSpaceSchemaCreate === undefined) {
                throw new RequiredError('LocationSpaceSchemaCreate', 'Required parameter LocationSpaceSchemaCreate was null or undefined when calling locationsSpacesPost.');
            }
            var localVarPath = "/locations/spaces";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }
            // authentication CognitoJwt required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("CognitoJwt", ["invotra/locations:write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication SessionCookieHeader required
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            var needsSerialization = (typeof LocationSpaceSchemaCreate !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(LocationSpaceSchemaCreate !== undefined ? LocationSpaceSchemaCreate : {}) : (LocationSpaceSchemaCreate || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * LocationsApi - functional programming interface
 * @export
 */
export var LocationsApiFp = function (configuration) {
    return {
        /**
         * Remove location information
         * @param {string} location_id The Invotra UUID of the location.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationsBuildingsLocationIdDelete: function (location_id, options) {
            var localVarAxiosArgs = LocationsApiAxiosParamCreator(configuration).locationsBuildingsLocationIdDelete(location_id, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = globalAxios; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get information about the location.
         * @param {string} location_id The Invotra UUID of the location.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationsBuildingsLocationIdGet: function (location_id, options) {
            var localVarAxiosArgs = LocationsApiAxiosParamCreator(configuration).locationsBuildingsLocationIdGet(location_id, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = globalAxios; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update location information.
         * @param {string} location_id The Invotra UUID of the location.
         * @param {LocationBuildingSchemaUpdate} LocationBuildingSchemaUpdate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationsBuildingsLocationIdPut: function (location_id, LocationBuildingSchemaUpdate, options) {
            var localVarAxiosArgs = LocationsApiAxiosParamCreator(configuration).locationsBuildingsLocationIdPut(location_id, LocationBuildingSchemaUpdate, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = globalAxios; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Provision a new location.
         * @param {LocationBuildingSchemaCreate} LocationBuildingSchemaCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationsBuildingsPost: function (LocationBuildingSchemaCreate, options) {
            var localVarAxiosArgs = LocationsApiAxiosParamCreator(configuration).locationsBuildingsPost(LocationBuildingSchemaCreate, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = globalAxios; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Remove location information
         * @param {string} location_id The Invotra UUID of the location.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationsFloorsLocationIdDelete: function (location_id, options) {
            var localVarAxiosArgs = LocationsApiAxiosParamCreator(configuration).locationsFloorsLocationIdDelete(location_id, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = globalAxios; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get information about the location.
         * @param {string} location_id The Invotra UUID of the location.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationsFloorsLocationIdGet: function (location_id, options) {
            var localVarAxiosArgs = LocationsApiAxiosParamCreator(configuration).locationsFloorsLocationIdGet(location_id, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = globalAxios; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update location information.
         * @param {string} location_id The Invotra UUID of the location.
         * @param {LocationFloorSchemaUpdate} LocationFloorSchemaUpdate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationsFloorsLocationIdPut: function (location_id, LocationFloorSchemaUpdate, options) {
            var localVarAxiosArgs = LocationsApiAxiosParamCreator(configuration).locationsFloorsLocationIdPut(location_id, LocationFloorSchemaUpdate, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = globalAxios; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Provision a new location.
         * @param {LocationFloorSchemaCreate} LocationFloorSchemaCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationsFloorsPost: function (LocationFloorSchemaCreate, options) {
            var localVarAxiosArgs = LocationsApiAxiosParamCreator(configuration).locationsFloorsPost(LocationFloorSchemaCreate, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = globalAxios; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Search for locations.
         * @param {string} external_id Filter by external ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationsGet: function (external_id, options) {
            var localVarAxiosArgs = LocationsApiAxiosParamCreator(configuration).locationsGet(external_id, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = globalAxios; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Search for locations. An empty array is returned if no locations are found.
         * @param {string} [title] Filter by title. Matches on whole words.
         * @param {string} [autocomplete] Autocomplete term. Matches on location name, per letter, from the start of the word.
         * @param {string} [users_fulltext_search] Filter the list of locations to those that include users matching a search term. This is useful when you have already searched for users and want to refine your search by location (like a faceted search). Like the fulltext_search parameter of /users/search, this matches on whole words.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {number} [limit] The numbers of items to return. If the value specified is more than the maximum, the result count will be limited to the maximum.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationsListGet: function (title, autocomplete, users_fulltext_search, offset, limit, options) {
            var localVarAxiosArgs = LocationsApiAxiosParamCreator(configuration).locationsListGet(title, autocomplete, users_fulltext_search, offset, limit, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = globalAxios; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Remove location information
         * @param {string} location_id The Invotra UUID of the location.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationsSitesLocationIdDelete: function (location_id, options) {
            var localVarAxiosArgs = LocationsApiAxiosParamCreator(configuration).locationsSitesLocationIdDelete(location_id, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = globalAxios; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get information about the location.
         * @param {string} location_id The Invotra UUID of the location.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationsSitesLocationIdGet: function (location_id, options) {
            var localVarAxiosArgs = LocationsApiAxiosParamCreator(configuration).locationsSitesLocationIdGet(location_id, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = globalAxios; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update location information.
         * @param {string} location_id The Invotra UUID of the location.
         * @param {LocationSiteSchemaUpdate} LocationSiteSchemaUpdate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationsSitesLocationIdPut: function (location_id, LocationSiteSchemaUpdate, options) {
            var localVarAxiosArgs = LocationsApiAxiosParamCreator(configuration).locationsSitesLocationIdPut(location_id, LocationSiteSchemaUpdate, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = globalAxios; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Provision a new location.
         * @param {LocationSiteSchemaCreate} LocationSiteSchemaCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationsSitesPost: function (LocationSiteSchemaCreate, options) {
            var localVarAxiosArgs = LocationsApiAxiosParamCreator(configuration).locationsSitesPost(LocationSiteSchemaCreate, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = globalAxios; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Remove location information
         * @param {string} location_id The Invotra UUID of the location.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationsSpacesLocationIdDelete: function (location_id, options) {
            var localVarAxiosArgs = LocationsApiAxiosParamCreator(configuration).locationsSpacesLocationIdDelete(location_id, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = globalAxios; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get information about the location.
         * @param {string} location_id The Invotra UUID of the location.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationsSpacesLocationIdGet: function (location_id, options) {
            var localVarAxiosArgs = LocationsApiAxiosParamCreator(configuration).locationsSpacesLocationIdGet(location_id, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = globalAxios; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update location information.
         * @param {string} location_id The Invotra UUID of the location.
         * @param {LocationSpaceSchemaUpdate} LocationSpaceSchemaUpdate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationsSpacesLocationIdPut: function (location_id, LocationSpaceSchemaUpdate, options) {
            var localVarAxiosArgs = LocationsApiAxiosParamCreator(configuration).locationsSpacesLocationIdPut(location_id, LocationSpaceSchemaUpdate, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = globalAxios; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Provision a new location.
         * @param {LocationSpaceSchemaCreate} LocationSpaceSchemaCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationsSpacesPost: function (LocationSpaceSchemaCreate, options) {
            var localVarAxiosArgs = LocationsApiAxiosParamCreator(configuration).locationsSpacesPost(LocationSpaceSchemaCreate, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = globalAxios; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
/**
 * LocationsApi - factory interface
 * @export
 */
export var LocationsApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * Remove location information
         * @param {string} location_id The Invotra UUID of the location.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationsBuildingsLocationIdDelete: function (location_id, options) {
            return LocationsApiFp(configuration).locationsBuildingsLocationIdDelete(location_id, options)(axios, basePath);
        },
        /**
         * Get information about the location.
         * @param {string} location_id The Invotra UUID of the location.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationsBuildingsLocationIdGet: function (location_id, options) {
            return LocationsApiFp(configuration).locationsBuildingsLocationIdGet(location_id, options)(axios, basePath);
        },
        /**
         * Update location information.
         * @param {string} location_id The Invotra UUID of the location.
         * @param {LocationBuildingSchemaUpdate} LocationBuildingSchemaUpdate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationsBuildingsLocationIdPut: function (location_id, LocationBuildingSchemaUpdate, options) {
            return LocationsApiFp(configuration).locationsBuildingsLocationIdPut(location_id, LocationBuildingSchemaUpdate, options)(axios, basePath);
        },
        /**
         * Provision a new location.
         * @param {LocationBuildingSchemaCreate} LocationBuildingSchemaCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationsBuildingsPost: function (LocationBuildingSchemaCreate, options) {
            return LocationsApiFp(configuration).locationsBuildingsPost(LocationBuildingSchemaCreate, options)(axios, basePath);
        },
        /**
         * Remove location information
         * @param {string} location_id The Invotra UUID of the location.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationsFloorsLocationIdDelete: function (location_id, options) {
            return LocationsApiFp(configuration).locationsFloorsLocationIdDelete(location_id, options)(axios, basePath);
        },
        /**
         * Get information about the location.
         * @param {string} location_id The Invotra UUID of the location.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationsFloorsLocationIdGet: function (location_id, options) {
            return LocationsApiFp(configuration).locationsFloorsLocationIdGet(location_id, options)(axios, basePath);
        },
        /**
         * Update location information.
         * @param {string} location_id The Invotra UUID of the location.
         * @param {LocationFloorSchemaUpdate} LocationFloorSchemaUpdate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationsFloorsLocationIdPut: function (location_id, LocationFloorSchemaUpdate, options) {
            return LocationsApiFp(configuration).locationsFloorsLocationIdPut(location_id, LocationFloorSchemaUpdate, options)(axios, basePath);
        },
        /**
         * Provision a new location.
         * @param {LocationFloorSchemaCreate} LocationFloorSchemaCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationsFloorsPost: function (LocationFloorSchemaCreate, options) {
            return LocationsApiFp(configuration).locationsFloorsPost(LocationFloorSchemaCreate, options)(axios, basePath);
        },
        /**
         * Search for locations.
         * @param {string} external_id Filter by external ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationsGet: function (external_id, options) {
            return LocationsApiFp(configuration).locationsGet(external_id, options)(axios, basePath);
        },
        /**
         * Search for locations. An empty array is returned if no locations are found.
         * @param {string} [title] Filter by title. Matches on whole words.
         * @param {string} [autocomplete] Autocomplete term. Matches on location name, per letter, from the start of the word.
         * @param {string} [users_fulltext_search] Filter the list of locations to those that include users matching a search term. This is useful when you have already searched for users and want to refine your search by location (like a faceted search). Like the fulltext_search parameter of /users/search, this matches on whole words.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {number} [limit] The numbers of items to return. If the value specified is more than the maximum, the result count will be limited to the maximum.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationsListGet: function (title, autocomplete, users_fulltext_search, offset, limit, options) {
            return LocationsApiFp(configuration).locationsListGet(title, autocomplete, users_fulltext_search, offset, limit, options)(axios, basePath);
        },
        /**
         * Remove location information
         * @param {string} location_id The Invotra UUID of the location.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationsSitesLocationIdDelete: function (location_id, options) {
            return LocationsApiFp(configuration).locationsSitesLocationIdDelete(location_id, options)(axios, basePath);
        },
        /**
         * Get information about the location.
         * @param {string} location_id The Invotra UUID of the location.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationsSitesLocationIdGet: function (location_id, options) {
            return LocationsApiFp(configuration).locationsSitesLocationIdGet(location_id, options)(axios, basePath);
        },
        /**
         * Update location information.
         * @param {string} location_id The Invotra UUID of the location.
         * @param {LocationSiteSchemaUpdate} LocationSiteSchemaUpdate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationsSitesLocationIdPut: function (location_id, LocationSiteSchemaUpdate, options) {
            return LocationsApiFp(configuration).locationsSitesLocationIdPut(location_id, LocationSiteSchemaUpdate, options)(axios, basePath);
        },
        /**
         * Provision a new location.
         * @param {LocationSiteSchemaCreate} LocationSiteSchemaCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationsSitesPost: function (LocationSiteSchemaCreate, options) {
            return LocationsApiFp(configuration).locationsSitesPost(LocationSiteSchemaCreate, options)(axios, basePath);
        },
        /**
         * Remove location information
         * @param {string} location_id The Invotra UUID of the location.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationsSpacesLocationIdDelete: function (location_id, options) {
            return LocationsApiFp(configuration).locationsSpacesLocationIdDelete(location_id, options)(axios, basePath);
        },
        /**
         * Get information about the location.
         * @param {string} location_id The Invotra UUID of the location.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationsSpacesLocationIdGet: function (location_id, options) {
            return LocationsApiFp(configuration).locationsSpacesLocationIdGet(location_id, options)(axios, basePath);
        },
        /**
         * Update location information.
         * @param {string} location_id The Invotra UUID of the location.
         * @param {LocationSpaceSchemaUpdate} LocationSpaceSchemaUpdate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationsSpacesLocationIdPut: function (location_id, LocationSpaceSchemaUpdate, options) {
            return LocationsApiFp(configuration).locationsSpacesLocationIdPut(location_id, LocationSpaceSchemaUpdate, options)(axios, basePath);
        },
        /**
         * Provision a new location.
         * @param {LocationSpaceSchemaCreate} LocationSpaceSchemaCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationsSpacesPost: function (LocationSpaceSchemaCreate, options) {
            return LocationsApiFp(configuration).locationsSpacesPost(LocationSpaceSchemaCreate, options)(axios, basePath);
        },
    };
};
/**
 * LocationsApi - object-oriented interface
 * @export
 * @class LocationsApi
 * @extends {BaseAPI}
 */
var LocationsApi = /** @class */ (function (_super) {
    __extends(LocationsApi, _super);
    function LocationsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Remove location information
     * @param {string} location_id The Invotra UUID of the location.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationsApi
     */
    LocationsApi.prototype.locationsBuildingsLocationIdDelete = function (location_id, options) {
        return LocationsApiFp(this.configuration).locationsBuildingsLocationIdDelete(location_id, options)(this.axios, this.basePath);
    };
    /**
     * Get information about the location.
     * @param {string} location_id The Invotra UUID of the location.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationsApi
     */
    LocationsApi.prototype.locationsBuildingsLocationIdGet = function (location_id, options) {
        return LocationsApiFp(this.configuration).locationsBuildingsLocationIdGet(location_id, options)(this.axios, this.basePath);
    };
    /**
     * Update location information.
     * @param {string} location_id The Invotra UUID of the location.
     * @param {LocationBuildingSchemaUpdate} LocationBuildingSchemaUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationsApi
     */
    LocationsApi.prototype.locationsBuildingsLocationIdPut = function (location_id, LocationBuildingSchemaUpdate, options) {
        return LocationsApiFp(this.configuration).locationsBuildingsLocationIdPut(location_id, LocationBuildingSchemaUpdate, options)(this.axios, this.basePath);
    };
    /**
     * Provision a new location.
     * @param {LocationBuildingSchemaCreate} LocationBuildingSchemaCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationsApi
     */
    LocationsApi.prototype.locationsBuildingsPost = function (LocationBuildingSchemaCreate, options) {
        return LocationsApiFp(this.configuration).locationsBuildingsPost(LocationBuildingSchemaCreate, options)(this.axios, this.basePath);
    };
    /**
     * Remove location information
     * @param {string} location_id The Invotra UUID of the location.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationsApi
     */
    LocationsApi.prototype.locationsFloorsLocationIdDelete = function (location_id, options) {
        return LocationsApiFp(this.configuration).locationsFloorsLocationIdDelete(location_id, options)(this.axios, this.basePath);
    };
    /**
     * Get information about the location.
     * @param {string} location_id The Invotra UUID of the location.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationsApi
     */
    LocationsApi.prototype.locationsFloorsLocationIdGet = function (location_id, options) {
        return LocationsApiFp(this.configuration).locationsFloorsLocationIdGet(location_id, options)(this.axios, this.basePath);
    };
    /**
     * Update location information.
     * @param {string} location_id The Invotra UUID of the location.
     * @param {LocationFloorSchemaUpdate} LocationFloorSchemaUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationsApi
     */
    LocationsApi.prototype.locationsFloorsLocationIdPut = function (location_id, LocationFloorSchemaUpdate, options) {
        return LocationsApiFp(this.configuration).locationsFloorsLocationIdPut(location_id, LocationFloorSchemaUpdate, options)(this.axios, this.basePath);
    };
    /**
     * Provision a new location.
     * @param {LocationFloorSchemaCreate} LocationFloorSchemaCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationsApi
     */
    LocationsApi.prototype.locationsFloorsPost = function (LocationFloorSchemaCreate, options) {
        return LocationsApiFp(this.configuration).locationsFloorsPost(LocationFloorSchemaCreate, options)(this.axios, this.basePath);
    };
    /**
     * Search for locations.
     * @param {string} external_id Filter by external ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationsApi
     */
    LocationsApi.prototype.locationsGet = function (external_id, options) {
        return LocationsApiFp(this.configuration).locationsGet(external_id, options)(this.axios, this.basePath);
    };
    /**
     * Search for locations. An empty array is returned if no locations are found.
     * @param {string} [title] Filter by title. Matches on whole words.
     * @param {string} [autocomplete] Autocomplete term. Matches on location name, per letter, from the start of the word.
     * @param {string} [users_fulltext_search] Filter the list of locations to those that include users matching a search term. This is useful when you have already searched for users and want to refine your search by location (like a faceted search). Like the fulltext_search parameter of /users/search, this matches on whole words.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {number} [limit] The numbers of items to return. If the value specified is more than the maximum, the result count will be limited to the maximum.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationsApi
     */
    LocationsApi.prototype.locationsListGet = function (title, autocomplete, users_fulltext_search, offset, limit, options) {
        return LocationsApiFp(this.configuration).locationsListGet(title, autocomplete, users_fulltext_search, offset, limit, options)(this.axios, this.basePath);
    };
    /**
     * Remove location information
     * @param {string} location_id The Invotra UUID of the location.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationsApi
     */
    LocationsApi.prototype.locationsSitesLocationIdDelete = function (location_id, options) {
        return LocationsApiFp(this.configuration).locationsSitesLocationIdDelete(location_id, options)(this.axios, this.basePath);
    };
    /**
     * Get information about the location.
     * @param {string} location_id The Invotra UUID of the location.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationsApi
     */
    LocationsApi.prototype.locationsSitesLocationIdGet = function (location_id, options) {
        return LocationsApiFp(this.configuration).locationsSitesLocationIdGet(location_id, options)(this.axios, this.basePath);
    };
    /**
     * Update location information.
     * @param {string} location_id The Invotra UUID of the location.
     * @param {LocationSiteSchemaUpdate} LocationSiteSchemaUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationsApi
     */
    LocationsApi.prototype.locationsSitesLocationIdPut = function (location_id, LocationSiteSchemaUpdate, options) {
        return LocationsApiFp(this.configuration).locationsSitesLocationIdPut(location_id, LocationSiteSchemaUpdate, options)(this.axios, this.basePath);
    };
    /**
     * Provision a new location.
     * @param {LocationSiteSchemaCreate} LocationSiteSchemaCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationsApi
     */
    LocationsApi.prototype.locationsSitesPost = function (LocationSiteSchemaCreate, options) {
        return LocationsApiFp(this.configuration).locationsSitesPost(LocationSiteSchemaCreate, options)(this.axios, this.basePath);
    };
    /**
     * Remove location information
     * @param {string} location_id The Invotra UUID of the location.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationsApi
     */
    LocationsApi.prototype.locationsSpacesLocationIdDelete = function (location_id, options) {
        return LocationsApiFp(this.configuration).locationsSpacesLocationIdDelete(location_id, options)(this.axios, this.basePath);
    };
    /**
     * Get information about the location.
     * @param {string} location_id The Invotra UUID of the location.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationsApi
     */
    LocationsApi.prototype.locationsSpacesLocationIdGet = function (location_id, options) {
        return LocationsApiFp(this.configuration).locationsSpacesLocationIdGet(location_id, options)(this.axios, this.basePath);
    };
    /**
     * Update location information.
     * @param {string} location_id The Invotra UUID of the location.
     * @param {LocationSpaceSchemaUpdate} LocationSpaceSchemaUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationsApi
     */
    LocationsApi.prototype.locationsSpacesLocationIdPut = function (location_id, LocationSpaceSchemaUpdate, options) {
        return LocationsApiFp(this.configuration).locationsSpacesLocationIdPut(location_id, LocationSpaceSchemaUpdate, options)(this.axios, this.basePath);
    };
    /**
     * Provision a new location.
     * @param {LocationSpaceSchemaCreate} LocationSpaceSchemaCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationsApi
     */
    LocationsApi.prototype.locationsSpacesPost = function (LocationSpaceSchemaCreate, options) {
        return LocationsApiFp(this.configuration).locationsSpacesPost(LocationSpaceSchemaCreate, options)(this.axios, this.basePath);
    };
    return LocationsApi;
}(BaseAPI));
export { LocationsApi };
//# sourceMappingURL=locations-api.js.map