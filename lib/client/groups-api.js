// tslint:disable
/**
 * InvotraAPI
 * In general most fields are optional for update (PUT) requests; you can leave them blank (pass an empty string / array / whatever as appropriate) to clear them, or omit the key to leave them unchanged.
 *
 * The version of the OpenAPI document: 0.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import * as globalImportUrl from 'url';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, BaseAPI, RequiredError } from '../base';
/**
 * GroupsApi - axios parameter creator
 * @export
 */
export var GroupsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @param {string} [label] Filter by label. Matches on whole words.
         * @param {string} [autocomplete] Autocomplete term. Matches on group category name, per letter, from the start of the word.
         * @param {string} [group_fulltext_search] Filter the list of categories to those that include groups matching a search term. This is useful when you have already searched for groups and want to refine your search by category (like a faceted search). Like the fulltext_search parameter of /groups/search, this matches on whole words.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {number} [limit] The numbers of items to return. If the value specified is more than the maximum, the result count will be limited to the maximum.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsCategoriesGet: function (label, autocomplete, group_fulltext_search, offset, limit, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/groups/categories";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }
            // authentication SessionCookieHeader required
            if (label !== undefined) {
                localVarQueryParameter['label'] = label;
            }
            if (autocomplete !== undefined) {
                localVarQueryParameter['autocomplete'] = autocomplete;
            }
            if (group_fulltext_search !== undefined) {
                localVarQueryParameter['group_fulltext_search'] = group_fulltext_search;
            }
            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Search for groups. Returns list of uuids. Returns an empty array if no groups are found.
         * @param {string} external_id Filter by external ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGet: function (external_id, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'external_id' is not null or undefined
            if (external_id === null || external_id === undefined) {
                throw new RequiredError('external_id', 'Required parameter external_id was null or undefined when calling groupsGet.');
            }
            var localVarPath = "/groups";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }
            // authentication SessionCookieHeader required
            if (external_id !== undefined) {
                localVarQueryParameter['external_id'] = external_id;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a group document folder.
         * @param {string} group_id The Invotra UUID of the group.
         * @param {string} group_document_folder_id The Invotra UUID of the group document folders.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGroupIdDocumentFoldersGroupDocumentFolderIdDelete: function (group_id, group_document_folder_id, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'group_id' is not null or undefined
            if (group_id === null || group_id === undefined) {
                throw new RequiredError('group_id', 'Required parameter group_id was null or undefined when calling groupsGroupIdDocumentFoldersGroupDocumentFolderIdDelete.');
            }
            // verify required parameter 'group_document_folder_id' is not null or undefined
            if (group_document_folder_id === null || group_document_folder_id === undefined) {
                throw new RequiredError('group_document_folder_id', 'Required parameter group_document_folder_id was null or undefined when calling groupsGroupIdDocumentFoldersGroupDocumentFolderIdDelete.');
            }
            var localVarPath = "/groups/{group_id}/document_folders/{group_document_folder_id}"
                .replace("{" + "group_id" + "}", encodeURIComponent(String(group_id)))
                .replace("{" + "group_document_folder_id" + "}", encodeURIComponent(String(group_document_folder_id)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }
            // authentication SessionCookieHeader required
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get information about the group document folder.
         * @param {string} group_id The Invotra UUID of the group.
         * @param {string} group_document_folder_id The Invotra UUID of the group document folders.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGroupIdDocumentFoldersGroupDocumentFolderIdGet: function (group_id, group_document_folder_id, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'group_id' is not null or undefined
            if (group_id === null || group_id === undefined) {
                throw new RequiredError('group_id', 'Required parameter group_id was null or undefined when calling groupsGroupIdDocumentFoldersGroupDocumentFolderIdGet.');
            }
            // verify required parameter 'group_document_folder_id' is not null or undefined
            if (group_document_folder_id === null || group_document_folder_id === undefined) {
                throw new RequiredError('group_document_folder_id', 'Required parameter group_document_folder_id was null or undefined when calling groupsGroupIdDocumentFoldersGroupDocumentFolderIdGet.');
            }
            var localVarPath = "/groups/{group_id}/document_folders/{group_document_folder_id}"
                .replace("{" + "group_id" + "}", encodeURIComponent(String(group_id)))
                .replace("{" + "group_document_folder_id" + "}", encodeURIComponent(String(group_document_folder_id)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }
            // authentication SessionCookieHeader required
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update group document folder information.
         * @param {string} group_id The Invotra UUID of the group.
         * @param {string} group_document_folder_id The Invotra UUID of the group document folders.
         * @param {GroupDocumentFolderSchemaUpdate} GroupDocumentFolderSchemaUpdate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGroupIdDocumentFoldersGroupDocumentFolderIdPut: function (group_id, group_document_folder_id, GroupDocumentFolderSchemaUpdate, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'group_id' is not null or undefined
            if (group_id === null || group_id === undefined) {
                throw new RequiredError('group_id', 'Required parameter group_id was null or undefined when calling groupsGroupIdDocumentFoldersGroupDocumentFolderIdPut.');
            }
            // verify required parameter 'group_document_folder_id' is not null or undefined
            if (group_document_folder_id === null || group_document_folder_id === undefined) {
                throw new RequiredError('group_document_folder_id', 'Required parameter group_document_folder_id was null or undefined when calling groupsGroupIdDocumentFoldersGroupDocumentFolderIdPut.');
            }
            // verify required parameter 'GroupDocumentFolderSchemaUpdate' is not null or undefined
            if (GroupDocumentFolderSchemaUpdate === null || GroupDocumentFolderSchemaUpdate === undefined) {
                throw new RequiredError('GroupDocumentFolderSchemaUpdate', 'Required parameter GroupDocumentFolderSchemaUpdate was null or undefined when calling groupsGroupIdDocumentFoldersGroupDocumentFolderIdPut.');
            }
            var localVarPath = "/groups/{group_id}/document_folders/{group_document_folder_id}"
                .replace("{" + "group_id" + "}", encodeURIComponent(String(group_id)))
                .replace("{" + "group_document_folder_id" + "}", encodeURIComponent(String(group_document_folder_id)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }
            // authentication SessionCookieHeader required
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            var needsSerialization = (typeof GroupDocumentFolderSchemaUpdate !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(GroupDocumentFolderSchemaUpdate !== undefined ? GroupDocumentFolderSchemaUpdate : {}) : (GroupDocumentFolderSchemaUpdate || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Search for group document folders. An empty array is returned if no group document folders are found.
         * @param {string} group_id The Invotra UUID of the group.
         * @param {string} [name] Filter by name. Matches on whole words.
         * @param {string} [external_id] Filter by external ID.
         * @param {string} [valid_parents_for] Filter out invalid parents (self and children) for the specified Invotra UUID of the group document folder.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {number} [limit] The numbers of items to return. If the value specified is more than the maximum, the result count will be limited to the maximum.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGroupIdDocumentFoldersListGet: function (group_id, name, external_id, valid_parents_for, offset, limit, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'group_id' is not null or undefined
            if (group_id === null || group_id === undefined) {
                throw new RequiredError('group_id', 'Required parameter group_id was null or undefined when calling groupsGroupIdDocumentFoldersListGet.');
            }
            var localVarPath = "/groups/{group_id}/document_folders/list"
                .replace("{" + "group_id" + "}", encodeURIComponent(String(group_id)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }
            // authentication SessionCookieHeader required
            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }
            if (external_id !== undefined) {
                localVarQueryParameter['external_id'] = external_id;
            }
            if (valid_parents_for !== undefined) {
                localVarQueryParameter['valid_parents_for'] = valid_parents_for;
            }
            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Provision a new group document folder.
         * @param {string} group_id The Invotra UUID of the group.
         * @param {GroupDocumentFolderSchemaCreate} GroupDocumentFolderSchemaCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGroupIdDocumentFoldersPost: function (group_id, GroupDocumentFolderSchemaCreate, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'group_id' is not null or undefined
            if (group_id === null || group_id === undefined) {
                throw new RequiredError('group_id', 'Required parameter group_id was null or undefined when calling groupsGroupIdDocumentFoldersPost.');
            }
            // verify required parameter 'GroupDocumentFolderSchemaCreate' is not null or undefined
            if (GroupDocumentFolderSchemaCreate === null || GroupDocumentFolderSchemaCreate === undefined) {
                throw new RequiredError('GroupDocumentFolderSchemaCreate', 'Required parameter GroupDocumentFolderSchemaCreate was null or undefined when calling groupsGroupIdDocumentFoldersPost.');
            }
            var localVarPath = "/groups/{group_id}/document_folders"
                .replace("{" + "group_id" + "}", encodeURIComponent(String(group_id)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }
            // authentication SessionCookieHeader required
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            var needsSerialization = (typeof GroupDocumentFolderSchemaCreate !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(GroupDocumentFolderSchemaCreate !== undefined ? GroupDocumentFolderSchemaCreate : {}) : (GroupDocumentFolderSchemaCreate || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get information about the group.
         * @param {string} group_id The Invotra UUID of the group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGroupIdGet: function (group_id, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'group_id' is not null or undefined
            if (group_id === null || group_id === undefined) {
                throw new RequiredError('group_id', 'Required parameter group_id was null or undefined when calling groupsGroupIdGet.');
            }
            var localVarPath = "/groups/{group_id}"
                .replace("{" + "group_id" + "}", encodeURIComponent(String(group_id)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }
            // authentication SessionCookieHeader required
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of group members.
         * @param {string} group_id The Invotra UUID of the group.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {number} [limit] The numbers of items to return. If the value specified is more than the maximum, the result count will be limited to the maximum.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGroupIdMembersGet: function (group_id, offset, limit, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'group_id' is not null or undefined
            if (group_id === null || group_id === undefined) {
                throw new RequiredError('group_id', 'Required parameter group_id was null or undefined when calling groupsGroupIdMembersGet.');
            }
            var localVarPath = "/groups/{group_id}/members"
                .replace("{" + "group_id" + "}", encodeURIComponent(String(group_id)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }
            // authentication SessionCookieHeader required
            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove the user\'s membership of the group. Note that at present the {user_id} must match that of the current logged-in user.
         * @param {string} group_id The Invotra UUID of the group.
         * @param {string} user_id The Invotra UUID of the user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGroupIdMembersUserIdDelete: function (group_id, user_id, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'group_id' is not null or undefined
            if (group_id === null || group_id === undefined) {
                throw new RequiredError('group_id', 'Required parameter group_id was null or undefined when calling groupsGroupIdMembersUserIdDelete.');
            }
            // verify required parameter 'user_id' is not null or undefined
            if (user_id === null || user_id === undefined) {
                throw new RequiredError('user_id', 'Required parameter user_id was null or undefined when calling groupsGroupIdMembersUserIdDelete.');
            }
            var localVarPath = "/groups/{group_id}/members/{user_id}"
                .replace("{" + "group_id" + "}", encodeURIComponent(String(group_id)))
                .replace("{" + "user_id" + "}", encodeURIComponent(String(user_id)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }
            // authentication SessionCookieHeader required
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Add a user to a group or update information about a user\'s existing group membership. Note that at present the {user_id} must match that of the current logged-in user.
         * @param {string} group_id The Invotra UUID of the group.
         * @param {string} user_id The Invotra UUID of the user.
         * @param {GroupMembershipCommonSchema} [GroupMembershipCommonSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGroupIdMembersUserIdPut: function (group_id, user_id, GroupMembershipCommonSchema, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'group_id' is not null or undefined
            if (group_id === null || group_id === undefined) {
                throw new RequiredError('group_id', 'Required parameter group_id was null or undefined when calling groupsGroupIdMembersUserIdPut.');
            }
            // verify required parameter 'user_id' is not null or undefined
            if (user_id === null || user_id === undefined) {
                throw new RequiredError('user_id', 'Required parameter user_id was null or undefined when calling groupsGroupIdMembersUserIdPut.');
            }
            var localVarPath = "/groups/{group_id}/members/{user_id}"
                .replace("{" + "group_id" + "}", encodeURIComponent(String(group_id)))
                .replace("{" + "user_id" + "}", encodeURIComponent(String(user_id)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }
            // authentication SessionCookieHeader required
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            var needsSerialization = (typeof GroupMembershipCommonSchema !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(GroupMembershipCommonSchema !== undefined ? GroupMembershipCommonSchema : {}) : (GroupMembershipCommonSchema || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Check if the current user is a member of a group.
         * @param {string} group_id The Invotra UUID of the group to check membership status against.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGroupIdMyMembershipGet: function (group_id, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'group_id' is not null or undefined
            if (group_id === null || group_id === undefined) {
                throw new RequiredError('group_id', 'Required parameter group_id was null or undefined when calling groupsGroupIdMyMembershipGet.');
            }
            var localVarPath = "/groups/{group_id}/my_membership"
                .replace("{" + "group_id" + "}", encodeURIComponent(String(group_id)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }
            // authentication SessionCookieHeader required
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of group posts. This returns only the top-level posts in the group, not their replies.
         * @param {string} group_id The Invotra UUID of the group.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {number} [limit] The numbers of items to return. If the value specified is more than the maximum, the result count will be limited to the maximum.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGroupIdPostsGet: function (group_id, offset, limit, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'group_id' is not null or undefined
            if (group_id === null || group_id === undefined) {
                throw new RequiredError('group_id', 'Required parameter group_id was null or undefined when calling groupsGroupIdPostsGet.');
            }
            var localVarPath = "/groups/{group_id}/posts"
                .replace("{" + "group_id" + "}", encodeURIComponent(String(group_id)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }
            // authentication SessionCookieHeader required
            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a group.
         * @param {string} group_id The Invotra UUID of the group.
         * @param {GroupSchema} GroupSchema
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGroupIdPut: function (group_id, GroupSchema, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'group_id' is not null or undefined
            if (group_id === null || group_id === undefined) {
                throw new RequiredError('group_id', 'Required parameter group_id was null or undefined when calling groupsGroupIdPut.');
            }
            // verify required parameter 'GroupSchema' is not null or undefined
            if (GroupSchema === null || GroupSchema === undefined) {
                throw new RequiredError('GroupSchema', 'Required parameter GroupSchema was null or undefined when calling groupsGroupIdPut.');
            }
            var localVarPath = "/groups/{group_id}"
                .replace("{" + "group_id" + "}", encodeURIComponent(String(group_id)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }
            // authentication SessionCookieHeader required
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            var needsSerialization = (typeof GroupSchema !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(GroupSchema !== undefined ? GroupSchema : {}) : (GroupSchema || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsMetricsGet: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/groups/metrics";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }
            // authentication SessionCookieHeader required
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a group.
         * @param {GroupSchema} GroupSchema
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsPost: function (GroupSchema, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'GroupSchema' is not null or undefined
            if (GroupSchema === null || GroupSchema === undefined) {
                throw new RequiredError('GroupSchema', 'Required parameter GroupSchema was null or undefined when calling groupsPost.');
            }
            var localVarPath = "/groups";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }
            // authentication SessionCookieHeader required
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            var needsSerialization = (typeof GroupSchema !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(GroupSchema !== undefined ? GroupSchema : {}) : (GroupSchema || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} [fulltext_search] Search term. Matches on whole words.
         * @param {string} [category] Filter by UUID of a category.
         * @param {boolean} [my_groups] Filter by groups the current user is a member of.
         * @param {'relevance' | 'likes' | 'members_count' | 'timestamp_created'} [sort] Field to sort by.
         * @param {'asc' | 'desc'} [order] Sort order.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {number} [limit] The numbers of items to return. If the value specified is more than the maximum, the result count will be limited to the maximum.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsSearchGet: function (fulltext_search, category, my_groups, sort, order, offset, limit, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/groups/search";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }
            // authentication SessionCookieHeader required
            if (fulltext_search !== undefined) {
                localVarQueryParameter['fulltext_search'] = fulltext_search;
            }
            if (category !== undefined) {
                localVarQueryParameter['category'] = category;
            }
            if (my_groups !== undefined) {
                localVarQueryParameter['my_groups'] = my_groups;
            }
            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }
            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }
            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * GroupsApi - functional programming interface
 * @export
 */
export var GroupsApiFp = function (configuration) {
    return {
        /**
         *
         * @param {string} [label] Filter by label. Matches on whole words.
         * @param {string} [autocomplete] Autocomplete term. Matches on group category name, per letter, from the start of the word.
         * @param {string} [group_fulltext_search] Filter the list of categories to those that include groups matching a search term. This is useful when you have already searched for groups and want to refine your search by category (like a faceted search). Like the fulltext_search parameter of /groups/search, this matches on whole words.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {number} [limit] The numbers of items to return. If the value specified is more than the maximum, the result count will be limited to the maximum.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsCategoriesGet: function (label, autocomplete, group_fulltext_search, offset, limit, options) {
            var localVarAxiosArgs = GroupsApiAxiosParamCreator(configuration).groupsCategoriesGet(label, autocomplete, group_fulltext_search, offset, limit, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = globalAxios; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Search for groups. Returns list of uuids. Returns an empty array if no groups are found.
         * @param {string} external_id Filter by external ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGet: function (external_id, options) {
            var localVarAxiosArgs = GroupsApiAxiosParamCreator(configuration).groupsGet(external_id, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = globalAxios; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete a group document folder.
         * @param {string} group_id The Invotra UUID of the group.
         * @param {string} group_document_folder_id The Invotra UUID of the group document folders.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGroupIdDocumentFoldersGroupDocumentFolderIdDelete: function (group_id, group_document_folder_id, options) {
            var localVarAxiosArgs = GroupsApiAxiosParamCreator(configuration).groupsGroupIdDocumentFoldersGroupDocumentFolderIdDelete(group_id, group_document_folder_id, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = globalAxios; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get information about the group document folder.
         * @param {string} group_id The Invotra UUID of the group.
         * @param {string} group_document_folder_id The Invotra UUID of the group document folders.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGroupIdDocumentFoldersGroupDocumentFolderIdGet: function (group_id, group_document_folder_id, options) {
            var localVarAxiosArgs = GroupsApiAxiosParamCreator(configuration).groupsGroupIdDocumentFoldersGroupDocumentFolderIdGet(group_id, group_document_folder_id, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = globalAxios; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update group document folder information.
         * @param {string} group_id The Invotra UUID of the group.
         * @param {string} group_document_folder_id The Invotra UUID of the group document folders.
         * @param {GroupDocumentFolderSchemaUpdate} GroupDocumentFolderSchemaUpdate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGroupIdDocumentFoldersGroupDocumentFolderIdPut: function (group_id, group_document_folder_id, GroupDocumentFolderSchemaUpdate, options) {
            var localVarAxiosArgs = GroupsApiAxiosParamCreator(configuration).groupsGroupIdDocumentFoldersGroupDocumentFolderIdPut(group_id, group_document_folder_id, GroupDocumentFolderSchemaUpdate, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = globalAxios; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Search for group document folders. An empty array is returned if no group document folders are found.
         * @param {string} group_id The Invotra UUID of the group.
         * @param {string} [name] Filter by name. Matches on whole words.
         * @param {string} [external_id] Filter by external ID.
         * @param {string} [valid_parents_for] Filter out invalid parents (self and children) for the specified Invotra UUID of the group document folder.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {number} [limit] The numbers of items to return. If the value specified is more than the maximum, the result count will be limited to the maximum.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGroupIdDocumentFoldersListGet: function (group_id, name, external_id, valid_parents_for, offset, limit, options) {
            var localVarAxiosArgs = GroupsApiAxiosParamCreator(configuration).groupsGroupIdDocumentFoldersListGet(group_id, name, external_id, valid_parents_for, offset, limit, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = globalAxios; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Provision a new group document folder.
         * @param {string} group_id The Invotra UUID of the group.
         * @param {GroupDocumentFolderSchemaCreate} GroupDocumentFolderSchemaCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGroupIdDocumentFoldersPost: function (group_id, GroupDocumentFolderSchemaCreate, options) {
            var localVarAxiosArgs = GroupsApiAxiosParamCreator(configuration).groupsGroupIdDocumentFoldersPost(group_id, GroupDocumentFolderSchemaCreate, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = globalAxios; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get information about the group.
         * @param {string} group_id The Invotra UUID of the group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGroupIdGet: function (group_id, options) {
            var localVarAxiosArgs = GroupsApiAxiosParamCreator(configuration).groupsGroupIdGet(group_id, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = globalAxios; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get a list of group members.
         * @param {string} group_id The Invotra UUID of the group.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {number} [limit] The numbers of items to return. If the value specified is more than the maximum, the result count will be limited to the maximum.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGroupIdMembersGet: function (group_id, offset, limit, options) {
            var localVarAxiosArgs = GroupsApiAxiosParamCreator(configuration).groupsGroupIdMembersGet(group_id, offset, limit, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = globalAxios; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Remove the user\'s membership of the group. Note that at present the {user_id} must match that of the current logged-in user.
         * @param {string} group_id The Invotra UUID of the group.
         * @param {string} user_id The Invotra UUID of the user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGroupIdMembersUserIdDelete: function (group_id, user_id, options) {
            var localVarAxiosArgs = GroupsApiAxiosParamCreator(configuration).groupsGroupIdMembersUserIdDelete(group_id, user_id, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = globalAxios; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Add a user to a group or update information about a user\'s existing group membership. Note that at present the {user_id} must match that of the current logged-in user.
         * @param {string} group_id The Invotra UUID of the group.
         * @param {string} user_id The Invotra UUID of the user.
         * @param {GroupMembershipCommonSchema} [GroupMembershipCommonSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGroupIdMembersUserIdPut: function (group_id, user_id, GroupMembershipCommonSchema, options) {
            var localVarAxiosArgs = GroupsApiAxiosParamCreator(configuration).groupsGroupIdMembersUserIdPut(group_id, user_id, GroupMembershipCommonSchema, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = globalAxios; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Check if the current user is a member of a group.
         * @param {string} group_id The Invotra UUID of the group to check membership status against.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGroupIdMyMembershipGet: function (group_id, options) {
            var localVarAxiosArgs = GroupsApiAxiosParamCreator(configuration).groupsGroupIdMyMembershipGet(group_id, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = globalAxios; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get a list of group posts. This returns only the top-level posts in the group, not their replies.
         * @param {string} group_id The Invotra UUID of the group.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {number} [limit] The numbers of items to return. If the value specified is more than the maximum, the result count will be limited to the maximum.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGroupIdPostsGet: function (group_id, offset, limit, options) {
            var localVarAxiosArgs = GroupsApiAxiosParamCreator(configuration).groupsGroupIdPostsGet(group_id, offset, limit, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = globalAxios; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update a group.
         * @param {string} group_id The Invotra UUID of the group.
         * @param {GroupSchema} GroupSchema
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGroupIdPut: function (group_id, GroupSchema, options) {
            var localVarAxiosArgs = GroupsApiAxiosParamCreator(configuration).groupsGroupIdPut(group_id, GroupSchema, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = globalAxios; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsMetricsGet: function (options) {
            var localVarAxiosArgs = GroupsApiAxiosParamCreator(configuration).groupsMetricsGet(options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = globalAxios; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create a group.
         * @param {GroupSchema} GroupSchema
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsPost: function (GroupSchema, options) {
            var localVarAxiosArgs = GroupsApiAxiosParamCreator(configuration).groupsPost(GroupSchema, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = globalAxios; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} [fulltext_search] Search term. Matches on whole words.
         * @param {string} [category] Filter by UUID of a category.
         * @param {boolean} [my_groups] Filter by groups the current user is a member of.
         * @param {'relevance' | 'likes' | 'members_count' | 'timestamp_created'} [sort] Field to sort by.
         * @param {'asc' | 'desc'} [order] Sort order.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {number} [limit] The numbers of items to return. If the value specified is more than the maximum, the result count will be limited to the maximum.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsSearchGet: function (fulltext_search, category, my_groups, sort, order, offset, limit, options) {
            var localVarAxiosArgs = GroupsApiAxiosParamCreator(configuration).groupsSearchGet(fulltext_search, category, my_groups, sort, order, offset, limit, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = globalAxios; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
/**
 * GroupsApi - factory interface
 * @export
 */
export var GroupsApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @param {string} [label] Filter by label. Matches on whole words.
         * @param {string} [autocomplete] Autocomplete term. Matches on group category name, per letter, from the start of the word.
         * @param {string} [group_fulltext_search] Filter the list of categories to those that include groups matching a search term. This is useful when you have already searched for groups and want to refine your search by category (like a faceted search). Like the fulltext_search parameter of /groups/search, this matches on whole words.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {number} [limit] The numbers of items to return. If the value specified is more than the maximum, the result count will be limited to the maximum.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsCategoriesGet: function (label, autocomplete, group_fulltext_search, offset, limit, options) {
            return GroupsApiFp(configuration).groupsCategoriesGet(label, autocomplete, group_fulltext_search, offset, limit, options)(axios, basePath);
        },
        /**
         * Search for groups. Returns list of uuids. Returns an empty array if no groups are found.
         * @param {string} external_id Filter by external ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGet: function (external_id, options) {
            return GroupsApiFp(configuration).groupsGet(external_id, options)(axios, basePath);
        },
        /**
         * Delete a group document folder.
         * @param {string} group_id The Invotra UUID of the group.
         * @param {string} group_document_folder_id The Invotra UUID of the group document folders.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGroupIdDocumentFoldersGroupDocumentFolderIdDelete: function (group_id, group_document_folder_id, options) {
            return GroupsApiFp(configuration).groupsGroupIdDocumentFoldersGroupDocumentFolderIdDelete(group_id, group_document_folder_id, options)(axios, basePath);
        },
        /**
         * Get information about the group document folder.
         * @param {string} group_id The Invotra UUID of the group.
         * @param {string} group_document_folder_id The Invotra UUID of the group document folders.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGroupIdDocumentFoldersGroupDocumentFolderIdGet: function (group_id, group_document_folder_id, options) {
            return GroupsApiFp(configuration).groupsGroupIdDocumentFoldersGroupDocumentFolderIdGet(group_id, group_document_folder_id, options)(axios, basePath);
        },
        /**
         * Update group document folder information.
         * @param {string} group_id The Invotra UUID of the group.
         * @param {string} group_document_folder_id The Invotra UUID of the group document folders.
         * @param {GroupDocumentFolderSchemaUpdate} GroupDocumentFolderSchemaUpdate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGroupIdDocumentFoldersGroupDocumentFolderIdPut: function (group_id, group_document_folder_id, GroupDocumentFolderSchemaUpdate, options) {
            return GroupsApiFp(configuration).groupsGroupIdDocumentFoldersGroupDocumentFolderIdPut(group_id, group_document_folder_id, GroupDocumentFolderSchemaUpdate, options)(axios, basePath);
        },
        /**
         * Search for group document folders. An empty array is returned if no group document folders are found.
         * @param {string} group_id The Invotra UUID of the group.
         * @param {string} [name] Filter by name. Matches on whole words.
         * @param {string} [external_id] Filter by external ID.
         * @param {string} [valid_parents_for] Filter out invalid parents (self and children) for the specified Invotra UUID of the group document folder.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {number} [limit] The numbers of items to return. If the value specified is more than the maximum, the result count will be limited to the maximum.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGroupIdDocumentFoldersListGet: function (group_id, name, external_id, valid_parents_for, offset, limit, options) {
            return GroupsApiFp(configuration).groupsGroupIdDocumentFoldersListGet(group_id, name, external_id, valid_parents_for, offset, limit, options)(axios, basePath);
        },
        /**
         * Provision a new group document folder.
         * @param {string} group_id The Invotra UUID of the group.
         * @param {GroupDocumentFolderSchemaCreate} GroupDocumentFolderSchemaCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGroupIdDocumentFoldersPost: function (group_id, GroupDocumentFolderSchemaCreate, options) {
            return GroupsApiFp(configuration).groupsGroupIdDocumentFoldersPost(group_id, GroupDocumentFolderSchemaCreate, options)(axios, basePath);
        },
        /**
         * Get information about the group.
         * @param {string} group_id The Invotra UUID of the group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGroupIdGet: function (group_id, options) {
            return GroupsApiFp(configuration).groupsGroupIdGet(group_id, options)(axios, basePath);
        },
        /**
         * Get a list of group members.
         * @param {string} group_id The Invotra UUID of the group.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {number} [limit] The numbers of items to return. If the value specified is more than the maximum, the result count will be limited to the maximum.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGroupIdMembersGet: function (group_id, offset, limit, options) {
            return GroupsApiFp(configuration).groupsGroupIdMembersGet(group_id, offset, limit, options)(axios, basePath);
        },
        /**
         * Remove the user\'s membership of the group. Note that at present the {user_id} must match that of the current logged-in user.
         * @param {string} group_id The Invotra UUID of the group.
         * @param {string} user_id The Invotra UUID of the user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGroupIdMembersUserIdDelete: function (group_id, user_id, options) {
            return GroupsApiFp(configuration).groupsGroupIdMembersUserIdDelete(group_id, user_id, options)(axios, basePath);
        },
        /**
         * Add a user to a group or update information about a user\'s existing group membership. Note that at present the {user_id} must match that of the current logged-in user.
         * @param {string} group_id The Invotra UUID of the group.
         * @param {string} user_id The Invotra UUID of the user.
         * @param {GroupMembershipCommonSchema} [GroupMembershipCommonSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGroupIdMembersUserIdPut: function (group_id, user_id, GroupMembershipCommonSchema, options) {
            return GroupsApiFp(configuration).groupsGroupIdMembersUserIdPut(group_id, user_id, GroupMembershipCommonSchema, options)(axios, basePath);
        },
        /**
         * Check if the current user is a member of a group.
         * @param {string} group_id The Invotra UUID of the group to check membership status against.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGroupIdMyMembershipGet: function (group_id, options) {
            return GroupsApiFp(configuration).groupsGroupIdMyMembershipGet(group_id, options)(axios, basePath);
        },
        /**
         * Get a list of group posts. This returns only the top-level posts in the group, not their replies.
         * @param {string} group_id The Invotra UUID of the group.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {number} [limit] The numbers of items to return. If the value specified is more than the maximum, the result count will be limited to the maximum.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGroupIdPostsGet: function (group_id, offset, limit, options) {
            return GroupsApiFp(configuration).groupsGroupIdPostsGet(group_id, offset, limit, options)(axios, basePath);
        },
        /**
         * Update a group.
         * @param {string} group_id The Invotra UUID of the group.
         * @param {GroupSchema} GroupSchema
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGroupIdPut: function (group_id, GroupSchema, options) {
            return GroupsApiFp(configuration).groupsGroupIdPut(group_id, GroupSchema, options)(axios, basePath);
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsMetricsGet: function (options) {
            return GroupsApiFp(configuration).groupsMetricsGet(options)(axios, basePath);
        },
        /**
         * Create a group.
         * @param {GroupSchema} GroupSchema
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsPost: function (GroupSchema, options) {
            return GroupsApiFp(configuration).groupsPost(GroupSchema, options)(axios, basePath);
        },
        /**
         *
         * @param {string} [fulltext_search] Search term. Matches on whole words.
         * @param {string} [category] Filter by UUID of a category.
         * @param {boolean} [my_groups] Filter by groups the current user is a member of.
         * @param {'relevance' | 'likes' | 'members_count' | 'timestamp_created'} [sort] Field to sort by.
         * @param {'asc' | 'desc'} [order] Sort order.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {number} [limit] The numbers of items to return. If the value specified is more than the maximum, the result count will be limited to the maximum.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsSearchGet: function (fulltext_search, category, my_groups, sort, order, offset, limit, options) {
            return GroupsApiFp(configuration).groupsSearchGet(fulltext_search, category, my_groups, sort, order, offset, limit, options)(axios, basePath);
        },
    };
};
/**
 * GroupsApi - object-oriented interface
 * @export
 * @class GroupsApi
 * @extends {BaseAPI}
 */
var GroupsApi = /** @class */ (function (_super) {
    __extends(GroupsApi, _super);
    function GroupsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @param {string} [label] Filter by label. Matches on whole words.
     * @param {string} [autocomplete] Autocomplete term. Matches on group category name, per letter, from the start of the word.
     * @param {string} [group_fulltext_search] Filter the list of categories to those that include groups matching a search term. This is useful when you have already searched for groups and want to refine your search by category (like a faceted search). Like the fulltext_search parameter of /groups/search, this matches on whole words.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {number} [limit] The numbers of items to return. If the value specified is more than the maximum, the result count will be limited to the maximum.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    GroupsApi.prototype.groupsCategoriesGet = function (label, autocomplete, group_fulltext_search, offset, limit, options) {
        return GroupsApiFp(this.configuration).groupsCategoriesGet(label, autocomplete, group_fulltext_search, offset, limit, options)(this.axios, this.basePath);
    };
    /**
     * Search for groups. Returns list of uuids. Returns an empty array if no groups are found.
     * @param {string} external_id Filter by external ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    GroupsApi.prototype.groupsGet = function (external_id, options) {
        return GroupsApiFp(this.configuration).groupsGet(external_id, options)(this.axios, this.basePath);
    };
    /**
     * Delete a group document folder.
     * @param {string} group_id The Invotra UUID of the group.
     * @param {string} group_document_folder_id The Invotra UUID of the group document folders.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    GroupsApi.prototype.groupsGroupIdDocumentFoldersGroupDocumentFolderIdDelete = function (group_id, group_document_folder_id, options) {
        return GroupsApiFp(this.configuration).groupsGroupIdDocumentFoldersGroupDocumentFolderIdDelete(group_id, group_document_folder_id, options)(this.axios, this.basePath);
    };
    /**
     * Get information about the group document folder.
     * @param {string} group_id The Invotra UUID of the group.
     * @param {string} group_document_folder_id The Invotra UUID of the group document folders.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    GroupsApi.prototype.groupsGroupIdDocumentFoldersGroupDocumentFolderIdGet = function (group_id, group_document_folder_id, options) {
        return GroupsApiFp(this.configuration).groupsGroupIdDocumentFoldersGroupDocumentFolderIdGet(group_id, group_document_folder_id, options)(this.axios, this.basePath);
    };
    /**
     * Update group document folder information.
     * @param {string} group_id The Invotra UUID of the group.
     * @param {string} group_document_folder_id The Invotra UUID of the group document folders.
     * @param {GroupDocumentFolderSchemaUpdate} GroupDocumentFolderSchemaUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    GroupsApi.prototype.groupsGroupIdDocumentFoldersGroupDocumentFolderIdPut = function (group_id, group_document_folder_id, GroupDocumentFolderSchemaUpdate, options) {
        return GroupsApiFp(this.configuration).groupsGroupIdDocumentFoldersGroupDocumentFolderIdPut(group_id, group_document_folder_id, GroupDocumentFolderSchemaUpdate, options)(this.axios, this.basePath);
    };
    /**
     * Search for group document folders. An empty array is returned if no group document folders are found.
     * @param {string} group_id The Invotra UUID of the group.
     * @param {string} [name] Filter by name. Matches on whole words.
     * @param {string} [external_id] Filter by external ID.
     * @param {string} [valid_parents_for] Filter out invalid parents (self and children) for the specified Invotra UUID of the group document folder.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {number} [limit] The numbers of items to return. If the value specified is more than the maximum, the result count will be limited to the maximum.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    GroupsApi.prototype.groupsGroupIdDocumentFoldersListGet = function (group_id, name, external_id, valid_parents_for, offset, limit, options) {
        return GroupsApiFp(this.configuration).groupsGroupIdDocumentFoldersListGet(group_id, name, external_id, valid_parents_for, offset, limit, options)(this.axios, this.basePath);
    };
    /**
     * Provision a new group document folder.
     * @param {string} group_id The Invotra UUID of the group.
     * @param {GroupDocumentFolderSchemaCreate} GroupDocumentFolderSchemaCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    GroupsApi.prototype.groupsGroupIdDocumentFoldersPost = function (group_id, GroupDocumentFolderSchemaCreate, options) {
        return GroupsApiFp(this.configuration).groupsGroupIdDocumentFoldersPost(group_id, GroupDocumentFolderSchemaCreate, options)(this.axios, this.basePath);
    };
    /**
     * Get information about the group.
     * @param {string} group_id The Invotra UUID of the group.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    GroupsApi.prototype.groupsGroupIdGet = function (group_id, options) {
        return GroupsApiFp(this.configuration).groupsGroupIdGet(group_id, options)(this.axios, this.basePath);
    };
    /**
     * Get a list of group members.
     * @param {string} group_id The Invotra UUID of the group.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {number} [limit] The numbers of items to return. If the value specified is more than the maximum, the result count will be limited to the maximum.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    GroupsApi.prototype.groupsGroupIdMembersGet = function (group_id, offset, limit, options) {
        return GroupsApiFp(this.configuration).groupsGroupIdMembersGet(group_id, offset, limit, options)(this.axios, this.basePath);
    };
    /**
     * Remove the user\'s membership of the group. Note that at present the {user_id} must match that of the current logged-in user.
     * @param {string} group_id The Invotra UUID of the group.
     * @param {string} user_id The Invotra UUID of the user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    GroupsApi.prototype.groupsGroupIdMembersUserIdDelete = function (group_id, user_id, options) {
        return GroupsApiFp(this.configuration).groupsGroupIdMembersUserIdDelete(group_id, user_id, options)(this.axios, this.basePath);
    };
    /**
     * Add a user to a group or update information about a user\'s existing group membership. Note that at present the {user_id} must match that of the current logged-in user.
     * @param {string} group_id The Invotra UUID of the group.
     * @param {string} user_id The Invotra UUID of the user.
     * @param {GroupMembershipCommonSchema} [GroupMembershipCommonSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    GroupsApi.prototype.groupsGroupIdMembersUserIdPut = function (group_id, user_id, GroupMembershipCommonSchema, options) {
        return GroupsApiFp(this.configuration).groupsGroupIdMembersUserIdPut(group_id, user_id, GroupMembershipCommonSchema, options)(this.axios, this.basePath);
    };
    /**
     * Check if the current user is a member of a group.
     * @param {string} group_id The Invotra UUID of the group to check membership status against.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    GroupsApi.prototype.groupsGroupIdMyMembershipGet = function (group_id, options) {
        return GroupsApiFp(this.configuration).groupsGroupIdMyMembershipGet(group_id, options)(this.axios, this.basePath);
    };
    /**
     * Get a list of group posts. This returns only the top-level posts in the group, not their replies.
     * @param {string} group_id The Invotra UUID of the group.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {number} [limit] The numbers of items to return. If the value specified is more than the maximum, the result count will be limited to the maximum.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    GroupsApi.prototype.groupsGroupIdPostsGet = function (group_id, offset, limit, options) {
        return GroupsApiFp(this.configuration).groupsGroupIdPostsGet(group_id, offset, limit, options)(this.axios, this.basePath);
    };
    /**
     * Update a group.
     * @param {string} group_id The Invotra UUID of the group.
     * @param {GroupSchema} GroupSchema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    GroupsApi.prototype.groupsGroupIdPut = function (group_id, GroupSchema, options) {
        return GroupsApiFp(this.configuration).groupsGroupIdPut(group_id, GroupSchema, options)(this.axios, this.basePath);
    };
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    GroupsApi.prototype.groupsMetricsGet = function (options) {
        return GroupsApiFp(this.configuration).groupsMetricsGet(options)(this.axios, this.basePath);
    };
    /**
     * Create a group.
     * @param {GroupSchema} GroupSchema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    GroupsApi.prototype.groupsPost = function (GroupSchema, options) {
        return GroupsApiFp(this.configuration).groupsPost(GroupSchema, options)(this.axios, this.basePath);
    };
    /**
     *
     * @param {string} [fulltext_search] Search term. Matches on whole words.
     * @param {string} [category] Filter by UUID of a category.
     * @param {boolean} [my_groups] Filter by groups the current user is a member of.
     * @param {'relevance' | 'likes' | 'members_count' | 'timestamp_created'} [sort] Field to sort by.
     * @param {'asc' | 'desc'} [order] Sort order.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {number} [limit] The numbers of items to return. If the value specified is more than the maximum, the result count will be limited to the maximum.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    GroupsApi.prototype.groupsSearchGet = function (fulltext_search, category, my_groups, sort, order, offset, limit, options) {
        return GroupsApiFp(this.configuration).groupsSearchGet(fulltext_search, category, my_groups, sort, order, offset, limit, options)(this.axios, this.basePath);
    };
    return GroupsApi;
}(BaseAPI));
export { GroupsApi };
//# sourceMappingURL=groups-api.js.map