/**
 * InvotraAPI
 * In general most fields are optional for update (PUT) requests; you can leave them blank (pass an empty string / array / whatever as appropriate) to clear them, or omit the key to leave them unchanged.
 *
 * The version of the OpenAPI document: 0.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { InlineResponse20054 } from '../model';
import { PushNotificationsSchema } from '../model';
/**
 * NotificationsApi - axios parameter creator
 * @export
 */
export declare const NotificationsApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * Clear all notifications for the current user.
     * @param {boolean} [app_notifications_only] Marks all notifications for the mobile app as read. If true, this will mark as read notifications with entity type user, and entity type node and bundle type post only.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    notificationsClearAllPost(app_notifications_only?: boolean | undefined, options?: any): RequestArgs;
    /**
     * Retrieve notifications for a user.
     * @param {boolean} [app_notifications_only] Filter the notifications for the mobile app. If true, this will return notifications with entity type user, and entity type node and bundle type post only.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {number} [limit] The numbers of items to return.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    notificationsGet(app_notifications_only?: boolean | undefined, offset?: number | undefined, limit?: number | undefined, options?: any): RequestArgs;
    /**
     * Mark a notification as read.
     * @param {string} notification_id The Invotra UUID of the notification.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    notificationsNotificationIdPut(notification_id: string, options?: any): RequestArgs;
    /**
     * Deregister the device the user is using for push notifications.
     * @param {'apns' | 'fcm'} service_id Identifying name of the notification service to be used.
     * @param {string} device_id The unique device id of the device the user is using.
     * @param {'ios' | 'android'} platform The platform the of the device the user is using.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    notificationsRegisterServiceIdDelete(service_id: "apns" | "fcm", device_id: string, platform: "ios" | "android", options?: any): RequestArgs;
    /**
     * Register a token and device id to identify the user with a push notification service.
     * @param {'apns' | 'fcm'} service_id Identifying name of the notification service to be used.
     * @param {PushNotificationsSchema} PushNotificationsSchema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    notificationsRegisterServiceIdPost(service_id: "apns" | "fcm", PushNotificationsSchema: PushNotificationsSchema, options?: any): RequestArgs;
};
/**
 * NotificationsApi - functional programming interface
 * @export
 */
export declare const NotificationsApiFp: (configuration?: Configuration | undefined) => {
    /**
     * Clear all notifications for the current user.
     * @param {boolean} [app_notifications_only] Marks all notifications for the mobile app as read. If true, this will mark as read notifications with entity type user, and entity type node and bundle type post only.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    notificationsClearAllPost(app_notifications_only?: boolean | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>;
    /**
     * Retrieve notifications for a user.
     * @param {boolean} [app_notifications_only] Filter the notifications for the mobile app. If true, this will return notifications with entity type user, and entity type node and bundle type post only.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {number} [limit] The numbers of items to return.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    notificationsGet(app_notifications_only?: boolean | undefined, offset?: number | undefined, limit?: number | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<InlineResponse20054>;
    /**
     * Mark a notification as read.
     * @param {string} notification_id The Invotra UUID of the notification.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    notificationsNotificationIdPut(notification_id: string, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>;
    /**
     * Deregister the device the user is using for push notifications.
     * @param {'apns' | 'fcm'} service_id Identifying name of the notification service to be used.
     * @param {string} device_id The unique device id of the device the user is using.
     * @param {'ios' | 'android'} platform The platform the of the device the user is using.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    notificationsRegisterServiceIdDelete(service_id: "apns" | "fcm", device_id: string, platform: "ios" | "android", options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>;
    /**
     * Register a token and device id to identify the user with a push notification service.
     * @param {'apns' | 'fcm'} service_id Identifying name of the notification service to be used.
     * @param {PushNotificationsSchema} PushNotificationsSchema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    notificationsRegisterServiceIdPost(service_id: "apns" | "fcm", PushNotificationsSchema: PushNotificationsSchema, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>;
};
/**
 * NotificationsApi - factory interface
 * @export
 */
export declare const NotificationsApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     * Clear all notifications for the current user.
     * @param {boolean} [app_notifications_only] Marks all notifications for the mobile app as read. If true, this will mark as read notifications with entity type user, and entity type node and bundle type post only.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    notificationsClearAllPost(app_notifications_only?: boolean | undefined, options?: any): AxiosPromise<void>;
    /**
     * Retrieve notifications for a user.
     * @param {boolean} [app_notifications_only] Filter the notifications for the mobile app. If true, this will return notifications with entity type user, and entity type node and bundle type post only.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {number} [limit] The numbers of items to return.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    notificationsGet(app_notifications_only?: boolean | undefined, offset?: number | undefined, limit?: number | undefined, options?: any): AxiosPromise<InlineResponse20054>;
    /**
     * Mark a notification as read.
     * @param {string} notification_id The Invotra UUID of the notification.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    notificationsNotificationIdPut(notification_id: string, options?: any): AxiosPromise<void>;
    /**
     * Deregister the device the user is using for push notifications.
     * @param {'apns' | 'fcm'} service_id Identifying name of the notification service to be used.
     * @param {string} device_id The unique device id of the device the user is using.
     * @param {'ios' | 'android'} platform The platform the of the device the user is using.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    notificationsRegisterServiceIdDelete(service_id: "apns" | "fcm", device_id: string, platform: "ios" | "android", options?: any): AxiosPromise<void>;
    /**
     * Register a token and device id to identify the user with a push notification service.
     * @param {'apns' | 'fcm'} service_id Identifying name of the notification service to be used.
     * @param {PushNotificationsSchema} PushNotificationsSchema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    notificationsRegisterServiceIdPost(service_id: "apns" | "fcm", PushNotificationsSchema: PushNotificationsSchema, options?: any): AxiosPromise<void>;
};
/**
 * NotificationsApi - interface
 * @export
 * @interface NotificationsApi
 */
export interface NotificationsApiInterface {
    /**
     * Clear all notifications for the current user.
     * @param {boolean} [app_notifications_only] Marks all notifications for the mobile app as read. If true, this will mark as read notifications with entity type user, and entity type node and bundle type post only.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApiInterface
     */
    notificationsClearAllPost(app_notifications_only?: boolean, options?: any): AxiosPromise<void>;
    /**
     * Retrieve notifications for a user.
     * @param {boolean} [app_notifications_only] Filter the notifications for the mobile app. If true, this will return notifications with entity type user, and entity type node and bundle type post only.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {number} [limit] The numbers of items to return.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApiInterface
     */
    notificationsGet(app_notifications_only?: boolean, offset?: number, limit?: number, options?: any): AxiosPromise<InlineResponse20054>;
    /**
     * Mark a notification as read.
     * @param {string} notification_id The Invotra UUID of the notification.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApiInterface
     */
    notificationsNotificationIdPut(notification_id: string, options?: any): AxiosPromise<void>;
    /**
     * Deregister the device the user is using for push notifications.
     * @param {'apns' | 'fcm'} service_id Identifying name of the notification service to be used.
     * @param {string} device_id The unique device id of the device the user is using.
     * @param {'ios' | 'android'} platform The platform the of the device the user is using.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApiInterface
     */
    notificationsRegisterServiceIdDelete(service_id: 'apns' | 'fcm', device_id: string, platform: 'ios' | 'android', options?: any): AxiosPromise<void>;
    /**
     * Register a token and device id to identify the user with a push notification service.
     * @param {'apns' | 'fcm'} service_id Identifying name of the notification service to be used.
     * @param {PushNotificationsSchema} PushNotificationsSchema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApiInterface
     */
    notificationsRegisterServiceIdPost(service_id: 'apns' | 'fcm', PushNotificationsSchema: PushNotificationsSchema, options?: any): AxiosPromise<void>;
}
/**
 * NotificationsApi - object-oriented interface
 * @export
 * @class NotificationsApi
 * @extends {BaseAPI}
 */
export declare class NotificationsApi extends BaseAPI implements NotificationsApiInterface {
    /**
     * Clear all notifications for the current user.
     * @param {boolean} [app_notifications_only] Marks all notifications for the mobile app as read. If true, this will mark as read notifications with entity type user, and entity type node and bundle type post only.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApi
     */
    notificationsClearAllPost(app_notifications_only?: boolean, options?: any): AxiosPromise<void>;
    /**
     * Retrieve notifications for a user.
     * @param {boolean} [app_notifications_only] Filter the notifications for the mobile app. If true, this will return notifications with entity type user, and entity type node and bundle type post only.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {number} [limit] The numbers of items to return.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApi
     */
    notificationsGet(app_notifications_only?: boolean, offset?: number, limit?: number, options?: any): AxiosPromise<InlineResponse20054>;
    /**
     * Mark a notification as read.
     * @param {string} notification_id The Invotra UUID of the notification.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApi
     */
    notificationsNotificationIdPut(notification_id: string, options?: any): AxiosPromise<void>;
    /**
     * Deregister the device the user is using for push notifications.
     * @param {'apns' | 'fcm'} service_id Identifying name of the notification service to be used.
     * @param {string} device_id The unique device id of the device the user is using.
     * @param {'ios' | 'android'} platform The platform the of the device the user is using.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApi
     */
    notificationsRegisterServiceIdDelete(service_id: 'apns' | 'fcm', device_id: string, platform: 'ios' | 'android', options?: any): AxiosPromise<void>;
    /**
     * Register a token and device id to identify the user with a push notification service.
     * @param {'apns' | 'fcm'} service_id Identifying name of the notification service to be used.
     * @param {PushNotificationsSchema} PushNotificationsSchema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApi
     */
    notificationsRegisterServiceIdPost(service_id: 'apns' | 'fcm', PushNotificationsSchema: PushNotificationsSchema, options?: any): AxiosPromise<void>;
}
