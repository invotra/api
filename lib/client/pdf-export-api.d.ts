/**
 * InvotraAPI
 * In general most fields are optional for update (PUT) requests; you can leave them blank (pass an empty string / array / whatever as appropriate) to clear them, or omit the key to leave them unchanged.
 *
 * The version of the OpenAPI document: 0.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { PdfExportCompletionSchema } from '../model';
import { PdfExportErrorSchema } from '../model';
/**
 * PdfExportApi - axios parameter creator
 * @export
 */
export declare const PdfExportApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * PDF export render completion callback.
     * @param {PdfExportCompletionSchema | PdfExportErrorSchema} [PdfExportCompletionSchema___PdfExportErrorSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    pdfExportCloseJobPost(PdfExportCompletionSchema___PdfExportErrorSchema?: PdfExportCompletionSchema | PdfExportErrorSchema | undefined, options?: any): RequestArgs;
    /**
     * Get content in HTML for PDF export.
     * @param {string} content_id The Invotra UUID of content.
     * @param {boolean} [workflow] Include workflow history in HTML.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    pdfExportContentIdGet(content_id: string, workflow?: boolean | undefined, options?: any): RequestArgs;
};
/**
 * PdfExportApi - functional programming interface
 * @export
 */
export declare const PdfExportApiFp: (configuration?: Configuration | undefined) => {
    /**
     * PDF export render completion callback.
     * @param {PdfExportCompletionSchema | PdfExportErrorSchema} [PdfExportCompletionSchema___PdfExportErrorSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    pdfExportCloseJobPost(PdfExportCompletionSchema___PdfExportErrorSchema?: PdfExportCompletionSchema | PdfExportErrorSchema | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>;
    /**
     * Get content in HTML for PDF export.
     * @param {string} content_id The Invotra UUID of content.
     * @param {boolean} [workflow] Include workflow history in HTML.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    pdfExportContentIdGet(content_id: string, workflow?: boolean | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<string>;
};
/**
 * PdfExportApi - factory interface
 * @export
 */
export declare const PdfExportApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     * PDF export render completion callback.
     * @param {PdfExportCompletionSchema | PdfExportErrorSchema} [PdfExportCompletionSchema___PdfExportErrorSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    pdfExportCloseJobPost(PdfExportCompletionSchema___PdfExportErrorSchema?: PdfExportCompletionSchema | PdfExportErrorSchema | undefined, options?: any): AxiosPromise<void>;
    /**
     * Get content in HTML for PDF export.
     * @param {string} content_id The Invotra UUID of content.
     * @param {boolean} [workflow] Include workflow history in HTML.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    pdfExportContentIdGet(content_id: string, workflow?: boolean | undefined, options?: any): AxiosPromise<string>;
};
/**
 * PdfExportApi - interface
 * @export
 * @interface PdfExportApi
 */
export interface PdfExportApiInterface {
    /**
     * PDF export render completion callback.
     * @param {PdfExportCompletionSchema | PdfExportErrorSchema} [PdfExportCompletionSchema___PdfExportErrorSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PdfExportApiInterface
     */
    pdfExportCloseJobPost(PdfExportCompletionSchema___PdfExportErrorSchema?: PdfExportCompletionSchema | PdfExportErrorSchema, options?: any): AxiosPromise<void>;
    /**
     * Get content in HTML for PDF export.
     * @param {string} content_id The Invotra UUID of content.
     * @param {boolean} [workflow] Include workflow history in HTML.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PdfExportApiInterface
     */
    pdfExportContentIdGet(content_id: string, workflow?: boolean, options?: any): AxiosPromise<string>;
}
/**
 * PdfExportApi - object-oriented interface
 * @export
 * @class PdfExportApi
 * @extends {BaseAPI}
 */
export declare class PdfExportApi extends BaseAPI implements PdfExportApiInterface {
    /**
     * PDF export render completion callback.
     * @param {PdfExportCompletionSchema | PdfExportErrorSchema} [PdfExportCompletionSchema___PdfExportErrorSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PdfExportApi
     */
    pdfExportCloseJobPost(PdfExportCompletionSchema___PdfExportErrorSchema?: PdfExportCompletionSchema | PdfExportErrorSchema, options?: any): AxiosPromise<void>;
    /**
     * Get content in HTML for PDF export.
     * @param {string} content_id The Invotra UUID of content.
     * @param {boolean} [workflow] Include workflow history in HTML.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PdfExportApi
     */
    pdfExportContentIdGet(content_id: string, workflow?: boolean, options?: any): AxiosPromise<string>;
}
