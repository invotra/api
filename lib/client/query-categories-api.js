// tslint:disable
/**
 * InvotraAPI
 * In general most fields are optional for update (PUT) requests; you can leave them blank (pass an empty string / array / whatever as appropriate) to clear them, or omit the key to leave them unchanged.
 *
 * The version of the OpenAPI document: 0.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import * as globalImportUrl from 'url';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, BaseAPI, RequiredError } from '../base';
/**
 * QueryCategoriesApi - axios parameter creator
 * @export
 */
export var QueryCategoriesApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Search for query categories. An empty array is returned if no query categories are found.
         * @param {string} [name] Filter by name. Matches on whole words.
         * @param {string} [external_id] Filter by external ID.
         * @param {string} [status] Filter the list of query categories on a comma seperated list of statuses. Valid statuses are \&quot;published\&quot; and \&quot;unpublished\&quot;, you may inlude both. The default when not supplied is \&quot;published\&quot; only.
         * @param {string} [valid_parents_for] Filter out invalid parents (self and children) for the specified Invotra UUID of the query category.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {number} [limit] The numbers of items to return.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryCategoriesListGet: function (name, external_id, status, valid_parents_for, offset, limit, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/query_categories/list";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }
            // authentication CognitoJwt required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("CognitoJwt", ["invotra/query_categories:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication SessionCookieHeader required
            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }
            if (external_id !== undefined) {
                localVarQueryParameter['external_id'] = external_id;
            }
            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }
            if (valid_parents_for !== undefined) {
                localVarQueryParameter['valid_parents_for'] = valid_parents_for;
            }
            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Provision a new query category.
         * @param {QueryCategorySchemaCreate} QueryCategorySchemaCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryCategoriesPost: function (QueryCategorySchemaCreate, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'QueryCategorySchemaCreate' is not null or undefined
            if (QueryCategorySchemaCreate === null || QueryCategorySchemaCreate === undefined) {
                throw new RequiredError('QueryCategorySchemaCreate', 'Required parameter QueryCategorySchemaCreate was null or undefined when calling queryCategoriesPost.');
            }
            var localVarPath = "/query_categories";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }
            // authentication CognitoJwt required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("CognitoJwt", ["invotra/query_categories:write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication SessionCookieHeader required
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            var needsSerialization = (typeof QueryCategorySchemaCreate !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(QueryCategorySchemaCreate !== undefined ? QueryCategorySchemaCreate : {}) : (QueryCategorySchemaCreate || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a query category.
         * @param {string} query_category_id The Invotra UUID of the query category.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryCategoriesQueryCategoryIdDelete: function (query_category_id, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'query_category_id' is not null or undefined
            if (query_category_id === null || query_category_id === undefined) {
                throw new RequiredError('query_category_id', 'Required parameter query_category_id was null or undefined when calling queryCategoriesQueryCategoryIdDelete.');
            }
            var localVarPath = "/query_categories/{query_category_id}"
                .replace("{" + "query_category_id" + "}", encodeURIComponent(String(query_category_id)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }
            // authentication CognitoJwt required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("CognitoJwt", ["invotra/query_categories:write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication SessionCookieHeader required
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get information about the query category.
         * @param {string} query_category_id The Invotra UUID of the query category.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryCategoriesQueryCategoryIdGet: function (query_category_id, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'query_category_id' is not null or undefined
            if (query_category_id === null || query_category_id === undefined) {
                throw new RequiredError('query_category_id', 'Required parameter query_category_id was null or undefined when calling queryCategoriesQueryCategoryIdGet.');
            }
            var localVarPath = "/query_categories/{query_category_id}"
                .replace("{" + "query_category_id" + "}", encodeURIComponent(String(query_category_id)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }
            // authentication CognitoJwt required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("CognitoJwt", ["invotra/query_categories:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication SessionCookieHeader required
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update query category information.
         * @param {string} query_category_id The Invotra UUID of the query category.
         * @param {QueryCategorySchemaCommon} QueryCategorySchemaCommon
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryCategoriesQueryCategoryIdPut: function (query_category_id, QueryCategorySchemaCommon, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'query_category_id' is not null or undefined
            if (query_category_id === null || query_category_id === undefined) {
                throw new RequiredError('query_category_id', 'Required parameter query_category_id was null or undefined when calling queryCategoriesQueryCategoryIdPut.');
            }
            // verify required parameter 'QueryCategorySchemaCommon' is not null or undefined
            if (QueryCategorySchemaCommon === null || QueryCategorySchemaCommon === undefined) {
                throw new RequiredError('QueryCategorySchemaCommon', 'Required parameter QueryCategorySchemaCommon was null or undefined when calling queryCategoriesQueryCategoryIdPut.');
            }
            var localVarPath = "/query_categories/{query_category_id}"
                .replace("{" + "query_category_id" + "}", encodeURIComponent(String(query_category_id)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }
            // authentication CognitoJwt required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("CognitoJwt", ["invotra/query_categories:write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication SessionCookieHeader required
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            var needsSerialization = (typeof QueryCategorySchemaCommon !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(QueryCategorySchemaCommon !== undefined ? QueryCategorySchemaCommon : {}) : (QueryCategorySchemaCommon || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * QueryCategoriesApi - functional programming interface
 * @export
 */
export var QueryCategoriesApiFp = function (configuration) {
    return {
        /**
         * Search for query categories. An empty array is returned if no query categories are found.
         * @param {string} [name] Filter by name. Matches on whole words.
         * @param {string} [external_id] Filter by external ID.
         * @param {string} [status] Filter the list of query categories on a comma seperated list of statuses. Valid statuses are \&quot;published\&quot; and \&quot;unpublished\&quot;, you may inlude both. The default when not supplied is \&quot;published\&quot; only.
         * @param {string} [valid_parents_for] Filter out invalid parents (self and children) for the specified Invotra UUID of the query category.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {number} [limit] The numbers of items to return.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryCategoriesListGet: function (name, external_id, status, valid_parents_for, offset, limit, options) {
            var localVarAxiosArgs = QueryCategoriesApiAxiosParamCreator(configuration).queryCategoriesListGet(name, external_id, status, valid_parents_for, offset, limit, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = globalAxios; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Provision a new query category.
         * @param {QueryCategorySchemaCreate} QueryCategorySchemaCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryCategoriesPost: function (QueryCategorySchemaCreate, options) {
            var localVarAxiosArgs = QueryCategoriesApiAxiosParamCreator(configuration).queryCategoriesPost(QueryCategorySchemaCreate, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = globalAxios; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete a query category.
         * @param {string} query_category_id The Invotra UUID of the query category.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryCategoriesQueryCategoryIdDelete: function (query_category_id, options) {
            var localVarAxiosArgs = QueryCategoriesApiAxiosParamCreator(configuration).queryCategoriesQueryCategoryIdDelete(query_category_id, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = globalAxios; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get information about the query category.
         * @param {string} query_category_id The Invotra UUID of the query category.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryCategoriesQueryCategoryIdGet: function (query_category_id, options) {
            var localVarAxiosArgs = QueryCategoriesApiAxiosParamCreator(configuration).queryCategoriesQueryCategoryIdGet(query_category_id, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = globalAxios; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update query category information.
         * @param {string} query_category_id The Invotra UUID of the query category.
         * @param {QueryCategorySchemaCommon} QueryCategorySchemaCommon
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryCategoriesQueryCategoryIdPut: function (query_category_id, QueryCategorySchemaCommon, options) {
            var localVarAxiosArgs = QueryCategoriesApiAxiosParamCreator(configuration).queryCategoriesQueryCategoryIdPut(query_category_id, QueryCategorySchemaCommon, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = globalAxios; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
/**
 * QueryCategoriesApi - factory interface
 * @export
 */
export var QueryCategoriesApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * Search for query categories. An empty array is returned if no query categories are found.
         * @param {string} [name] Filter by name. Matches on whole words.
         * @param {string} [external_id] Filter by external ID.
         * @param {string} [status] Filter the list of query categories on a comma seperated list of statuses. Valid statuses are \&quot;published\&quot; and \&quot;unpublished\&quot;, you may inlude both. The default when not supplied is \&quot;published\&quot; only.
         * @param {string} [valid_parents_for] Filter out invalid parents (self and children) for the specified Invotra UUID of the query category.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {number} [limit] The numbers of items to return.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryCategoriesListGet: function (name, external_id, status, valid_parents_for, offset, limit, options) {
            return QueryCategoriesApiFp(configuration).queryCategoriesListGet(name, external_id, status, valid_parents_for, offset, limit, options)(axios, basePath);
        },
        /**
         * Provision a new query category.
         * @param {QueryCategorySchemaCreate} QueryCategorySchemaCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryCategoriesPost: function (QueryCategorySchemaCreate, options) {
            return QueryCategoriesApiFp(configuration).queryCategoriesPost(QueryCategorySchemaCreate, options)(axios, basePath);
        },
        /**
         * Delete a query category.
         * @param {string} query_category_id The Invotra UUID of the query category.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryCategoriesQueryCategoryIdDelete: function (query_category_id, options) {
            return QueryCategoriesApiFp(configuration).queryCategoriesQueryCategoryIdDelete(query_category_id, options)(axios, basePath);
        },
        /**
         * Get information about the query category.
         * @param {string} query_category_id The Invotra UUID of the query category.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryCategoriesQueryCategoryIdGet: function (query_category_id, options) {
            return QueryCategoriesApiFp(configuration).queryCategoriesQueryCategoryIdGet(query_category_id, options)(axios, basePath);
        },
        /**
         * Update query category information.
         * @param {string} query_category_id The Invotra UUID of the query category.
         * @param {QueryCategorySchemaCommon} QueryCategorySchemaCommon
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryCategoriesQueryCategoryIdPut: function (query_category_id, QueryCategorySchemaCommon, options) {
            return QueryCategoriesApiFp(configuration).queryCategoriesQueryCategoryIdPut(query_category_id, QueryCategorySchemaCommon, options)(axios, basePath);
        },
    };
};
/**
 * QueryCategoriesApi - object-oriented interface
 * @export
 * @class QueryCategoriesApi
 * @extends {BaseAPI}
 */
var QueryCategoriesApi = /** @class */ (function (_super) {
    __extends(QueryCategoriesApi, _super);
    function QueryCategoriesApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Search for query categories. An empty array is returned if no query categories are found.
     * @param {string} [name] Filter by name. Matches on whole words.
     * @param {string} [external_id] Filter by external ID.
     * @param {string} [status] Filter the list of query categories on a comma seperated list of statuses. Valid statuses are \&quot;published\&quot; and \&quot;unpublished\&quot;, you may inlude both. The default when not supplied is \&quot;published\&quot; only.
     * @param {string} [valid_parents_for] Filter out invalid parents (self and children) for the specified Invotra UUID of the query category.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {number} [limit] The numbers of items to return.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryCategoriesApi
     */
    QueryCategoriesApi.prototype.queryCategoriesListGet = function (name, external_id, status, valid_parents_for, offset, limit, options) {
        return QueryCategoriesApiFp(this.configuration).queryCategoriesListGet(name, external_id, status, valid_parents_for, offset, limit, options)(this.axios, this.basePath);
    };
    /**
     * Provision a new query category.
     * @param {QueryCategorySchemaCreate} QueryCategorySchemaCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryCategoriesApi
     */
    QueryCategoriesApi.prototype.queryCategoriesPost = function (QueryCategorySchemaCreate, options) {
        return QueryCategoriesApiFp(this.configuration).queryCategoriesPost(QueryCategorySchemaCreate, options)(this.axios, this.basePath);
    };
    /**
     * Delete a query category.
     * @param {string} query_category_id The Invotra UUID of the query category.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryCategoriesApi
     */
    QueryCategoriesApi.prototype.queryCategoriesQueryCategoryIdDelete = function (query_category_id, options) {
        return QueryCategoriesApiFp(this.configuration).queryCategoriesQueryCategoryIdDelete(query_category_id, options)(this.axios, this.basePath);
    };
    /**
     * Get information about the query category.
     * @param {string} query_category_id The Invotra UUID of the query category.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryCategoriesApi
     */
    QueryCategoriesApi.prototype.queryCategoriesQueryCategoryIdGet = function (query_category_id, options) {
        return QueryCategoriesApiFp(this.configuration).queryCategoriesQueryCategoryIdGet(query_category_id, options)(this.axios, this.basePath);
    };
    /**
     * Update query category information.
     * @param {string} query_category_id The Invotra UUID of the query category.
     * @param {QueryCategorySchemaCommon} QueryCategorySchemaCommon
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryCategoriesApi
     */
    QueryCategoriesApi.prototype.queryCategoriesQueryCategoryIdPut = function (query_category_id, QueryCategorySchemaCommon, options) {
        return QueryCategoriesApiFp(this.configuration).queryCategoriesQueryCategoryIdPut(query_category_id, QueryCategorySchemaCommon, options)(this.axios, this.basePath);
    };
    return QueryCategoriesApi;
}(BaseAPI));
export { QueryCategoriesApi };
//# sourceMappingURL=query-categories-api.js.map