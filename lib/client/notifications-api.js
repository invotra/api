// tslint:disable
/**
 * InvotraAPI
 * In general most fields are optional for update (PUT) requests; you can leave them blank (pass an empty string / array / whatever as appropriate) to clear them, or omit the key to leave them unchanged.
 *
 * The version of the OpenAPI document: 0.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import * as globalImportUrl from 'url';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, BaseAPI, RequiredError } from '../base';
/**
 * NotificationsApi - axios parameter creator
 * @export
 */
export var NotificationsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Clear all notifications for the current user.
         * @param {boolean} [app_notifications_only] Marks all notifications for the mobile app as read. If true, this will mark as read notifications with entity type user, and entity type node and bundle type post only.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationsClearAllPost: function (app_notifications_only, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/notifications/clear_all";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }
            // authentication SessionCookieHeader required
            if (app_notifications_only !== undefined) {
                localVarQueryParameter['app_notifications_only'] = app_notifications_only;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve notifications for a user.
         * @param {boolean} [app_notifications_only] Filter the notifications for the mobile app. If true, this will return notifications with entity type user, and entity type node and bundle type post only.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {number} [limit] The numbers of items to return.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationsGet: function (app_notifications_only, offset, limit, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/notifications";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }
            // authentication SessionCookieHeader required
            if (app_notifications_only !== undefined) {
                localVarQueryParameter['app_notifications_only'] = app_notifications_only;
            }
            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Mark a notification as read.
         * @param {string} notification_id The Invotra UUID of the notification.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationsNotificationIdPut: function (notification_id, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'notification_id' is not null or undefined
            if (notification_id === null || notification_id === undefined) {
                throw new RequiredError('notification_id', 'Required parameter notification_id was null or undefined when calling notificationsNotificationIdPut.');
            }
            var localVarPath = "/notifications/{notification_id}"
                .replace("{" + "notification_id" + "}", encodeURIComponent(String(notification_id)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }
            // authentication SessionCookieHeader required
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deregister the device the user is using for push notifications.
         * @param {'apns' | 'fcm'} service_id Identifying name of the notification service to be used.
         * @param {string} device_id The unique device id of the device the user is using.
         * @param {'ios' | 'android'} platform The platform the of the device the user is using.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationsRegisterServiceIdDelete: function (service_id, device_id, platform, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'service_id' is not null or undefined
            if (service_id === null || service_id === undefined) {
                throw new RequiredError('service_id', 'Required parameter service_id was null or undefined when calling notificationsRegisterServiceIdDelete.');
            }
            // verify required parameter 'device_id' is not null or undefined
            if (device_id === null || device_id === undefined) {
                throw new RequiredError('device_id', 'Required parameter device_id was null or undefined when calling notificationsRegisterServiceIdDelete.');
            }
            // verify required parameter 'platform' is not null or undefined
            if (platform === null || platform === undefined) {
                throw new RequiredError('platform', 'Required parameter platform was null or undefined when calling notificationsRegisterServiceIdDelete.');
            }
            var localVarPath = "/notifications/register/{service_id}"
                .replace("{" + "service_id" + "}", encodeURIComponent(String(service_id)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }
            // authentication SessionCookieHeader required
            if (device_id !== undefined) {
                localVarQueryParameter['device_id'] = device_id;
            }
            if (platform !== undefined) {
                localVarQueryParameter['platform'] = platform;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Register a token and device id to identify the user with a push notification service.
         * @param {'apns' | 'fcm'} service_id Identifying name of the notification service to be used.
         * @param {PushNotificationsSchema} PushNotificationsSchema
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationsRegisterServiceIdPost: function (service_id, PushNotificationsSchema, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'service_id' is not null or undefined
            if (service_id === null || service_id === undefined) {
                throw new RequiredError('service_id', 'Required parameter service_id was null or undefined when calling notificationsRegisterServiceIdPost.');
            }
            // verify required parameter 'PushNotificationsSchema' is not null or undefined
            if (PushNotificationsSchema === null || PushNotificationsSchema === undefined) {
                throw new RequiredError('PushNotificationsSchema', 'Required parameter PushNotificationsSchema was null or undefined when calling notificationsRegisterServiceIdPost.');
            }
            var localVarPath = "/notifications/register/{service_id}"
                .replace("{" + "service_id" + "}", encodeURIComponent(String(service_id)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }
            // authentication SessionCookieHeader required
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            var needsSerialization = (typeof PushNotificationsSchema !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(PushNotificationsSchema !== undefined ? PushNotificationsSchema : {}) : (PushNotificationsSchema || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * NotificationsApi - functional programming interface
 * @export
 */
export var NotificationsApiFp = function (configuration) {
    return {
        /**
         * Clear all notifications for the current user.
         * @param {boolean} [app_notifications_only] Marks all notifications for the mobile app as read. If true, this will mark as read notifications with entity type user, and entity type node and bundle type post only.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationsClearAllPost: function (app_notifications_only, options) {
            var localVarAxiosArgs = NotificationsApiAxiosParamCreator(configuration).notificationsClearAllPost(app_notifications_only, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = globalAxios; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve notifications for a user.
         * @param {boolean} [app_notifications_only] Filter the notifications for the mobile app. If true, this will return notifications with entity type user, and entity type node and bundle type post only.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {number} [limit] The numbers of items to return.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationsGet: function (app_notifications_only, offset, limit, options) {
            var localVarAxiosArgs = NotificationsApiAxiosParamCreator(configuration).notificationsGet(app_notifications_only, offset, limit, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = globalAxios; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Mark a notification as read.
         * @param {string} notification_id The Invotra UUID of the notification.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationsNotificationIdPut: function (notification_id, options) {
            var localVarAxiosArgs = NotificationsApiAxiosParamCreator(configuration).notificationsNotificationIdPut(notification_id, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = globalAxios; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Deregister the device the user is using for push notifications.
         * @param {'apns' | 'fcm'} service_id Identifying name of the notification service to be used.
         * @param {string} device_id The unique device id of the device the user is using.
         * @param {'ios' | 'android'} platform The platform the of the device the user is using.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationsRegisterServiceIdDelete: function (service_id, device_id, platform, options) {
            var localVarAxiosArgs = NotificationsApiAxiosParamCreator(configuration).notificationsRegisterServiceIdDelete(service_id, device_id, platform, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = globalAxios; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Register a token and device id to identify the user with a push notification service.
         * @param {'apns' | 'fcm'} service_id Identifying name of the notification service to be used.
         * @param {PushNotificationsSchema} PushNotificationsSchema
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationsRegisterServiceIdPost: function (service_id, PushNotificationsSchema, options) {
            var localVarAxiosArgs = NotificationsApiAxiosParamCreator(configuration).notificationsRegisterServiceIdPost(service_id, PushNotificationsSchema, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = globalAxios; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
/**
 * NotificationsApi - factory interface
 * @export
 */
export var NotificationsApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * Clear all notifications for the current user.
         * @param {boolean} [app_notifications_only] Marks all notifications for the mobile app as read. If true, this will mark as read notifications with entity type user, and entity type node and bundle type post only.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationsClearAllPost: function (app_notifications_only, options) {
            return NotificationsApiFp(configuration).notificationsClearAllPost(app_notifications_only, options)(axios, basePath);
        },
        /**
         * Retrieve notifications for a user.
         * @param {boolean} [app_notifications_only] Filter the notifications for the mobile app. If true, this will return notifications with entity type user, and entity type node and bundle type post only.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {number} [limit] The numbers of items to return.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationsGet: function (app_notifications_only, offset, limit, options) {
            return NotificationsApiFp(configuration).notificationsGet(app_notifications_only, offset, limit, options)(axios, basePath);
        },
        /**
         * Mark a notification as read.
         * @param {string} notification_id The Invotra UUID of the notification.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationsNotificationIdPut: function (notification_id, options) {
            return NotificationsApiFp(configuration).notificationsNotificationIdPut(notification_id, options)(axios, basePath);
        },
        /**
         * Deregister the device the user is using for push notifications.
         * @param {'apns' | 'fcm'} service_id Identifying name of the notification service to be used.
         * @param {string} device_id The unique device id of the device the user is using.
         * @param {'ios' | 'android'} platform The platform the of the device the user is using.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationsRegisterServiceIdDelete: function (service_id, device_id, platform, options) {
            return NotificationsApiFp(configuration).notificationsRegisterServiceIdDelete(service_id, device_id, platform, options)(axios, basePath);
        },
        /**
         * Register a token and device id to identify the user with a push notification service.
         * @param {'apns' | 'fcm'} service_id Identifying name of the notification service to be used.
         * @param {PushNotificationsSchema} PushNotificationsSchema
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationsRegisterServiceIdPost: function (service_id, PushNotificationsSchema, options) {
            return NotificationsApiFp(configuration).notificationsRegisterServiceIdPost(service_id, PushNotificationsSchema, options)(axios, basePath);
        },
    };
};
/**
 * NotificationsApi - object-oriented interface
 * @export
 * @class NotificationsApi
 * @extends {BaseAPI}
 */
var NotificationsApi = /** @class */ (function (_super) {
    __extends(NotificationsApi, _super);
    function NotificationsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Clear all notifications for the current user.
     * @param {boolean} [app_notifications_only] Marks all notifications for the mobile app as read. If true, this will mark as read notifications with entity type user, and entity type node and bundle type post only.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApi
     */
    NotificationsApi.prototype.notificationsClearAllPost = function (app_notifications_only, options) {
        return NotificationsApiFp(this.configuration).notificationsClearAllPost(app_notifications_only, options)(this.axios, this.basePath);
    };
    /**
     * Retrieve notifications for a user.
     * @param {boolean} [app_notifications_only] Filter the notifications for the mobile app. If true, this will return notifications with entity type user, and entity type node and bundle type post only.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {number} [limit] The numbers of items to return.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApi
     */
    NotificationsApi.prototype.notificationsGet = function (app_notifications_only, offset, limit, options) {
        return NotificationsApiFp(this.configuration).notificationsGet(app_notifications_only, offset, limit, options)(this.axios, this.basePath);
    };
    /**
     * Mark a notification as read.
     * @param {string} notification_id The Invotra UUID of the notification.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApi
     */
    NotificationsApi.prototype.notificationsNotificationIdPut = function (notification_id, options) {
        return NotificationsApiFp(this.configuration).notificationsNotificationIdPut(notification_id, options)(this.axios, this.basePath);
    };
    /**
     * Deregister the device the user is using for push notifications.
     * @param {'apns' | 'fcm'} service_id Identifying name of the notification service to be used.
     * @param {string} device_id The unique device id of the device the user is using.
     * @param {'ios' | 'android'} platform The platform the of the device the user is using.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApi
     */
    NotificationsApi.prototype.notificationsRegisterServiceIdDelete = function (service_id, device_id, platform, options) {
        return NotificationsApiFp(this.configuration).notificationsRegisterServiceIdDelete(service_id, device_id, platform, options)(this.axios, this.basePath);
    };
    /**
     * Register a token and device id to identify the user with a push notification service.
     * @param {'apns' | 'fcm'} service_id Identifying name of the notification service to be used.
     * @param {PushNotificationsSchema} PushNotificationsSchema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApi
     */
    NotificationsApi.prototype.notificationsRegisterServiceIdPost = function (service_id, PushNotificationsSchema, options) {
        return NotificationsApiFp(this.configuration).notificationsRegisterServiceIdPost(service_id, PushNotificationsSchema, options)(this.axios, this.basePath);
    };
    return NotificationsApi;
}(BaseAPI));
export { NotificationsApi };
//# sourceMappingURL=notifications-api.js.map