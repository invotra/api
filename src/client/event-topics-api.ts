// tslint:disable
/**
 * InvotraAPI
 * In general most fields are optional for update (PUT) requests; you can leave them blank (pass an empty string / array / whatever as appropriate) to clear them, or omit the key to leave them unchanged.
 *
 * The version of the OpenAPI document: 0.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';

import { EventTopicSchema } from '../model';
import { EventTopicSchemaCommon } from '../model';
import { EventTopicSchemaCreate } from '../model';
import { InlineResponse20035 } from '../model';
import { SuccessfulPostResponseSchema } from '../model';
/**
 * EventTopicsApi - axios parameter creator
 * @export
 */
export const EventTopicsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Delete an event topic.
         * @param {string} event_topic_id The Invotra UUID of the event topic.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventTopicsEventTopicIdDelete(event_topic_id: string, options: any = {}): RequestArgs {
            // verify required parameter 'event_topic_id' is not null or undefined
            if (event_topic_id === null || event_topic_id === undefined) {
                throw new RequiredError('event_topic_id','Required parameter event_topic_id was null or undefined when calling eventTopicsEventTopicIdDelete.');
            }
            const localVarPath = `/event_topics/{event_topic_id}`
                .replace(`{${"event_topic_id"}}`, encodeURIComponent(String(event_topic_id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }

            // authentication CognitoJwt required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("CognitoJwt", ["invotra/event_topics:write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            // authentication SessionCookieHeader required


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get information about the event topic.
         * @param {string} event_topic_id The Invotra UUID of the event topic.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventTopicsEventTopicIdGet(event_topic_id: string, options: any = {}): RequestArgs {
            // verify required parameter 'event_topic_id' is not null or undefined
            if (event_topic_id === null || event_topic_id === undefined) {
                throw new RequiredError('event_topic_id','Required parameter event_topic_id was null or undefined when calling eventTopicsEventTopicIdGet.');
            }
            const localVarPath = `/event_topics/{event_topic_id}`
                .replace(`{${"event_topic_id"}}`, encodeURIComponent(String(event_topic_id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }

            // authentication CognitoJwt required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("CognitoJwt", ["invotra/event_topics:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            // authentication SessionCookieHeader required


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update event topic information.
         * @param {string} event_topic_id The Invotra UUID of the event topic.
         * @param {EventTopicSchemaCommon} EventTopicSchemaCommon 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventTopicsEventTopicIdPut(event_topic_id: string, EventTopicSchemaCommon: EventTopicSchemaCommon, options: any = {}): RequestArgs {
            // verify required parameter 'event_topic_id' is not null or undefined
            if (event_topic_id === null || event_topic_id === undefined) {
                throw new RequiredError('event_topic_id','Required parameter event_topic_id was null or undefined when calling eventTopicsEventTopicIdPut.');
            }
            // verify required parameter 'EventTopicSchemaCommon' is not null or undefined
            if (EventTopicSchemaCommon === null || EventTopicSchemaCommon === undefined) {
                throw new RequiredError('EventTopicSchemaCommon','Required parameter EventTopicSchemaCommon was null or undefined when calling eventTopicsEventTopicIdPut.');
            }
            const localVarPath = `/event_topics/{event_topic_id}`
                .replace(`{${"event_topic_id"}}`, encodeURIComponent(String(event_topic_id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }

            // authentication CognitoJwt required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("CognitoJwt", ["invotra/event_topics:write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            // authentication SessionCookieHeader required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof EventTopicSchemaCommon !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(EventTopicSchemaCommon !== undefined ? EventTopicSchemaCommon : {}) : (EventTopicSchemaCommon || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Search for event topics. An empty array is returned if no event topics are found.
         * @param {string} [name] Filter by name. Matches on whole words.
         * @param {string} [external_id] Filter by external ID.
         * @param {string} [status] Filter the list of event topics on a comma seperated list of statuses. Valid statuses are \&quot;published\&quot; and \&quot;unpublished\&quot;, you may inlude both. The default when not supplied is \&quot;published\&quot; only.
         * @param {string} [valid_parents_for] Filter out invalid parents (self and children) for the specified Invotra UUID of the event topic.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {number} [limit] The numbers of items to return.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventTopicsListGet(name?: string, external_id?: string, status?: string, valid_parents_for?: string, offset?: number, limit?: number, options: any = {}): RequestArgs {
            const localVarPath = `/event_topics/list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }

            // authentication CognitoJwt required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("CognitoJwt", ["invotra/event_topics:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            // authentication SessionCookieHeader required

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (external_id !== undefined) {
                localVarQueryParameter['external_id'] = external_id;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (valid_parents_for !== undefined) {
                localVarQueryParameter['valid_parents_for'] = valid_parents_for;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Provision a new event topic.
         * @param {EventTopicSchemaCreate} EventTopicSchemaCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventTopicsPost(EventTopicSchemaCreate: EventTopicSchemaCreate, options: any = {}): RequestArgs {
            // verify required parameter 'EventTopicSchemaCreate' is not null or undefined
            if (EventTopicSchemaCreate === null || EventTopicSchemaCreate === undefined) {
                throw new RequiredError('EventTopicSchemaCreate','Required parameter EventTopicSchemaCreate was null or undefined when calling eventTopicsPost.');
            }
            const localVarPath = `/event_topics`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }

            // authentication CognitoJwt required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("CognitoJwt", ["invotra/event_topics:write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            // authentication SessionCookieHeader required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof EventTopicSchemaCreate !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(EventTopicSchemaCreate !== undefined ? EventTopicSchemaCreate : {}) : (EventTopicSchemaCreate || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EventTopicsApi - functional programming interface
 * @export
 */
export const EventTopicsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Delete an event topic.
         * @param {string} event_topic_id The Invotra UUID of the event topic.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventTopicsEventTopicIdDelete(event_topic_id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = EventTopicsApiAxiosParamCreator(configuration).eventTopicsEventTopicIdDelete(event_topic_id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get information about the event topic.
         * @param {string} event_topic_id The Invotra UUID of the event topic.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventTopicsEventTopicIdGet(event_topic_id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EventTopicSchema> {
            const localVarAxiosArgs = EventTopicsApiAxiosParamCreator(configuration).eventTopicsEventTopicIdGet(event_topic_id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update event topic information.
         * @param {string} event_topic_id The Invotra UUID of the event topic.
         * @param {EventTopicSchemaCommon} EventTopicSchemaCommon 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventTopicsEventTopicIdPut(event_topic_id: string, EventTopicSchemaCommon: EventTopicSchemaCommon, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = EventTopicsApiAxiosParamCreator(configuration).eventTopicsEventTopicIdPut(event_topic_id, EventTopicSchemaCommon, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Search for event topics. An empty array is returned if no event topics are found.
         * @param {string} [name] Filter by name. Matches on whole words.
         * @param {string} [external_id] Filter by external ID.
         * @param {string} [status] Filter the list of event topics on a comma seperated list of statuses. Valid statuses are \&quot;published\&quot; and \&quot;unpublished\&quot;, you may inlude both. The default when not supplied is \&quot;published\&quot; only.
         * @param {string} [valid_parents_for] Filter out invalid parents (self and children) for the specified Invotra UUID of the event topic.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {number} [limit] The numbers of items to return.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventTopicsListGet(name?: string, external_id?: string, status?: string, valid_parents_for?: string, offset?: number, limit?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20035> {
            const localVarAxiosArgs = EventTopicsApiAxiosParamCreator(configuration).eventTopicsListGet(name, external_id, status, valid_parents_for, offset, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Provision a new event topic.
         * @param {EventTopicSchemaCreate} EventTopicSchemaCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventTopicsPost(EventTopicSchemaCreate: EventTopicSchemaCreate, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessfulPostResponseSchema> {
            const localVarAxiosArgs = EventTopicsApiAxiosParamCreator(configuration).eventTopicsPost(EventTopicSchemaCreate, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * EventTopicsApi - factory interface
 * @export
 */
export const EventTopicsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Delete an event topic.
         * @param {string} event_topic_id The Invotra UUID of the event topic.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventTopicsEventTopicIdDelete(event_topic_id: string, options?: any): AxiosPromise<void> {
            return EventTopicsApiFp(configuration).eventTopicsEventTopicIdDelete(event_topic_id, options)(axios, basePath);
        },
        /**
         * Get information about the event topic.
         * @param {string} event_topic_id The Invotra UUID of the event topic.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventTopicsEventTopicIdGet(event_topic_id: string, options?: any): AxiosPromise<EventTopicSchema> {
            return EventTopicsApiFp(configuration).eventTopicsEventTopicIdGet(event_topic_id, options)(axios, basePath);
        },
        /**
         * Update event topic information.
         * @param {string} event_topic_id The Invotra UUID of the event topic.
         * @param {EventTopicSchemaCommon} EventTopicSchemaCommon 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventTopicsEventTopicIdPut(event_topic_id: string, EventTopicSchemaCommon: EventTopicSchemaCommon, options?: any): AxiosPromise<void> {
            return EventTopicsApiFp(configuration).eventTopicsEventTopicIdPut(event_topic_id, EventTopicSchemaCommon, options)(axios, basePath);
        },
        /**
         * Search for event topics. An empty array is returned if no event topics are found.
         * @param {string} [name] Filter by name. Matches on whole words.
         * @param {string} [external_id] Filter by external ID.
         * @param {string} [status] Filter the list of event topics on a comma seperated list of statuses. Valid statuses are \&quot;published\&quot; and \&quot;unpublished\&quot;, you may inlude both. The default when not supplied is \&quot;published\&quot; only.
         * @param {string} [valid_parents_for] Filter out invalid parents (self and children) for the specified Invotra UUID of the event topic.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {number} [limit] The numbers of items to return.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventTopicsListGet(name?: string, external_id?: string, status?: string, valid_parents_for?: string, offset?: number, limit?: number, options?: any): AxiosPromise<InlineResponse20035> {
            return EventTopicsApiFp(configuration).eventTopicsListGet(name, external_id, status, valid_parents_for, offset, limit, options)(axios, basePath);
        },
        /**
         * Provision a new event topic.
         * @param {EventTopicSchemaCreate} EventTopicSchemaCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventTopicsPost(EventTopicSchemaCreate: EventTopicSchemaCreate, options?: any): AxiosPromise<SuccessfulPostResponseSchema> {
            return EventTopicsApiFp(configuration).eventTopicsPost(EventTopicSchemaCreate, options)(axios, basePath);
        },
    };
};

/**
 * EventTopicsApi - interface
 * @export
 * @interface EventTopicsApi
 */
export interface EventTopicsApiInterface {
    /**
     * Delete an event topic.
     * @param {string} event_topic_id The Invotra UUID of the event topic.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventTopicsApiInterface
     */
    eventTopicsEventTopicIdDelete(event_topic_id: string, options?: any): AxiosPromise<void>;

    /**
     * Get information about the event topic.
     * @param {string} event_topic_id The Invotra UUID of the event topic.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventTopicsApiInterface
     */
    eventTopicsEventTopicIdGet(event_topic_id: string, options?: any): AxiosPromise<EventTopicSchema>;

    /**
     * Update event topic information.
     * @param {string} event_topic_id The Invotra UUID of the event topic.
     * @param {EventTopicSchemaCommon} EventTopicSchemaCommon 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventTopicsApiInterface
     */
    eventTopicsEventTopicIdPut(event_topic_id: string, EventTopicSchemaCommon: EventTopicSchemaCommon, options?: any): AxiosPromise<void>;

    /**
     * Search for event topics. An empty array is returned if no event topics are found.
     * @param {string} [name] Filter by name. Matches on whole words.
     * @param {string} [external_id] Filter by external ID.
     * @param {string} [status] Filter the list of event topics on a comma seperated list of statuses. Valid statuses are \&quot;published\&quot; and \&quot;unpublished\&quot;, you may inlude both. The default when not supplied is \&quot;published\&quot; only.
     * @param {string} [valid_parents_for] Filter out invalid parents (self and children) for the specified Invotra UUID of the event topic.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {number} [limit] The numbers of items to return.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventTopicsApiInterface
     */
    eventTopicsListGet(name?: string, external_id?: string, status?: string, valid_parents_for?: string, offset?: number, limit?: number, options?: any): AxiosPromise<InlineResponse20035>;

    /**
     * Provision a new event topic.
     * @param {EventTopicSchemaCreate} EventTopicSchemaCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventTopicsApiInterface
     */
    eventTopicsPost(EventTopicSchemaCreate: EventTopicSchemaCreate, options?: any): AxiosPromise<SuccessfulPostResponseSchema>;

}

/**
 * EventTopicsApi - object-oriented interface
 * @export
 * @class EventTopicsApi
 * @extends {BaseAPI}
 */
export class EventTopicsApi extends BaseAPI implements EventTopicsApiInterface {
    /**
     * Delete an event topic.
     * @param {string} event_topic_id The Invotra UUID of the event topic.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventTopicsApi
     */
    public eventTopicsEventTopicIdDelete(event_topic_id: string, options?: any) {
        return EventTopicsApiFp(this.configuration).eventTopicsEventTopicIdDelete(event_topic_id, options)(this.axios, this.basePath);
    }

    /**
     * Get information about the event topic.
     * @param {string} event_topic_id The Invotra UUID of the event topic.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventTopicsApi
     */
    public eventTopicsEventTopicIdGet(event_topic_id: string, options?: any) {
        return EventTopicsApiFp(this.configuration).eventTopicsEventTopicIdGet(event_topic_id, options)(this.axios, this.basePath);
    }

    /**
     * Update event topic information.
     * @param {string} event_topic_id The Invotra UUID of the event topic.
     * @param {EventTopicSchemaCommon} EventTopicSchemaCommon 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventTopicsApi
     */
    public eventTopicsEventTopicIdPut(event_topic_id: string, EventTopicSchemaCommon: EventTopicSchemaCommon, options?: any) {
        return EventTopicsApiFp(this.configuration).eventTopicsEventTopicIdPut(event_topic_id, EventTopicSchemaCommon, options)(this.axios, this.basePath);
    }

    /**
     * Search for event topics. An empty array is returned if no event topics are found.
     * @param {string} [name] Filter by name. Matches on whole words.
     * @param {string} [external_id] Filter by external ID.
     * @param {string} [status] Filter the list of event topics on a comma seperated list of statuses. Valid statuses are \&quot;published\&quot; and \&quot;unpublished\&quot;, you may inlude both. The default when not supplied is \&quot;published\&quot; only.
     * @param {string} [valid_parents_for] Filter out invalid parents (self and children) for the specified Invotra UUID of the event topic.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {number} [limit] The numbers of items to return.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventTopicsApi
     */
    public eventTopicsListGet(name?: string, external_id?: string, status?: string, valid_parents_for?: string, offset?: number, limit?: number, options?: any) {
        return EventTopicsApiFp(this.configuration).eventTopicsListGet(name, external_id, status, valid_parents_for, offset, limit, options)(this.axios, this.basePath);
    }

    /**
     * Provision a new event topic.
     * @param {EventTopicSchemaCreate} EventTopicSchemaCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventTopicsApi
     */
    public eventTopicsPost(EventTopicSchemaCreate: EventTopicSchemaCreate, options?: any) {
        return EventTopicsApiFp(this.configuration).eventTopicsPost(EventTopicSchemaCreate, options)(this.axios, this.basePath);
    }

}
