// tslint:disable
/**
 * Invotra API
 * In general most fields are optional for update (PUT) requests; you can leave them blank (pass an empty string / array / whatever as appropriate) to clear them, or omit the key to leave them unchanged.
 *
 * The version of the OpenAPI document: 0.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';

import { InlineResponse20054 } from '../model';
import { PushNotificationsSchema } from '../model';
/**
 * NotificationsApi - axios parameter creator
 * @export
 */
export const NotificationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Clear all notifications for the current user.
         * @param {boolean} [app_notifications_only] Marks all notifications for the mobile app as read. If true, this will mark as read notifications with entity type user, and entity type node and bundle type post only.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationsClearAllPost(app_notifications_only?: boolean, options: any = {}): RequestArgs {
            const localVarPath = `/notifications/clear_all`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }

            // authentication CognitoJwt required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("CognitoJwt", ["invotra/notifications:write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            // authentication SessionCookieHeader required

            if (app_notifications_only !== undefined) {
                localVarQueryParameter['app_notifications_only'] = app_notifications_only;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve notifications for a user.
         * @param {boolean} [app_notifications_only] Filter the notifications for the mobile app. If true, this will return notifications with entity type user, and entity type node and bundle type post only.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {number} [limit] The numbers of items to return. If the value specified is more than the maximum, the result count will be limited to the maximum.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationsGet(app_notifications_only?: boolean, offset?: number, limit?: number, options: any = {}): RequestArgs {
            const localVarPath = `/notifications`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }

            // authentication CognitoJwt required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("CognitoJwt", ["invotra/notifications:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            // authentication SessionCookieHeader required

            if (app_notifications_only !== undefined) {
                localVarQueryParameter['app_notifications_only'] = app_notifications_only;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Mark a notification as read.
         * @param {string} notification_id The Invotra UUID of the notification.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationsNotificationIdPut(notification_id: string, options: any = {}): RequestArgs {
            // verify required parameter 'notification_id' is not null or undefined
            if (notification_id === null || notification_id === undefined) {
                throw new RequiredError('notification_id','Required parameter notification_id was null or undefined when calling notificationsNotificationIdPut.');
            }
            const localVarPath = `/notifications/{notification_id}`
                .replace(`{${"notification_id"}}`, encodeURIComponent(String(notification_id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }

            // authentication CognitoJwt required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("CognitoJwt", ["invotra/notifications:write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            // authentication SessionCookieHeader required


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deregister the device the user is using for push notifications.
         * @param {'apns' | 'fcm'} service_id Identifying name of the notification service to be used.
         * @param {string} device_id The unique device id of the device the user is using.
         * @param {'ios' | 'android'} platform The platform the of the device the user is using.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationsRegisterServiceIdDelete(service_id: 'apns' | 'fcm', device_id: string, platform: 'ios' | 'android', options: any = {}): RequestArgs {
            // verify required parameter 'service_id' is not null or undefined
            if (service_id === null || service_id === undefined) {
                throw new RequiredError('service_id','Required parameter service_id was null or undefined when calling notificationsRegisterServiceIdDelete.');
            }
            // verify required parameter 'device_id' is not null or undefined
            if (device_id === null || device_id === undefined) {
                throw new RequiredError('device_id','Required parameter device_id was null or undefined when calling notificationsRegisterServiceIdDelete.');
            }
            // verify required parameter 'platform' is not null or undefined
            if (platform === null || platform === undefined) {
                throw new RequiredError('platform','Required parameter platform was null or undefined when calling notificationsRegisterServiceIdDelete.');
            }
            const localVarPath = `/notifications/register/{service_id}`
                .replace(`{${"service_id"}}`, encodeURIComponent(String(service_id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }

            // authentication CognitoJwt required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("CognitoJwt", ["invotra/notifications:write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            // authentication SessionCookieHeader required

            if (device_id !== undefined) {
                localVarQueryParameter['device_id'] = device_id;
            }

            if (platform !== undefined) {
                localVarQueryParameter['platform'] = platform;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Register a token and device id to identify the user with a push notification service.
         * @param {'apns' | 'fcm'} service_id Identifying name of the notification service to be used.
         * @param {PushNotificationsSchema} PushNotificationsSchema 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationsRegisterServiceIdPost(service_id: 'apns' | 'fcm', PushNotificationsSchema: PushNotificationsSchema, options: any = {}): RequestArgs {
            // verify required parameter 'service_id' is not null or undefined
            if (service_id === null || service_id === undefined) {
                throw new RequiredError('service_id','Required parameter service_id was null or undefined when calling notificationsRegisterServiceIdPost.');
            }
            // verify required parameter 'PushNotificationsSchema' is not null or undefined
            if (PushNotificationsSchema === null || PushNotificationsSchema === undefined) {
                throw new RequiredError('PushNotificationsSchema','Required parameter PushNotificationsSchema was null or undefined when calling notificationsRegisterServiceIdPost.');
            }
            const localVarPath = `/notifications/register/{service_id}`
                .replace(`{${"service_id"}}`, encodeURIComponent(String(service_id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }

            // authentication CognitoJwt required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("CognitoJwt", ["invotra/notifications:write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            // authentication SessionCookieHeader required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof PushNotificationsSchema !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(PushNotificationsSchema !== undefined ? PushNotificationsSchema : {}) : (PushNotificationsSchema || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NotificationsApi - functional programming interface
 * @export
 */
export const NotificationsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Clear all notifications for the current user.
         * @param {boolean} [app_notifications_only] Marks all notifications for the mobile app as read. If true, this will mark as read notifications with entity type user, and entity type node and bundle type post only.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationsClearAllPost(app_notifications_only?: boolean, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = NotificationsApiAxiosParamCreator(configuration).notificationsClearAllPost(app_notifications_only, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve notifications for a user.
         * @param {boolean} [app_notifications_only] Filter the notifications for the mobile app. If true, this will return notifications with entity type user, and entity type node and bundle type post only.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {number} [limit] The numbers of items to return. If the value specified is more than the maximum, the result count will be limited to the maximum.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationsGet(app_notifications_only?: boolean, offset?: number, limit?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20054> {
            const localVarAxiosArgs = NotificationsApiAxiosParamCreator(configuration).notificationsGet(app_notifications_only, offset, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Mark a notification as read.
         * @param {string} notification_id The Invotra UUID of the notification.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationsNotificationIdPut(notification_id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = NotificationsApiAxiosParamCreator(configuration).notificationsNotificationIdPut(notification_id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Deregister the device the user is using for push notifications.
         * @param {'apns' | 'fcm'} service_id Identifying name of the notification service to be used.
         * @param {string} device_id The unique device id of the device the user is using.
         * @param {'ios' | 'android'} platform The platform the of the device the user is using.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationsRegisterServiceIdDelete(service_id: 'apns' | 'fcm', device_id: string, platform: 'ios' | 'android', options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = NotificationsApiAxiosParamCreator(configuration).notificationsRegisterServiceIdDelete(service_id, device_id, platform, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Register a token and device id to identify the user with a push notification service.
         * @param {'apns' | 'fcm'} service_id Identifying name of the notification service to be used.
         * @param {PushNotificationsSchema} PushNotificationsSchema 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationsRegisterServiceIdPost(service_id: 'apns' | 'fcm', PushNotificationsSchema: PushNotificationsSchema, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = NotificationsApiAxiosParamCreator(configuration).notificationsRegisterServiceIdPost(service_id, PushNotificationsSchema, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * NotificationsApi - factory interface
 * @export
 */
export const NotificationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Clear all notifications for the current user.
         * @param {boolean} [app_notifications_only] Marks all notifications for the mobile app as read. If true, this will mark as read notifications with entity type user, and entity type node and bundle type post only.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationsClearAllPost(app_notifications_only?: boolean, options?: any): AxiosPromise<void> {
            return NotificationsApiFp(configuration).notificationsClearAllPost(app_notifications_only, options)(axios, basePath);
        },
        /**
         * Retrieve notifications for a user.
         * @param {boolean} [app_notifications_only] Filter the notifications for the mobile app. If true, this will return notifications with entity type user, and entity type node and bundle type post only.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {number} [limit] The numbers of items to return. If the value specified is more than the maximum, the result count will be limited to the maximum.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationsGet(app_notifications_only?: boolean, offset?: number, limit?: number, options?: any): AxiosPromise<InlineResponse20054> {
            return NotificationsApiFp(configuration).notificationsGet(app_notifications_only, offset, limit, options)(axios, basePath);
        },
        /**
         * Mark a notification as read.
         * @param {string} notification_id The Invotra UUID of the notification.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationsNotificationIdPut(notification_id: string, options?: any): AxiosPromise<void> {
            return NotificationsApiFp(configuration).notificationsNotificationIdPut(notification_id, options)(axios, basePath);
        },
        /**
         * Deregister the device the user is using for push notifications.
         * @param {'apns' | 'fcm'} service_id Identifying name of the notification service to be used.
         * @param {string} device_id The unique device id of the device the user is using.
         * @param {'ios' | 'android'} platform The platform the of the device the user is using.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationsRegisterServiceIdDelete(service_id: 'apns' | 'fcm', device_id: string, platform: 'ios' | 'android', options?: any): AxiosPromise<void> {
            return NotificationsApiFp(configuration).notificationsRegisterServiceIdDelete(service_id, device_id, platform, options)(axios, basePath);
        },
        /**
         * Register a token and device id to identify the user with a push notification service.
         * @param {'apns' | 'fcm'} service_id Identifying name of the notification service to be used.
         * @param {PushNotificationsSchema} PushNotificationsSchema 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationsRegisterServiceIdPost(service_id: 'apns' | 'fcm', PushNotificationsSchema: PushNotificationsSchema, options?: any): AxiosPromise<void> {
            return NotificationsApiFp(configuration).notificationsRegisterServiceIdPost(service_id, PushNotificationsSchema, options)(axios, basePath);
        },
    };
};

/**
 * NotificationsApi - interface
 * @export
 * @interface NotificationsApi
 */
export interface NotificationsApiInterface {
    /**
     * Clear all notifications for the current user.
     * @param {boolean} [app_notifications_only] Marks all notifications for the mobile app as read. If true, this will mark as read notifications with entity type user, and entity type node and bundle type post only.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApiInterface
     */
    notificationsClearAllPost(app_notifications_only?: boolean, options?: any): AxiosPromise<void>;

    /**
     * Retrieve notifications for a user.
     * @param {boolean} [app_notifications_only] Filter the notifications for the mobile app. If true, this will return notifications with entity type user, and entity type node and bundle type post only.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {number} [limit] The numbers of items to return. If the value specified is more than the maximum, the result count will be limited to the maximum.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApiInterface
     */
    notificationsGet(app_notifications_only?: boolean, offset?: number, limit?: number, options?: any): AxiosPromise<InlineResponse20054>;

    /**
     * Mark a notification as read.
     * @param {string} notification_id The Invotra UUID of the notification.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApiInterface
     */
    notificationsNotificationIdPut(notification_id: string, options?: any): AxiosPromise<void>;

    /**
     * Deregister the device the user is using for push notifications.
     * @param {'apns' | 'fcm'} service_id Identifying name of the notification service to be used.
     * @param {string} device_id The unique device id of the device the user is using.
     * @param {'ios' | 'android'} platform The platform the of the device the user is using.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApiInterface
     */
    notificationsRegisterServiceIdDelete(service_id: 'apns' | 'fcm', device_id: string, platform: 'ios' | 'android', options?: any): AxiosPromise<void>;

    /**
     * Register a token and device id to identify the user with a push notification service.
     * @param {'apns' | 'fcm'} service_id Identifying name of the notification service to be used.
     * @param {PushNotificationsSchema} PushNotificationsSchema 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApiInterface
     */
    notificationsRegisterServiceIdPost(service_id: 'apns' | 'fcm', PushNotificationsSchema: PushNotificationsSchema, options?: any): AxiosPromise<void>;

}

/**
 * NotificationsApi - object-oriented interface
 * @export
 * @class NotificationsApi
 * @extends {BaseAPI}
 */
export class NotificationsApi extends BaseAPI implements NotificationsApiInterface {
    /**
     * Clear all notifications for the current user.
     * @param {boolean} [app_notifications_only] Marks all notifications for the mobile app as read. If true, this will mark as read notifications with entity type user, and entity type node and bundle type post only.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApi
     */
    public notificationsClearAllPost(app_notifications_only?: boolean, options?: any) {
        return NotificationsApiFp(this.configuration).notificationsClearAllPost(app_notifications_only, options)(this.axios, this.basePath);
    }

    /**
     * Retrieve notifications for a user.
     * @param {boolean} [app_notifications_only] Filter the notifications for the mobile app. If true, this will return notifications with entity type user, and entity type node and bundle type post only.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {number} [limit] The numbers of items to return. If the value specified is more than the maximum, the result count will be limited to the maximum.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApi
     */
    public notificationsGet(app_notifications_only?: boolean, offset?: number, limit?: number, options?: any) {
        return NotificationsApiFp(this.configuration).notificationsGet(app_notifications_only, offset, limit, options)(this.axios, this.basePath);
    }

    /**
     * Mark a notification as read.
     * @param {string} notification_id The Invotra UUID of the notification.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApi
     */
    public notificationsNotificationIdPut(notification_id: string, options?: any) {
        return NotificationsApiFp(this.configuration).notificationsNotificationIdPut(notification_id, options)(this.axios, this.basePath);
    }

    /**
     * Deregister the device the user is using for push notifications.
     * @param {'apns' | 'fcm'} service_id Identifying name of the notification service to be used.
     * @param {string} device_id The unique device id of the device the user is using.
     * @param {'ios' | 'android'} platform The platform the of the device the user is using.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApi
     */
    public notificationsRegisterServiceIdDelete(service_id: 'apns' | 'fcm', device_id: string, platform: 'ios' | 'android', options?: any) {
        return NotificationsApiFp(this.configuration).notificationsRegisterServiceIdDelete(service_id, device_id, platform, options)(this.axios, this.basePath);
    }

    /**
     * Register a token and device id to identify the user with a push notification service.
     * @param {'apns' | 'fcm'} service_id Identifying name of the notification service to be used.
     * @param {PushNotificationsSchema} PushNotificationsSchema 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApi
     */
    public notificationsRegisterServiceIdPost(service_id: 'apns' | 'fcm', PushNotificationsSchema: PushNotificationsSchema, options?: any) {
        return NotificationsApiFp(this.configuration).notificationsRegisterServiceIdPost(service_id, PushNotificationsSchema, options)(this.axios, this.basePath);
    }

}
