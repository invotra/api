// tslint:disable
/**
 * Invotra API
 * In general most fields are optional for update (PUT) requests; you can leave them blank (pass an empty string / array / whatever as appropriate) to clear them, or omit the key to leave them unchanged.
 *
 * The version of the OpenAPI document: 0.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';

import { BadgeSchema } from '../model';
import { BadgeSchemaCreate } from '../model';
import { BadgeSchemaUpdate } from '../model';
import { InlineResponse20030 } from '../model';
import { SuccessfulPostResponseSchema } from '../model';
/**
 * BadgesApi - axios parameter creator
 * @export
 */
export const BadgesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Delete a badge.
         * @param {string} badge_id The Invotra UUID of the badge.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        badgesBadgeIdDelete(badge_id: string, options: any = {}): RequestArgs {
            // verify required parameter 'badge_id' is not null or undefined
            if (badge_id === null || badge_id === undefined) {
                throw new RequiredError('badge_id','Required parameter badge_id was null or undefined when calling badgesBadgeIdDelete.');
            }
            const localVarPath = `/badges/{badge_id}`
                .replace(`{${"badge_id"}}`, encodeURIComponent(String(badge_id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }

            // authentication CognitoJwt required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("CognitoJwt", ["invotra/badges:write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            // authentication SessionCookieHeader required


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get information about the badge.
         * @param {string} badge_id The Invotra UUID of the badge.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        badgesBadgeIdGet(badge_id: string, options: any = {}): RequestArgs {
            // verify required parameter 'badge_id' is not null or undefined
            if (badge_id === null || badge_id === undefined) {
                throw new RequiredError('badge_id','Required parameter badge_id was null or undefined when calling badgesBadgeIdGet.');
            }
            const localVarPath = `/badges/{badge_id}`
                .replace(`{${"badge_id"}}`, encodeURIComponent(String(badge_id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }

            // authentication CognitoJwt required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("CognitoJwt", ["invotra/badges:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            // authentication SessionCookieHeader required


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update badge information.
         * @param {string} badge_id The Invotra UUID of the badge.
         * @param {BadgeSchemaUpdate} BadgeSchemaUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        badgesBadgeIdPut(badge_id: string, BadgeSchemaUpdate: BadgeSchemaUpdate, options: any = {}): RequestArgs {
            // verify required parameter 'badge_id' is not null or undefined
            if (badge_id === null || badge_id === undefined) {
                throw new RequiredError('badge_id','Required parameter badge_id was null or undefined when calling badgesBadgeIdPut.');
            }
            // verify required parameter 'BadgeSchemaUpdate' is not null or undefined
            if (BadgeSchemaUpdate === null || BadgeSchemaUpdate === undefined) {
                throw new RequiredError('BadgeSchemaUpdate','Required parameter BadgeSchemaUpdate was null or undefined when calling badgesBadgeIdPut.');
            }
            const localVarPath = `/badges/{badge_id}`
                .replace(`{${"badge_id"}}`, encodeURIComponent(String(badge_id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }

            // authentication CognitoJwt required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("CognitoJwt", ["invotra/badges:write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            // authentication SessionCookieHeader required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof BadgeSchemaUpdate !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(BadgeSchemaUpdate !== undefined ? BadgeSchemaUpdate : {}) : (BadgeSchemaUpdate || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Search for badges. An empty array is returned if no badges are found.
         * @param {string} [name] Filter by name. Matches on whole words.
         * @param {string} [external_id] Filter by external ID.
         * @param {string} [status] Filter the list of badges on a comma-separated list of statuses. Valid statuses are \&quot;published\&quot; and \&quot;unpublished\&quot;. You may include both. The default when not supplied is \&quot;published\&quot; only.
         * @param {string} [valid_parents_for] Filter out invalid parents (self and children) for the specified Invotra UUID of the badge.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {number} [limit] The numbers of items to return. If the value specified is more than the maximum, the result count will be limited to the maximum.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        badgesListGet(name?: string, external_id?: string, status?: string, valid_parents_for?: string, offset?: number, limit?: number, options: any = {}): RequestArgs {
            const localVarPath = `/badges/list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }

            // authentication CognitoJwt required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("CognitoJwt", ["invotra/badges:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            // authentication SessionCookieHeader required

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (external_id !== undefined) {
                localVarQueryParameter['external_id'] = external_id;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (valid_parents_for !== undefined) {
                localVarQueryParameter['valid_parents_for'] = valid_parents_for;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Provision a new badge.
         * @param {BadgeSchemaCreate} BadgeSchemaCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        badgesPost(BadgeSchemaCreate: BadgeSchemaCreate, options: any = {}): RequestArgs {
            // verify required parameter 'BadgeSchemaCreate' is not null or undefined
            if (BadgeSchemaCreate === null || BadgeSchemaCreate === undefined) {
                throw new RequiredError('BadgeSchemaCreate','Required parameter BadgeSchemaCreate was null or undefined when calling badgesPost.');
            }
            const localVarPath = `/badges`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }

            // authentication CognitoJwt required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("CognitoJwt", ["invotra/badges:write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            // authentication SessionCookieHeader required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof BadgeSchemaCreate !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(BadgeSchemaCreate !== undefined ? BadgeSchemaCreate : {}) : (BadgeSchemaCreate || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BadgesApi - functional programming interface
 * @export
 */
export const BadgesApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Delete a badge.
         * @param {string} badge_id The Invotra UUID of the badge.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        badgesBadgeIdDelete(badge_id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = BadgesApiAxiosParamCreator(configuration).badgesBadgeIdDelete(badge_id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get information about the badge.
         * @param {string} badge_id The Invotra UUID of the badge.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        badgesBadgeIdGet(badge_id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<BadgeSchema> {
            const localVarAxiosArgs = BadgesApiAxiosParamCreator(configuration).badgesBadgeIdGet(badge_id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update badge information.
         * @param {string} badge_id The Invotra UUID of the badge.
         * @param {BadgeSchemaUpdate} BadgeSchemaUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        badgesBadgeIdPut(badge_id: string, BadgeSchemaUpdate: BadgeSchemaUpdate, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = BadgesApiAxiosParamCreator(configuration).badgesBadgeIdPut(badge_id, BadgeSchemaUpdate, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Search for badges. An empty array is returned if no badges are found.
         * @param {string} [name] Filter by name. Matches on whole words.
         * @param {string} [external_id] Filter by external ID.
         * @param {string} [status] Filter the list of badges on a comma-separated list of statuses. Valid statuses are \&quot;published\&quot; and \&quot;unpublished\&quot;. You may include both. The default when not supplied is \&quot;published\&quot; only.
         * @param {string} [valid_parents_for] Filter out invalid parents (self and children) for the specified Invotra UUID of the badge.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {number} [limit] The numbers of items to return. If the value specified is more than the maximum, the result count will be limited to the maximum.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        badgesListGet(name?: string, external_id?: string, status?: string, valid_parents_for?: string, offset?: number, limit?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20030> {
            const localVarAxiosArgs = BadgesApiAxiosParamCreator(configuration).badgesListGet(name, external_id, status, valid_parents_for, offset, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Provision a new badge.
         * @param {BadgeSchemaCreate} BadgeSchemaCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        badgesPost(BadgeSchemaCreate: BadgeSchemaCreate, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessfulPostResponseSchema> {
            const localVarAxiosArgs = BadgesApiAxiosParamCreator(configuration).badgesPost(BadgeSchemaCreate, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * BadgesApi - factory interface
 * @export
 */
export const BadgesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Delete a badge.
         * @param {string} badge_id The Invotra UUID of the badge.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        badgesBadgeIdDelete(badge_id: string, options?: any): AxiosPromise<void> {
            return BadgesApiFp(configuration).badgesBadgeIdDelete(badge_id, options)(axios, basePath);
        },
        /**
         * Get information about the badge.
         * @param {string} badge_id The Invotra UUID of the badge.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        badgesBadgeIdGet(badge_id: string, options?: any): AxiosPromise<BadgeSchema> {
            return BadgesApiFp(configuration).badgesBadgeIdGet(badge_id, options)(axios, basePath);
        },
        /**
         * Update badge information.
         * @param {string} badge_id The Invotra UUID of the badge.
         * @param {BadgeSchemaUpdate} BadgeSchemaUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        badgesBadgeIdPut(badge_id: string, BadgeSchemaUpdate: BadgeSchemaUpdate, options?: any): AxiosPromise<void> {
            return BadgesApiFp(configuration).badgesBadgeIdPut(badge_id, BadgeSchemaUpdate, options)(axios, basePath);
        },
        /**
         * Search for badges. An empty array is returned if no badges are found.
         * @param {string} [name] Filter by name. Matches on whole words.
         * @param {string} [external_id] Filter by external ID.
         * @param {string} [status] Filter the list of badges on a comma-separated list of statuses. Valid statuses are \&quot;published\&quot; and \&quot;unpublished\&quot;. You may include both. The default when not supplied is \&quot;published\&quot; only.
         * @param {string} [valid_parents_for] Filter out invalid parents (self and children) for the specified Invotra UUID of the badge.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {number} [limit] The numbers of items to return. If the value specified is more than the maximum, the result count will be limited to the maximum.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        badgesListGet(name?: string, external_id?: string, status?: string, valid_parents_for?: string, offset?: number, limit?: number, options?: any): AxiosPromise<InlineResponse20030> {
            return BadgesApiFp(configuration).badgesListGet(name, external_id, status, valid_parents_for, offset, limit, options)(axios, basePath);
        },
        /**
         * Provision a new badge.
         * @param {BadgeSchemaCreate} BadgeSchemaCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        badgesPost(BadgeSchemaCreate: BadgeSchemaCreate, options?: any): AxiosPromise<SuccessfulPostResponseSchema> {
            return BadgesApiFp(configuration).badgesPost(BadgeSchemaCreate, options)(axios, basePath);
        },
    };
};

/**
 * BadgesApi - interface
 * @export
 * @interface BadgesApi
 */
export interface BadgesApiInterface {
    /**
     * Delete a badge.
     * @param {string} badge_id The Invotra UUID of the badge.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BadgesApiInterface
     */
    badgesBadgeIdDelete(badge_id: string, options?: any): AxiosPromise<void>;

    /**
     * Get information about the badge.
     * @param {string} badge_id The Invotra UUID of the badge.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BadgesApiInterface
     */
    badgesBadgeIdGet(badge_id: string, options?: any): AxiosPromise<BadgeSchema>;

    /**
     * Update badge information.
     * @param {string} badge_id The Invotra UUID of the badge.
     * @param {BadgeSchemaUpdate} BadgeSchemaUpdate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BadgesApiInterface
     */
    badgesBadgeIdPut(badge_id: string, BadgeSchemaUpdate: BadgeSchemaUpdate, options?: any): AxiosPromise<void>;

    /**
     * Search for badges. An empty array is returned if no badges are found.
     * @param {string} [name] Filter by name. Matches on whole words.
     * @param {string} [external_id] Filter by external ID.
     * @param {string} [status] Filter the list of badges on a comma-separated list of statuses. Valid statuses are \&quot;published\&quot; and \&quot;unpublished\&quot;. You may include both. The default when not supplied is \&quot;published\&quot; only.
     * @param {string} [valid_parents_for] Filter out invalid parents (self and children) for the specified Invotra UUID of the badge.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {number} [limit] The numbers of items to return. If the value specified is more than the maximum, the result count will be limited to the maximum.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BadgesApiInterface
     */
    badgesListGet(name?: string, external_id?: string, status?: string, valid_parents_for?: string, offset?: number, limit?: number, options?: any): AxiosPromise<InlineResponse20030>;

    /**
     * Provision a new badge.
     * @param {BadgeSchemaCreate} BadgeSchemaCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BadgesApiInterface
     */
    badgesPost(BadgeSchemaCreate: BadgeSchemaCreate, options?: any): AxiosPromise<SuccessfulPostResponseSchema>;

}

/**
 * BadgesApi - object-oriented interface
 * @export
 * @class BadgesApi
 * @extends {BaseAPI}
 */
export class BadgesApi extends BaseAPI implements BadgesApiInterface {
    /**
     * Delete a badge.
     * @param {string} badge_id The Invotra UUID of the badge.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BadgesApi
     */
    public badgesBadgeIdDelete(badge_id: string, options?: any) {
        return BadgesApiFp(this.configuration).badgesBadgeIdDelete(badge_id, options)(this.axios, this.basePath);
    }

    /**
     * Get information about the badge.
     * @param {string} badge_id The Invotra UUID of the badge.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BadgesApi
     */
    public badgesBadgeIdGet(badge_id: string, options?: any) {
        return BadgesApiFp(this.configuration).badgesBadgeIdGet(badge_id, options)(this.axios, this.basePath);
    }

    /**
     * Update badge information.
     * @param {string} badge_id The Invotra UUID of the badge.
     * @param {BadgeSchemaUpdate} BadgeSchemaUpdate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BadgesApi
     */
    public badgesBadgeIdPut(badge_id: string, BadgeSchemaUpdate: BadgeSchemaUpdate, options?: any) {
        return BadgesApiFp(this.configuration).badgesBadgeIdPut(badge_id, BadgeSchemaUpdate, options)(this.axios, this.basePath);
    }

    /**
     * Search for badges. An empty array is returned if no badges are found.
     * @param {string} [name] Filter by name. Matches on whole words.
     * @param {string} [external_id] Filter by external ID.
     * @param {string} [status] Filter the list of badges on a comma-separated list of statuses. Valid statuses are \&quot;published\&quot; and \&quot;unpublished\&quot;. You may include both. The default when not supplied is \&quot;published\&quot; only.
     * @param {string} [valid_parents_for] Filter out invalid parents (self and children) for the specified Invotra UUID of the badge.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {number} [limit] The numbers of items to return. If the value specified is more than the maximum, the result count will be limited to the maximum.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BadgesApi
     */
    public badgesListGet(name?: string, external_id?: string, status?: string, valid_parents_for?: string, offset?: number, limit?: number, options?: any) {
        return BadgesApiFp(this.configuration).badgesListGet(name, external_id, status, valid_parents_for, offset, limit, options)(this.axios, this.basePath);
    }

    /**
     * Provision a new badge.
     * @param {BadgeSchemaCreate} BadgeSchemaCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BadgesApi
     */
    public badgesPost(BadgeSchemaCreate: BadgeSchemaCreate, options?: any) {
        return BadgesApiFp(this.configuration).badgesPost(BadgeSchemaCreate, options)(this.axios, this.basePath);
    }

}
