// tslint:disable
/**
 * InvotraAPI
 * In general most fields are optional for update (PUT) requests; you can leave them blank (pass an empty string / array / whatever as appropriate) to clear them, or omit the key to leave them unchanged.
 *
 * The version of the OpenAPI document: 0.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';

import { InlineResponse20020 } from '../model';
import { NewsSchema } from '../model';
import { NewsSchemaCreate } from '../model';
import { NewsSchemaUpdate } from '../model';
import { SuccessfulPostResponseSchema } from '../model';
/**
 * NewsApi - axios parameter creator
 * @export
 */
export const NewsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Search for news. An empty array is returned if no news where found.
         * @param {string} [author_uuid] Filter on Invotra UUID of the author.
         * @param {string} [created_date] Filter on date created. Format: YYYY-MM-DD.
         * @param {string} [updated_date] Filter on date updated. Format: YYYY-MM-DD.
         * @param {string} [state] Filter the list of news on a comma seperated list of states. Valid statuses are \&quot;draft\&quot;, \&quot;needs_review\&quot;, \&quot;reviewed\&quot;, \&quot;published\&quot;, and \&quot;unpublished\&quot;. You may include multiple. The default when not supplied is \&quot;published\&quot; only.
         * @param {'timestamp_created' | 'timestamp_updated'} [sort] Field to sort by.
         * @param {'asc' | 'desc'} [order] Sort order.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {number} [limit] The numbers of items to return. If the value specified is more than the maximum, the result count will be limited to the maximum.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        newsListGet(author_uuid?: string, created_date?: string, updated_date?: string, state?: string, sort?: 'timestamp_created' | 'timestamp_updated', order?: 'asc' | 'desc', offset?: number, limit?: number, options: any = {}): RequestArgs {
            const localVarPath = `/news/list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }

            // authentication SessionCookieHeader required

            if (author_uuid !== undefined) {
                localVarQueryParameter['author_uuid'] = author_uuid;
            }

            if (created_date !== undefined) {
                localVarQueryParameter['created_date'] = created_date;
            }

            if (updated_date !== undefined) {
                localVarQueryParameter['updated_date'] = updated_date;
            }

            if (state !== undefined) {
                localVarQueryParameter['state'] = state;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a news.
         * @param {string} news_id The Invotra UUID of the news.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        newsNewsIdDelete(news_id: string, options: any = {}): RequestArgs {
            // verify required parameter 'news_id' is not null or undefined
            if (news_id === null || news_id === undefined) {
                throw new RequiredError('news_id','Required parameter news_id was null or undefined when calling newsNewsIdDelete.');
            }
            const localVarPath = `/news/{news_id}`
                .replace(`{${"news_id"}}`, encodeURIComponent(String(news_id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }

            // authentication SessionCookieHeader required


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get information about the news.
         * @param {string} news_id The Invotra UUID of the news.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        newsNewsIdGet(news_id: string, options: any = {}): RequestArgs {
            // verify required parameter 'news_id' is not null or undefined
            if (news_id === null || news_id === undefined) {
                throw new RequiredError('news_id','Required parameter news_id was null or undefined when calling newsNewsIdGet.');
            }
            const localVarPath = `/news/{news_id}`
                .replace(`{${"news_id"}}`, encodeURIComponent(String(news_id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }

            // authentication SessionCookieHeader required


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update news information.
         * @param {string} news_id The Invotra UUID of the news.
         * @param {NewsSchemaUpdate} NewsSchemaUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        newsNewsIdPut(news_id: string, NewsSchemaUpdate: NewsSchemaUpdate, options: any = {}): RequestArgs {
            // verify required parameter 'news_id' is not null or undefined
            if (news_id === null || news_id === undefined) {
                throw new RequiredError('news_id','Required parameter news_id was null or undefined when calling newsNewsIdPut.');
            }
            // verify required parameter 'NewsSchemaUpdate' is not null or undefined
            if (NewsSchemaUpdate === null || NewsSchemaUpdate === undefined) {
                throw new RequiredError('NewsSchemaUpdate','Required parameter NewsSchemaUpdate was null or undefined when calling newsNewsIdPut.');
            }
            const localVarPath = `/news/{news_id}`
                .replace(`{${"news_id"}}`, encodeURIComponent(String(news_id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }

            // authentication SessionCookieHeader required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof NewsSchemaUpdate !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(NewsSchemaUpdate !== undefined ? NewsSchemaUpdate : {}) : (NewsSchemaUpdate || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Provision a new news.
         * @param {NewsSchemaCreate} NewsSchemaCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        newsPost(NewsSchemaCreate: NewsSchemaCreate, options: any = {}): RequestArgs {
            // verify required parameter 'NewsSchemaCreate' is not null or undefined
            if (NewsSchemaCreate === null || NewsSchemaCreate === undefined) {
                throw new RequiredError('NewsSchemaCreate','Required parameter NewsSchemaCreate was null or undefined when calling newsPost.');
            }
            const localVarPath = `/news`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }

            // authentication SessionCookieHeader required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof NewsSchemaCreate !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(NewsSchemaCreate !== undefined ? NewsSchemaCreate : {}) : (NewsSchemaCreate || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NewsApi - functional programming interface
 * @export
 */
export const NewsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Search for news. An empty array is returned if no news where found.
         * @param {string} [author_uuid] Filter on Invotra UUID of the author.
         * @param {string} [created_date] Filter on date created. Format: YYYY-MM-DD.
         * @param {string} [updated_date] Filter on date updated. Format: YYYY-MM-DD.
         * @param {string} [state] Filter the list of news on a comma seperated list of states. Valid statuses are \&quot;draft\&quot;, \&quot;needs_review\&quot;, \&quot;reviewed\&quot;, \&quot;published\&quot;, and \&quot;unpublished\&quot;. You may include multiple. The default when not supplied is \&quot;published\&quot; only.
         * @param {'timestamp_created' | 'timestamp_updated'} [sort] Field to sort by.
         * @param {'asc' | 'desc'} [order] Sort order.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {number} [limit] The numbers of items to return. If the value specified is more than the maximum, the result count will be limited to the maximum.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        newsListGet(author_uuid?: string, created_date?: string, updated_date?: string, state?: string, sort?: 'timestamp_created' | 'timestamp_updated', order?: 'asc' | 'desc', offset?: number, limit?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20020> {
            const localVarAxiosArgs = NewsApiAxiosParamCreator(configuration).newsListGet(author_uuid, created_date, updated_date, state, sort, order, offset, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete a news.
         * @param {string} news_id The Invotra UUID of the news.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        newsNewsIdDelete(news_id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = NewsApiAxiosParamCreator(configuration).newsNewsIdDelete(news_id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get information about the news.
         * @param {string} news_id The Invotra UUID of the news.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        newsNewsIdGet(news_id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<NewsSchema> {
            const localVarAxiosArgs = NewsApiAxiosParamCreator(configuration).newsNewsIdGet(news_id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update news information.
         * @param {string} news_id The Invotra UUID of the news.
         * @param {NewsSchemaUpdate} NewsSchemaUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        newsNewsIdPut(news_id: string, NewsSchemaUpdate: NewsSchemaUpdate, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = NewsApiAxiosParamCreator(configuration).newsNewsIdPut(news_id, NewsSchemaUpdate, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Provision a new news.
         * @param {NewsSchemaCreate} NewsSchemaCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        newsPost(NewsSchemaCreate: NewsSchemaCreate, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessfulPostResponseSchema> {
            const localVarAxiosArgs = NewsApiAxiosParamCreator(configuration).newsPost(NewsSchemaCreate, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * NewsApi - factory interface
 * @export
 */
export const NewsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Search for news. An empty array is returned if no news where found.
         * @param {string} [author_uuid] Filter on Invotra UUID of the author.
         * @param {string} [created_date] Filter on date created. Format: YYYY-MM-DD.
         * @param {string} [updated_date] Filter on date updated. Format: YYYY-MM-DD.
         * @param {string} [state] Filter the list of news on a comma seperated list of states. Valid statuses are \&quot;draft\&quot;, \&quot;needs_review\&quot;, \&quot;reviewed\&quot;, \&quot;published\&quot;, and \&quot;unpublished\&quot;. You may include multiple. The default when not supplied is \&quot;published\&quot; only.
         * @param {'timestamp_created' | 'timestamp_updated'} [sort] Field to sort by.
         * @param {'asc' | 'desc'} [order] Sort order.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {number} [limit] The numbers of items to return. If the value specified is more than the maximum, the result count will be limited to the maximum.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        newsListGet(author_uuid?: string, created_date?: string, updated_date?: string, state?: string, sort?: 'timestamp_created' | 'timestamp_updated', order?: 'asc' | 'desc', offset?: number, limit?: number, options?: any): AxiosPromise<InlineResponse20020> {
            return NewsApiFp(configuration).newsListGet(author_uuid, created_date, updated_date, state, sort, order, offset, limit, options)(axios, basePath);
        },
        /**
         * Delete a news.
         * @param {string} news_id The Invotra UUID of the news.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        newsNewsIdDelete(news_id: string, options?: any): AxiosPromise<void> {
            return NewsApiFp(configuration).newsNewsIdDelete(news_id, options)(axios, basePath);
        },
        /**
         * Get information about the news.
         * @param {string} news_id The Invotra UUID of the news.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        newsNewsIdGet(news_id: string, options?: any): AxiosPromise<NewsSchema> {
            return NewsApiFp(configuration).newsNewsIdGet(news_id, options)(axios, basePath);
        },
        /**
         * Update news information.
         * @param {string} news_id The Invotra UUID of the news.
         * @param {NewsSchemaUpdate} NewsSchemaUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        newsNewsIdPut(news_id: string, NewsSchemaUpdate: NewsSchemaUpdate, options?: any): AxiosPromise<void> {
            return NewsApiFp(configuration).newsNewsIdPut(news_id, NewsSchemaUpdate, options)(axios, basePath);
        },
        /**
         * Provision a new news.
         * @param {NewsSchemaCreate} NewsSchemaCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        newsPost(NewsSchemaCreate: NewsSchemaCreate, options?: any): AxiosPromise<SuccessfulPostResponseSchema> {
            return NewsApiFp(configuration).newsPost(NewsSchemaCreate, options)(axios, basePath);
        },
    };
};

/**
 * NewsApi - interface
 * @export
 * @interface NewsApi
 */
export interface NewsApiInterface {
    /**
     * Search for news. An empty array is returned if no news where found.
     * @param {string} [author_uuid] Filter on Invotra UUID of the author.
     * @param {string} [created_date] Filter on date created. Format: YYYY-MM-DD.
     * @param {string} [updated_date] Filter on date updated. Format: YYYY-MM-DD.
     * @param {string} [state] Filter the list of news on a comma seperated list of states. Valid statuses are \&quot;draft\&quot;, \&quot;needs_review\&quot;, \&quot;reviewed\&quot;, \&quot;published\&quot;, and \&quot;unpublished\&quot;. You may include multiple. The default when not supplied is \&quot;published\&quot; only.
     * @param {'timestamp_created' | 'timestamp_updated'} [sort] Field to sort by.
     * @param {'asc' | 'desc'} [order] Sort order.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {number} [limit] The numbers of items to return. If the value specified is more than the maximum, the result count will be limited to the maximum.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NewsApiInterface
     */
    newsListGet(author_uuid?: string, created_date?: string, updated_date?: string, state?: string, sort?: 'timestamp_created' | 'timestamp_updated', order?: 'asc' | 'desc', offset?: number, limit?: number, options?: any): AxiosPromise<InlineResponse20020>;

    /**
     * Delete a news.
     * @param {string} news_id The Invotra UUID of the news.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NewsApiInterface
     */
    newsNewsIdDelete(news_id: string, options?: any): AxiosPromise<void>;

    /**
     * Get information about the news.
     * @param {string} news_id The Invotra UUID of the news.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NewsApiInterface
     */
    newsNewsIdGet(news_id: string, options?: any): AxiosPromise<NewsSchema>;

    /**
     * Update news information.
     * @param {string} news_id The Invotra UUID of the news.
     * @param {NewsSchemaUpdate} NewsSchemaUpdate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NewsApiInterface
     */
    newsNewsIdPut(news_id: string, NewsSchemaUpdate: NewsSchemaUpdate, options?: any): AxiosPromise<void>;

    /**
     * Provision a new news.
     * @param {NewsSchemaCreate} NewsSchemaCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NewsApiInterface
     */
    newsPost(NewsSchemaCreate: NewsSchemaCreate, options?: any): AxiosPromise<SuccessfulPostResponseSchema>;

}

/**
 * NewsApi - object-oriented interface
 * @export
 * @class NewsApi
 * @extends {BaseAPI}
 */
export class NewsApi extends BaseAPI implements NewsApiInterface {
    /**
     * Search for news. An empty array is returned if no news where found.
     * @param {string} [author_uuid] Filter on Invotra UUID of the author.
     * @param {string} [created_date] Filter on date created. Format: YYYY-MM-DD.
     * @param {string} [updated_date] Filter on date updated. Format: YYYY-MM-DD.
     * @param {string} [state] Filter the list of news on a comma seperated list of states. Valid statuses are \&quot;draft\&quot;, \&quot;needs_review\&quot;, \&quot;reviewed\&quot;, \&quot;published\&quot;, and \&quot;unpublished\&quot;. You may include multiple. The default when not supplied is \&quot;published\&quot; only.
     * @param {'timestamp_created' | 'timestamp_updated'} [sort] Field to sort by.
     * @param {'asc' | 'desc'} [order] Sort order.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {number} [limit] The numbers of items to return. If the value specified is more than the maximum, the result count will be limited to the maximum.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NewsApi
     */
    public newsListGet(author_uuid?: string, created_date?: string, updated_date?: string, state?: string, sort?: 'timestamp_created' | 'timestamp_updated', order?: 'asc' | 'desc', offset?: number, limit?: number, options?: any) {
        return NewsApiFp(this.configuration).newsListGet(author_uuid, created_date, updated_date, state, sort, order, offset, limit, options)(this.axios, this.basePath);
    }

    /**
     * Delete a news.
     * @param {string} news_id The Invotra UUID of the news.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NewsApi
     */
    public newsNewsIdDelete(news_id: string, options?: any) {
        return NewsApiFp(this.configuration).newsNewsIdDelete(news_id, options)(this.axios, this.basePath);
    }

    /**
     * Get information about the news.
     * @param {string} news_id The Invotra UUID of the news.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NewsApi
     */
    public newsNewsIdGet(news_id: string, options?: any) {
        return NewsApiFp(this.configuration).newsNewsIdGet(news_id, options)(this.axios, this.basePath);
    }

    /**
     * Update news information.
     * @param {string} news_id The Invotra UUID of the news.
     * @param {NewsSchemaUpdate} NewsSchemaUpdate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NewsApi
     */
    public newsNewsIdPut(news_id: string, NewsSchemaUpdate: NewsSchemaUpdate, options?: any) {
        return NewsApiFp(this.configuration).newsNewsIdPut(news_id, NewsSchemaUpdate, options)(this.axios, this.basePath);
    }

    /**
     * Provision a new news.
     * @param {NewsSchemaCreate} NewsSchemaCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NewsApi
     */
    public newsPost(NewsSchemaCreate: NewsSchemaCreate, options?: any) {
        return NewsApiFp(this.configuration).newsPost(NewsSchemaCreate, options)(this.axios, this.basePath);
    }

}
