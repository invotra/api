// tslint:disable
/**
 * InvotraAPI
 * In general most fields are optional for update (PUT) requests; you can leave them blank (pass an empty string / array / whatever as appropriate) to clear them, or omit the key to leave them unchanged.
 *
 * The version of the OpenAPI document: 0.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';

import { InlineResponse20028 } from '../model';
import { LocationBuildingSchema } from '../model';
import { LocationBuildingSchemaCommon } from '../model';
import { LocationBuildingSchemaCreate } from '../model';
import { LocationBuildingSchemaUpdate } from '../model';
import { LocationFloorSchema } from '../model';
import { LocationFloorSchemaCommon } from '../model';
import { LocationFloorSchemaCreate } from '../model';
import { LocationFloorSchemaUpdate } from '../model';
import { LocationSiteSchema } from '../model';
import { LocationSiteSchemaCommon } from '../model';
import { LocationSiteSchemaCreate } from '../model';
import { LocationSiteSchemaUpdate } from '../model';
import { LocationSpaceSchema } from '../model';
import { LocationSpaceSchemaCommon } from '../model';
import { LocationSpaceSchemaCreate } from '../model';
import { LocationSpaceSchemaUpdate } from '../model';
import { LocationUuidListItemSchema } from '../model';
import { SuccessfulPostResponseWithMessageSchema } from '../model';
/**
 * LocationsApi - axios parameter creator
 * @export
 */
export const LocationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Remove location information
         * @param {string} location_id The Invotra UUID of the location.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationsBuildingsLocationIdDelete(location_id: string, options: any = {}): RequestArgs {
            // verify required parameter 'location_id' is not null or undefined
            if (location_id === null || location_id === undefined) {
                throw new RequiredError('location_id','Required parameter location_id was null or undefined when calling locationsBuildingsLocationIdDelete.');
            }
            const localVarPath = `/locations/buildings/{location_id}`
                .replace(`{${"location_id"}}`, encodeURIComponent(String(location_id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }

            // authentication SessionCookieHeader required


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get information about the location.
         * @param {string} location_id The Invotra UUID of the location.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationsBuildingsLocationIdGet(location_id: string, options: any = {}): RequestArgs {
            // verify required parameter 'location_id' is not null or undefined
            if (location_id === null || location_id === undefined) {
                throw new RequiredError('location_id','Required parameter location_id was null or undefined when calling locationsBuildingsLocationIdGet.');
            }
            const localVarPath = `/locations/buildings/{location_id}`
                .replace(`{${"location_id"}}`, encodeURIComponent(String(location_id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }

            // authentication SessionCookieHeader required


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update location information.
         * @param {string} location_id The Invotra UUID of the location.
         * @param {LocationBuildingSchemaUpdate} LocationBuildingSchemaUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationsBuildingsLocationIdPut(location_id: string, LocationBuildingSchemaUpdate: LocationBuildingSchemaUpdate, options: any = {}): RequestArgs {
            // verify required parameter 'location_id' is not null or undefined
            if (location_id === null || location_id === undefined) {
                throw new RequiredError('location_id','Required parameter location_id was null or undefined when calling locationsBuildingsLocationIdPut.');
            }
            // verify required parameter 'LocationBuildingSchemaUpdate' is not null or undefined
            if (LocationBuildingSchemaUpdate === null || LocationBuildingSchemaUpdate === undefined) {
                throw new RequiredError('LocationBuildingSchemaUpdate','Required parameter LocationBuildingSchemaUpdate was null or undefined when calling locationsBuildingsLocationIdPut.');
            }
            const localVarPath = `/locations/buildings/{location_id}`
                .replace(`{${"location_id"}}`, encodeURIComponent(String(location_id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }

            // authentication SessionCookieHeader required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof LocationBuildingSchemaUpdate !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(LocationBuildingSchemaUpdate !== undefined ? LocationBuildingSchemaUpdate : {}) : (LocationBuildingSchemaUpdate || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Provision a new location.
         * @param {LocationBuildingSchemaCreate} LocationBuildingSchemaCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationsBuildingsPost(LocationBuildingSchemaCreate: LocationBuildingSchemaCreate, options: any = {}): RequestArgs {
            // verify required parameter 'LocationBuildingSchemaCreate' is not null or undefined
            if (LocationBuildingSchemaCreate === null || LocationBuildingSchemaCreate === undefined) {
                throw new RequiredError('LocationBuildingSchemaCreate','Required parameter LocationBuildingSchemaCreate was null or undefined when calling locationsBuildingsPost.');
            }
            const localVarPath = `/locations/buildings`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }

            // authentication SessionCookieHeader required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof LocationBuildingSchemaCreate !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(LocationBuildingSchemaCreate !== undefined ? LocationBuildingSchemaCreate : {}) : (LocationBuildingSchemaCreate || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove location information
         * @param {string} location_id The Invotra UUID of the location.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationsFloorsLocationIdDelete(location_id: string, options: any = {}): RequestArgs {
            // verify required parameter 'location_id' is not null or undefined
            if (location_id === null || location_id === undefined) {
                throw new RequiredError('location_id','Required parameter location_id was null or undefined when calling locationsFloorsLocationIdDelete.');
            }
            const localVarPath = `/locations/floors/{location_id}`
                .replace(`{${"location_id"}}`, encodeURIComponent(String(location_id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }

            // authentication SessionCookieHeader required


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get information about the location.
         * @param {string} location_id The Invotra UUID of the location.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationsFloorsLocationIdGet(location_id: string, options: any = {}): RequestArgs {
            // verify required parameter 'location_id' is not null or undefined
            if (location_id === null || location_id === undefined) {
                throw new RequiredError('location_id','Required parameter location_id was null or undefined when calling locationsFloorsLocationIdGet.');
            }
            const localVarPath = `/locations/floors/{location_id}`
                .replace(`{${"location_id"}}`, encodeURIComponent(String(location_id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }

            // authentication SessionCookieHeader required


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update location information.
         * @param {string} location_id The Invotra UUID of the location.
         * @param {LocationFloorSchemaUpdate} LocationFloorSchemaUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationsFloorsLocationIdPut(location_id: string, LocationFloorSchemaUpdate: LocationFloorSchemaUpdate, options: any = {}): RequestArgs {
            // verify required parameter 'location_id' is not null or undefined
            if (location_id === null || location_id === undefined) {
                throw new RequiredError('location_id','Required parameter location_id was null or undefined when calling locationsFloorsLocationIdPut.');
            }
            // verify required parameter 'LocationFloorSchemaUpdate' is not null or undefined
            if (LocationFloorSchemaUpdate === null || LocationFloorSchemaUpdate === undefined) {
                throw new RequiredError('LocationFloorSchemaUpdate','Required parameter LocationFloorSchemaUpdate was null or undefined when calling locationsFloorsLocationIdPut.');
            }
            const localVarPath = `/locations/floors/{location_id}`
                .replace(`{${"location_id"}}`, encodeURIComponent(String(location_id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }

            // authentication SessionCookieHeader required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof LocationFloorSchemaUpdate !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(LocationFloorSchemaUpdate !== undefined ? LocationFloorSchemaUpdate : {}) : (LocationFloorSchemaUpdate || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Provision a new location.
         * @param {LocationFloorSchemaCreate} LocationFloorSchemaCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationsFloorsPost(LocationFloorSchemaCreate: LocationFloorSchemaCreate, options: any = {}): RequestArgs {
            // verify required parameter 'LocationFloorSchemaCreate' is not null or undefined
            if (LocationFloorSchemaCreate === null || LocationFloorSchemaCreate === undefined) {
                throw new RequiredError('LocationFloorSchemaCreate','Required parameter LocationFloorSchemaCreate was null or undefined when calling locationsFloorsPost.');
            }
            const localVarPath = `/locations/floors`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }

            // authentication SessionCookieHeader required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof LocationFloorSchemaCreate !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(LocationFloorSchemaCreate !== undefined ? LocationFloorSchemaCreate : {}) : (LocationFloorSchemaCreate || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Search for locations.
         * @param {string} external_id Filter by external ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationsGet(external_id: string, options: any = {}): RequestArgs {
            // verify required parameter 'external_id' is not null or undefined
            if (external_id === null || external_id === undefined) {
                throw new RequiredError('external_id','Required parameter external_id was null or undefined when calling locationsGet.');
            }
            const localVarPath = `/locations`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }

            // authentication SessionCookieHeader required

            if (external_id !== undefined) {
                localVarQueryParameter['external_id'] = external_id;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Search for locations. An empty array is returned if no locations are found.
         * @param {string} [title] Filter by title. Matches on whole words.
         * @param {string} [autocomplete] Autocomplete term. Matches on location name, per letter, from the start of the word.
         * @param {string} [users_fulltext_search] Filter the list of locations to those that include users matching a search term. This is useful when you have already searched for users and want to refine your search by location (like a faceted search). Like the fulltext_search parameter of /users/search, this matches on whole words.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {number} [limit] The numbers of items to return.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationsListGet(title?: string, autocomplete?: string, users_fulltext_search?: string, offset?: number, limit?: number, options: any = {}): RequestArgs {
            const localVarPath = `/locations/list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }

            // authentication SessionCookieHeader required

            if (title !== undefined) {
                localVarQueryParameter['title'] = title;
            }

            if (autocomplete !== undefined) {
                localVarQueryParameter['autocomplete'] = autocomplete;
            }

            if (users_fulltext_search !== undefined) {
                localVarQueryParameter['users_fulltext_search'] = users_fulltext_search;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove location information
         * @param {string} location_id The Invotra UUID of the location.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationsSitesLocationIdDelete(location_id: string, options: any = {}): RequestArgs {
            // verify required parameter 'location_id' is not null or undefined
            if (location_id === null || location_id === undefined) {
                throw new RequiredError('location_id','Required parameter location_id was null or undefined when calling locationsSitesLocationIdDelete.');
            }
            const localVarPath = `/locations/sites/{location_id}`
                .replace(`{${"location_id"}}`, encodeURIComponent(String(location_id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }

            // authentication SessionCookieHeader required


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get information about the location.
         * @param {string} location_id The Invotra UUID of the location.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationsSitesLocationIdGet(location_id: string, options: any = {}): RequestArgs {
            // verify required parameter 'location_id' is not null or undefined
            if (location_id === null || location_id === undefined) {
                throw new RequiredError('location_id','Required parameter location_id was null or undefined when calling locationsSitesLocationIdGet.');
            }
            const localVarPath = `/locations/sites/{location_id}`
                .replace(`{${"location_id"}}`, encodeURIComponent(String(location_id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }

            // authentication SessionCookieHeader required


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update location information.
         * @param {string} location_id The Invotra UUID of the location.
         * @param {LocationSiteSchemaUpdate} LocationSiteSchemaUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationsSitesLocationIdPut(location_id: string, LocationSiteSchemaUpdate: LocationSiteSchemaUpdate, options: any = {}): RequestArgs {
            // verify required parameter 'location_id' is not null or undefined
            if (location_id === null || location_id === undefined) {
                throw new RequiredError('location_id','Required parameter location_id was null or undefined when calling locationsSitesLocationIdPut.');
            }
            // verify required parameter 'LocationSiteSchemaUpdate' is not null or undefined
            if (LocationSiteSchemaUpdate === null || LocationSiteSchemaUpdate === undefined) {
                throw new RequiredError('LocationSiteSchemaUpdate','Required parameter LocationSiteSchemaUpdate was null or undefined when calling locationsSitesLocationIdPut.');
            }
            const localVarPath = `/locations/sites/{location_id}`
                .replace(`{${"location_id"}}`, encodeURIComponent(String(location_id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }

            // authentication SessionCookieHeader required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof LocationSiteSchemaUpdate !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(LocationSiteSchemaUpdate !== undefined ? LocationSiteSchemaUpdate : {}) : (LocationSiteSchemaUpdate || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Provision a new location.
         * @param {LocationSiteSchemaCreate} LocationSiteSchemaCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationsSitesPost(LocationSiteSchemaCreate: LocationSiteSchemaCreate, options: any = {}): RequestArgs {
            // verify required parameter 'LocationSiteSchemaCreate' is not null or undefined
            if (LocationSiteSchemaCreate === null || LocationSiteSchemaCreate === undefined) {
                throw new RequiredError('LocationSiteSchemaCreate','Required parameter LocationSiteSchemaCreate was null or undefined when calling locationsSitesPost.');
            }
            const localVarPath = `/locations/sites`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }

            // authentication SessionCookieHeader required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof LocationSiteSchemaCreate !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(LocationSiteSchemaCreate !== undefined ? LocationSiteSchemaCreate : {}) : (LocationSiteSchemaCreate || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove location information
         * @param {string} location_id The Invotra UUID of the location.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationsSpacesLocationIdDelete(location_id: string, options: any = {}): RequestArgs {
            // verify required parameter 'location_id' is not null or undefined
            if (location_id === null || location_id === undefined) {
                throw new RequiredError('location_id','Required parameter location_id was null or undefined when calling locationsSpacesLocationIdDelete.');
            }
            const localVarPath = `/locations/spaces/{location_id}`
                .replace(`{${"location_id"}}`, encodeURIComponent(String(location_id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }

            // authentication SessionCookieHeader required


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get information about the location.
         * @param {string} location_id The Invotra UUID of the location.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationsSpacesLocationIdGet(location_id: string, options: any = {}): RequestArgs {
            // verify required parameter 'location_id' is not null or undefined
            if (location_id === null || location_id === undefined) {
                throw new RequiredError('location_id','Required parameter location_id was null or undefined when calling locationsSpacesLocationIdGet.');
            }
            const localVarPath = `/locations/spaces/{location_id}`
                .replace(`{${"location_id"}}`, encodeURIComponent(String(location_id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }

            // authentication SessionCookieHeader required


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update location information.
         * @param {string} location_id The Invotra UUID of the location.
         * @param {LocationSpaceSchemaUpdate} LocationSpaceSchemaUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationsSpacesLocationIdPut(location_id: string, LocationSpaceSchemaUpdate: LocationSpaceSchemaUpdate, options: any = {}): RequestArgs {
            // verify required parameter 'location_id' is not null or undefined
            if (location_id === null || location_id === undefined) {
                throw new RequiredError('location_id','Required parameter location_id was null or undefined when calling locationsSpacesLocationIdPut.');
            }
            // verify required parameter 'LocationSpaceSchemaUpdate' is not null or undefined
            if (LocationSpaceSchemaUpdate === null || LocationSpaceSchemaUpdate === undefined) {
                throw new RequiredError('LocationSpaceSchemaUpdate','Required parameter LocationSpaceSchemaUpdate was null or undefined when calling locationsSpacesLocationIdPut.');
            }
            const localVarPath = `/locations/spaces/{location_id}`
                .replace(`{${"location_id"}}`, encodeURIComponent(String(location_id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }

            // authentication SessionCookieHeader required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof LocationSpaceSchemaUpdate !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(LocationSpaceSchemaUpdate !== undefined ? LocationSpaceSchemaUpdate : {}) : (LocationSpaceSchemaUpdate || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Provision a new location.
         * @param {LocationSpaceSchemaCreate} LocationSpaceSchemaCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationsSpacesPost(LocationSpaceSchemaCreate: LocationSpaceSchemaCreate, options: any = {}): RequestArgs {
            // verify required parameter 'LocationSpaceSchemaCreate' is not null or undefined
            if (LocationSpaceSchemaCreate === null || LocationSpaceSchemaCreate === undefined) {
                throw new RequiredError('LocationSpaceSchemaCreate','Required parameter LocationSpaceSchemaCreate was null or undefined when calling locationsSpacesPost.');
            }
            const localVarPath = `/locations/spaces`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }

            // authentication SessionCookieHeader required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof LocationSpaceSchemaCreate !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(LocationSpaceSchemaCreate !== undefined ? LocationSpaceSchemaCreate : {}) : (LocationSpaceSchemaCreate || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LocationsApi - functional programming interface
 * @export
 */
export const LocationsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Remove location information
         * @param {string} location_id The Invotra UUID of the location.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationsBuildingsLocationIdDelete(location_id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = LocationsApiAxiosParamCreator(configuration).locationsBuildingsLocationIdDelete(location_id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get information about the location.
         * @param {string} location_id The Invotra UUID of the location.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationsBuildingsLocationIdGet(location_id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<LocationBuildingSchema> {
            const localVarAxiosArgs = LocationsApiAxiosParamCreator(configuration).locationsBuildingsLocationIdGet(location_id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update location information.
         * @param {string} location_id The Invotra UUID of the location.
         * @param {LocationBuildingSchemaUpdate} LocationBuildingSchemaUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationsBuildingsLocationIdPut(location_id: string, LocationBuildingSchemaUpdate: LocationBuildingSchemaUpdate, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = LocationsApiAxiosParamCreator(configuration).locationsBuildingsLocationIdPut(location_id, LocationBuildingSchemaUpdate, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Provision a new location.
         * @param {LocationBuildingSchemaCreate} LocationBuildingSchemaCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationsBuildingsPost(LocationBuildingSchemaCreate: LocationBuildingSchemaCreate, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessfulPostResponseWithMessageSchema> {
            const localVarAxiosArgs = LocationsApiAxiosParamCreator(configuration).locationsBuildingsPost(LocationBuildingSchemaCreate, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Remove location information
         * @param {string} location_id The Invotra UUID of the location.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationsFloorsLocationIdDelete(location_id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = LocationsApiAxiosParamCreator(configuration).locationsFloorsLocationIdDelete(location_id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get information about the location.
         * @param {string} location_id The Invotra UUID of the location.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationsFloorsLocationIdGet(location_id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<LocationFloorSchema> {
            const localVarAxiosArgs = LocationsApiAxiosParamCreator(configuration).locationsFloorsLocationIdGet(location_id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update location information.
         * @param {string} location_id The Invotra UUID of the location.
         * @param {LocationFloorSchemaUpdate} LocationFloorSchemaUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationsFloorsLocationIdPut(location_id: string, LocationFloorSchemaUpdate: LocationFloorSchemaUpdate, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = LocationsApiAxiosParamCreator(configuration).locationsFloorsLocationIdPut(location_id, LocationFloorSchemaUpdate, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Provision a new location.
         * @param {LocationFloorSchemaCreate} LocationFloorSchemaCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationsFloorsPost(LocationFloorSchemaCreate: LocationFloorSchemaCreate, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessfulPostResponseWithMessageSchema> {
            const localVarAxiosArgs = LocationsApiAxiosParamCreator(configuration).locationsFloorsPost(LocationFloorSchemaCreate, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Search for locations.
         * @param {string} external_id Filter by external ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationsGet(external_id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<LocationUuidListItemSchema>> {
            const localVarAxiosArgs = LocationsApiAxiosParamCreator(configuration).locationsGet(external_id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Search for locations. An empty array is returned if no locations are found.
         * @param {string} [title] Filter by title. Matches on whole words.
         * @param {string} [autocomplete] Autocomplete term. Matches on location name, per letter, from the start of the word.
         * @param {string} [users_fulltext_search] Filter the list of locations to those that include users matching a search term. This is useful when you have already searched for users and want to refine your search by location (like a faceted search). Like the fulltext_search parameter of /users/search, this matches on whole words.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {number} [limit] The numbers of items to return.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationsListGet(title?: string, autocomplete?: string, users_fulltext_search?: string, offset?: number, limit?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20028> {
            const localVarAxiosArgs = LocationsApiAxiosParamCreator(configuration).locationsListGet(title, autocomplete, users_fulltext_search, offset, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Remove location information
         * @param {string} location_id The Invotra UUID of the location.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationsSitesLocationIdDelete(location_id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = LocationsApiAxiosParamCreator(configuration).locationsSitesLocationIdDelete(location_id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get information about the location.
         * @param {string} location_id The Invotra UUID of the location.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationsSitesLocationIdGet(location_id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<LocationSiteSchema> {
            const localVarAxiosArgs = LocationsApiAxiosParamCreator(configuration).locationsSitesLocationIdGet(location_id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update location information.
         * @param {string} location_id The Invotra UUID of the location.
         * @param {LocationSiteSchemaUpdate} LocationSiteSchemaUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationsSitesLocationIdPut(location_id: string, LocationSiteSchemaUpdate: LocationSiteSchemaUpdate, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = LocationsApiAxiosParamCreator(configuration).locationsSitesLocationIdPut(location_id, LocationSiteSchemaUpdate, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Provision a new location.
         * @param {LocationSiteSchemaCreate} LocationSiteSchemaCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationsSitesPost(LocationSiteSchemaCreate: LocationSiteSchemaCreate, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessfulPostResponseWithMessageSchema> {
            const localVarAxiosArgs = LocationsApiAxiosParamCreator(configuration).locationsSitesPost(LocationSiteSchemaCreate, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Remove location information
         * @param {string} location_id The Invotra UUID of the location.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationsSpacesLocationIdDelete(location_id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = LocationsApiAxiosParamCreator(configuration).locationsSpacesLocationIdDelete(location_id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get information about the location.
         * @param {string} location_id The Invotra UUID of the location.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationsSpacesLocationIdGet(location_id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<LocationSpaceSchema> {
            const localVarAxiosArgs = LocationsApiAxiosParamCreator(configuration).locationsSpacesLocationIdGet(location_id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update location information.
         * @param {string} location_id The Invotra UUID of the location.
         * @param {LocationSpaceSchemaUpdate} LocationSpaceSchemaUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationsSpacesLocationIdPut(location_id: string, LocationSpaceSchemaUpdate: LocationSpaceSchemaUpdate, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = LocationsApiAxiosParamCreator(configuration).locationsSpacesLocationIdPut(location_id, LocationSpaceSchemaUpdate, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Provision a new location.
         * @param {LocationSpaceSchemaCreate} LocationSpaceSchemaCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationsSpacesPost(LocationSpaceSchemaCreate: LocationSpaceSchemaCreate, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessfulPostResponseWithMessageSchema> {
            const localVarAxiosArgs = LocationsApiAxiosParamCreator(configuration).locationsSpacesPost(LocationSpaceSchemaCreate, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * LocationsApi - factory interface
 * @export
 */
export const LocationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Remove location information
         * @param {string} location_id The Invotra UUID of the location.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationsBuildingsLocationIdDelete(location_id: string, options?: any): AxiosPromise<void> {
            return LocationsApiFp(configuration).locationsBuildingsLocationIdDelete(location_id, options)(axios, basePath);
        },
        /**
         * Get information about the location.
         * @param {string} location_id The Invotra UUID of the location.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationsBuildingsLocationIdGet(location_id: string, options?: any): AxiosPromise<LocationBuildingSchema> {
            return LocationsApiFp(configuration).locationsBuildingsLocationIdGet(location_id, options)(axios, basePath);
        },
        /**
         * Update location information.
         * @param {string} location_id The Invotra UUID of the location.
         * @param {LocationBuildingSchemaUpdate} LocationBuildingSchemaUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationsBuildingsLocationIdPut(location_id: string, LocationBuildingSchemaUpdate: LocationBuildingSchemaUpdate, options?: any): AxiosPromise<void> {
            return LocationsApiFp(configuration).locationsBuildingsLocationIdPut(location_id, LocationBuildingSchemaUpdate, options)(axios, basePath);
        },
        /**
         * Provision a new location.
         * @param {LocationBuildingSchemaCreate} LocationBuildingSchemaCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationsBuildingsPost(LocationBuildingSchemaCreate: LocationBuildingSchemaCreate, options?: any): AxiosPromise<SuccessfulPostResponseWithMessageSchema> {
            return LocationsApiFp(configuration).locationsBuildingsPost(LocationBuildingSchemaCreate, options)(axios, basePath);
        },
        /**
         * Remove location information
         * @param {string} location_id The Invotra UUID of the location.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationsFloorsLocationIdDelete(location_id: string, options?: any): AxiosPromise<void> {
            return LocationsApiFp(configuration).locationsFloorsLocationIdDelete(location_id, options)(axios, basePath);
        },
        /**
         * Get information about the location.
         * @param {string} location_id The Invotra UUID of the location.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationsFloorsLocationIdGet(location_id: string, options?: any): AxiosPromise<LocationFloorSchema> {
            return LocationsApiFp(configuration).locationsFloorsLocationIdGet(location_id, options)(axios, basePath);
        },
        /**
         * Update location information.
         * @param {string} location_id The Invotra UUID of the location.
         * @param {LocationFloorSchemaUpdate} LocationFloorSchemaUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationsFloorsLocationIdPut(location_id: string, LocationFloorSchemaUpdate: LocationFloorSchemaUpdate, options?: any): AxiosPromise<void> {
            return LocationsApiFp(configuration).locationsFloorsLocationIdPut(location_id, LocationFloorSchemaUpdate, options)(axios, basePath);
        },
        /**
         * Provision a new location.
         * @param {LocationFloorSchemaCreate} LocationFloorSchemaCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationsFloorsPost(LocationFloorSchemaCreate: LocationFloorSchemaCreate, options?: any): AxiosPromise<SuccessfulPostResponseWithMessageSchema> {
            return LocationsApiFp(configuration).locationsFloorsPost(LocationFloorSchemaCreate, options)(axios, basePath);
        },
        /**
         * Search for locations.
         * @param {string} external_id Filter by external ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationsGet(external_id: string, options?: any): AxiosPromise<Array<LocationUuidListItemSchema>> {
            return LocationsApiFp(configuration).locationsGet(external_id, options)(axios, basePath);
        },
        /**
         * Search for locations. An empty array is returned if no locations are found.
         * @param {string} [title] Filter by title. Matches on whole words.
         * @param {string} [autocomplete] Autocomplete term. Matches on location name, per letter, from the start of the word.
         * @param {string} [users_fulltext_search] Filter the list of locations to those that include users matching a search term. This is useful when you have already searched for users and want to refine your search by location (like a faceted search). Like the fulltext_search parameter of /users/search, this matches on whole words.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {number} [limit] The numbers of items to return.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationsListGet(title?: string, autocomplete?: string, users_fulltext_search?: string, offset?: number, limit?: number, options?: any): AxiosPromise<InlineResponse20028> {
            return LocationsApiFp(configuration).locationsListGet(title, autocomplete, users_fulltext_search, offset, limit, options)(axios, basePath);
        },
        /**
         * Remove location information
         * @param {string} location_id The Invotra UUID of the location.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationsSitesLocationIdDelete(location_id: string, options?: any): AxiosPromise<void> {
            return LocationsApiFp(configuration).locationsSitesLocationIdDelete(location_id, options)(axios, basePath);
        },
        /**
         * Get information about the location.
         * @param {string} location_id The Invotra UUID of the location.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationsSitesLocationIdGet(location_id: string, options?: any): AxiosPromise<LocationSiteSchema> {
            return LocationsApiFp(configuration).locationsSitesLocationIdGet(location_id, options)(axios, basePath);
        },
        /**
         * Update location information.
         * @param {string} location_id The Invotra UUID of the location.
         * @param {LocationSiteSchemaUpdate} LocationSiteSchemaUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationsSitesLocationIdPut(location_id: string, LocationSiteSchemaUpdate: LocationSiteSchemaUpdate, options?: any): AxiosPromise<void> {
            return LocationsApiFp(configuration).locationsSitesLocationIdPut(location_id, LocationSiteSchemaUpdate, options)(axios, basePath);
        },
        /**
         * Provision a new location.
         * @param {LocationSiteSchemaCreate} LocationSiteSchemaCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationsSitesPost(LocationSiteSchemaCreate: LocationSiteSchemaCreate, options?: any): AxiosPromise<SuccessfulPostResponseWithMessageSchema> {
            return LocationsApiFp(configuration).locationsSitesPost(LocationSiteSchemaCreate, options)(axios, basePath);
        },
        /**
         * Remove location information
         * @param {string} location_id The Invotra UUID of the location.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationsSpacesLocationIdDelete(location_id: string, options?: any): AxiosPromise<void> {
            return LocationsApiFp(configuration).locationsSpacesLocationIdDelete(location_id, options)(axios, basePath);
        },
        /**
         * Get information about the location.
         * @param {string} location_id The Invotra UUID of the location.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationsSpacesLocationIdGet(location_id: string, options?: any): AxiosPromise<LocationSpaceSchema> {
            return LocationsApiFp(configuration).locationsSpacesLocationIdGet(location_id, options)(axios, basePath);
        },
        /**
         * Update location information.
         * @param {string} location_id The Invotra UUID of the location.
         * @param {LocationSpaceSchemaUpdate} LocationSpaceSchemaUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationsSpacesLocationIdPut(location_id: string, LocationSpaceSchemaUpdate: LocationSpaceSchemaUpdate, options?: any): AxiosPromise<void> {
            return LocationsApiFp(configuration).locationsSpacesLocationIdPut(location_id, LocationSpaceSchemaUpdate, options)(axios, basePath);
        },
        /**
         * Provision a new location.
         * @param {LocationSpaceSchemaCreate} LocationSpaceSchemaCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationsSpacesPost(LocationSpaceSchemaCreate: LocationSpaceSchemaCreate, options?: any): AxiosPromise<SuccessfulPostResponseWithMessageSchema> {
            return LocationsApiFp(configuration).locationsSpacesPost(LocationSpaceSchemaCreate, options)(axios, basePath);
        },
    };
};

/**
 * LocationsApi - interface
 * @export
 * @interface LocationsApi
 */
export interface LocationsApiInterface {
    /**
     * Remove location information
     * @param {string} location_id The Invotra UUID of the location.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationsApiInterface
     */
    locationsBuildingsLocationIdDelete(location_id: string, options?: any): AxiosPromise<void>;

    /**
     * Get information about the location.
     * @param {string} location_id The Invotra UUID of the location.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationsApiInterface
     */
    locationsBuildingsLocationIdGet(location_id: string, options?: any): AxiosPromise<LocationBuildingSchema>;

    /**
     * Update location information.
     * @param {string} location_id The Invotra UUID of the location.
     * @param {LocationBuildingSchemaUpdate} LocationBuildingSchemaUpdate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationsApiInterface
     */
    locationsBuildingsLocationIdPut(location_id: string, LocationBuildingSchemaUpdate: LocationBuildingSchemaUpdate, options?: any): AxiosPromise<void>;

    /**
     * Provision a new location.
     * @param {LocationBuildingSchemaCreate} LocationBuildingSchemaCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationsApiInterface
     */
    locationsBuildingsPost(LocationBuildingSchemaCreate: LocationBuildingSchemaCreate, options?: any): AxiosPromise<SuccessfulPostResponseWithMessageSchema>;

    /**
     * Remove location information
     * @param {string} location_id The Invotra UUID of the location.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationsApiInterface
     */
    locationsFloorsLocationIdDelete(location_id: string, options?: any): AxiosPromise<void>;

    /**
     * Get information about the location.
     * @param {string} location_id The Invotra UUID of the location.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationsApiInterface
     */
    locationsFloorsLocationIdGet(location_id: string, options?: any): AxiosPromise<LocationFloorSchema>;

    /**
     * Update location information.
     * @param {string} location_id The Invotra UUID of the location.
     * @param {LocationFloorSchemaUpdate} LocationFloorSchemaUpdate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationsApiInterface
     */
    locationsFloorsLocationIdPut(location_id: string, LocationFloorSchemaUpdate: LocationFloorSchemaUpdate, options?: any): AxiosPromise<void>;

    /**
     * Provision a new location.
     * @param {LocationFloorSchemaCreate} LocationFloorSchemaCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationsApiInterface
     */
    locationsFloorsPost(LocationFloorSchemaCreate: LocationFloorSchemaCreate, options?: any): AxiosPromise<SuccessfulPostResponseWithMessageSchema>;

    /**
     * Search for locations.
     * @param {string} external_id Filter by external ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationsApiInterface
     */
    locationsGet(external_id: string, options?: any): AxiosPromise<Array<LocationUuidListItemSchema>>;

    /**
     * Search for locations. An empty array is returned if no locations are found.
     * @param {string} [title] Filter by title. Matches on whole words.
     * @param {string} [autocomplete] Autocomplete term. Matches on location name, per letter, from the start of the word.
     * @param {string} [users_fulltext_search] Filter the list of locations to those that include users matching a search term. This is useful when you have already searched for users and want to refine your search by location (like a faceted search). Like the fulltext_search parameter of /users/search, this matches on whole words.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {number} [limit] The numbers of items to return.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationsApiInterface
     */
    locationsListGet(title?: string, autocomplete?: string, users_fulltext_search?: string, offset?: number, limit?: number, options?: any): AxiosPromise<InlineResponse20028>;

    /**
     * Remove location information
     * @param {string} location_id The Invotra UUID of the location.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationsApiInterface
     */
    locationsSitesLocationIdDelete(location_id: string, options?: any): AxiosPromise<void>;

    /**
     * Get information about the location.
     * @param {string} location_id The Invotra UUID of the location.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationsApiInterface
     */
    locationsSitesLocationIdGet(location_id: string, options?: any): AxiosPromise<LocationSiteSchema>;

    /**
     * Update location information.
     * @param {string} location_id The Invotra UUID of the location.
     * @param {LocationSiteSchemaUpdate} LocationSiteSchemaUpdate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationsApiInterface
     */
    locationsSitesLocationIdPut(location_id: string, LocationSiteSchemaUpdate: LocationSiteSchemaUpdate, options?: any): AxiosPromise<void>;

    /**
     * Provision a new location.
     * @param {LocationSiteSchemaCreate} LocationSiteSchemaCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationsApiInterface
     */
    locationsSitesPost(LocationSiteSchemaCreate: LocationSiteSchemaCreate, options?: any): AxiosPromise<SuccessfulPostResponseWithMessageSchema>;

    /**
     * Remove location information
     * @param {string} location_id The Invotra UUID of the location.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationsApiInterface
     */
    locationsSpacesLocationIdDelete(location_id: string, options?: any): AxiosPromise<void>;

    /**
     * Get information about the location.
     * @param {string} location_id The Invotra UUID of the location.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationsApiInterface
     */
    locationsSpacesLocationIdGet(location_id: string, options?: any): AxiosPromise<LocationSpaceSchema>;

    /**
     * Update location information.
     * @param {string} location_id The Invotra UUID of the location.
     * @param {LocationSpaceSchemaUpdate} LocationSpaceSchemaUpdate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationsApiInterface
     */
    locationsSpacesLocationIdPut(location_id: string, LocationSpaceSchemaUpdate: LocationSpaceSchemaUpdate, options?: any): AxiosPromise<void>;

    /**
     * Provision a new location.
     * @param {LocationSpaceSchemaCreate} LocationSpaceSchemaCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationsApiInterface
     */
    locationsSpacesPost(LocationSpaceSchemaCreate: LocationSpaceSchemaCreate, options?: any): AxiosPromise<SuccessfulPostResponseWithMessageSchema>;

}

/**
 * LocationsApi - object-oriented interface
 * @export
 * @class LocationsApi
 * @extends {BaseAPI}
 */
export class LocationsApi extends BaseAPI implements LocationsApiInterface {
    /**
     * Remove location information
     * @param {string} location_id The Invotra UUID of the location.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationsApi
     */
    public locationsBuildingsLocationIdDelete(location_id: string, options?: any) {
        return LocationsApiFp(this.configuration).locationsBuildingsLocationIdDelete(location_id, options)(this.axios, this.basePath);
    }

    /**
     * Get information about the location.
     * @param {string} location_id The Invotra UUID of the location.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationsApi
     */
    public locationsBuildingsLocationIdGet(location_id: string, options?: any) {
        return LocationsApiFp(this.configuration).locationsBuildingsLocationIdGet(location_id, options)(this.axios, this.basePath);
    }

    /**
     * Update location information.
     * @param {string} location_id The Invotra UUID of the location.
     * @param {LocationBuildingSchemaUpdate} LocationBuildingSchemaUpdate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationsApi
     */
    public locationsBuildingsLocationIdPut(location_id: string, LocationBuildingSchemaUpdate: LocationBuildingSchemaUpdate, options?: any) {
        return LocationsApiFp(this.configuration).locationsBuildingsLocationIdPut(location_id, LocationBuildingSchemaUpdate, options)(this.axios, this.basePath);
    }

    /**
     * Provision a new location.
     * @param {LocationBuildingSchemaCreate} LocationBuildingSchemaCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationsApi
     */
    public locationsBuildingsPost(LocationBuildingSchemaCreate: LocationBuildingSchemaCreate, options?: any) {
        return LocationsApiFp(this.configuration).locationsBuildingsPost(LocationBuildingSchemaCreate, options)(this.axios, this.basePath);
    }

    /**
     * Remove location information
     * @param {string} location_id The Invotra UUID of the location.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationsApi
     */
    public locationsFloorsLocationIdDelete(location_id: string, options?: any) {
        return LocationsApiFp(this.configuration).locationsFloorsLocationIdDelete(location_id, options)(this.axios, this.basePath);
    }

    /**
     * Get information about the location.
     * @param {string} location_id The Invotra UUID of the location.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationsApi
     */
    public locationsFloorsLocationIdGet(location_id: string, options?: any) {
        return LocationsApiFp(this.configuration).locationsFloorsLocationIdGet(location_id, options)(this.axios, this.basePath);
    }

    /**
     * Update location information.
     * @param {string} location_id The Invotra UUID of the location.
     * @param {LocationFloorSchemaUpdate} LocationFloorSchemaUpdate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationsApi
     */
    public locationsFloorsLocationIdPut(location_id: string, LocationFloorSchemaUpdate: LocationFloorSchemaUpdate, options?: any) {
        return LocationsApiFp(this.configuration).locationsFloorsLocationIdPut(location_id, LocationFloorSchemaUpdate, options)(this.axios, this.basePath);
    }

    /**
     * Provision a new location.
     * @param {LocationFloorSchemaCreate} LocationFloorSchemaCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationsApi
     */
    public locationsFloorsPost(LocationFloorSchemaCreate: LocationFloorSchemaCreate, options?: any) {
        return LocationsApiFp(this.configuration).locationsFloorsPost(LocationFloorSchemaCreate, options)(this.axios, this.basePath);
    }

    /**
     * Search for locations.
     * @param {string} external_id Filter by external ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationsApi
     */
    public locationsGet(external_id: string, options?: any) {
        return LocationsApiFp(this.configuration).locationsGet(external_id, options)(this.axios, this.basePath);
    }

    /**
     * Search for locations. An empty array is returned if no locations are found.
     * @param {string} [title] Filter by title. Matches on whole words.
     * @param {string} [autocomplete] Autocomplete term. Matches on location name, per letter, from the start of the word.
     * @param {string} [users_fulltext_search] Filter the list of locations to those that include users matching a search term. This is useful when you have already searched for users and want to refine your search by location (like a faceted search). Like the fulltext_search parameter of /users/search, this matches on whole words.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {number} [limit] The numbers of items to return.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationsApi
     */
    public locationsListGet(title?: string, autocomplete?: string, users_fulltext_search?: string, offset?: number, limit?: number, options?: any) {
        return LocationsApiFp(this.configuration).locationsListGet(title, autocomplete, users_fulltext_search, offset, limit, options)(this.axios, this.basePath);
    }

    /**
     * Remove location information
     * @param {string} location_id The Invotra UUID of the location.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationsApi
     */
    public locationsSitesLocationIdDelete(location_id: string, options?: any) {
        return LocationsApiFp(this.configuration).locationsSitesLocationIdDelete(location_id, options)(this.axios, this.basePath);
    }

    /**
     * Get information about the location.
     * @param {string} location_id The Invotra UUID of the location.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationsApi
     */
    public locationsSitesLocationIdGet(location_id: string, options?: any) {
        return LocationsApiFp(this.configuration).locationsSitesLocationIdGet(location_id, options)(this.axios, this.basePath);
    }

    /**
     * Update location information.
     * @param {string} location_id The Invotra UUID of the location.
     * @param {LocationSiteSchemaUpdate} LocationSiteSchemaUpdate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationsApi
     */
    public locationsSitesLocationIdPut(location_id: string, LocationSiteSchemaUpdate: LocationSiteSchemaUpdate, options?: any) {
        return LocationsApiFp(this.configuration).locationsSitesLocationIdPut(location_id, LocationSiteSchemaUpdate, options)(this.axios, this.basePath);
    }

    /**
     * Provision a new location.
     * @param {LocationSiteSchemaCreate} LocationSiteSchemaCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationsApi
     */
    public locationsSitesPost(LocationSiteSchemaCreate: LocationSiteSchemaCreate, options?: any) {
        return LocationsApiFp(this.configuration).locationsSitesPost(LocationSiteSchemaCreate, options)(this.axios, this.basePath);
    }

    /**
     * Remove location information
     * @param {string} location_id The Invotra UUID of the location.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationsApi
     */
    public locationsSpacesLocationIdDelete(location_id: string, options?: any) {
        return LocationsApiFp(this.configuration).locationsSpacesLocationIdDelete(location_id, options)(this.axios, this.basePath);
    }

    /**
     * Get information about the location.
     * @param {string} location_id The Invotra UUID of the location.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationsApi
     */
    public locationsSpacesLocationIdGet(location_id: string, options?: any) {
        return LocationsApiFp(this.configuration).locationsSpacesLocationIdGet(location_id, options)(this.axios, this.basePath);
    }

    /**
     * Update location information.
     * @param {string} location_id The Invotra UUID of the location.
     * @param {LocationSpaceSchemaUpdate} LocationSpaceSchemaUpdate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationsApi
     */
    public locationsSpacesLocationIdPut(location_id: string, LocationSpaceSchemaUpdate: LocationSpaceSchemaUpdate, options?: any) {
        return LocationsApiFp(this.configuration).locationsSpacesLocationIdPut(location_id, LocationSpaceSchemaUpdate, options)(this.axios, this.basePath);
    }

    /**
     * Provision a new location.
     * @param {LocationSpaceSchemaCreate} LocationSpaceSchemaCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationsApi
     */
    public locationsSpacesPost(LocationSpaceSchemaCreate: LocationSpaceSchemaCreate, options?: any) {
        return LocationsApiFp(this.configuration).locationsSpacesPost(LocationSpaceSchemaCreate, options)(this.axios, this.basePath);
    }

}
