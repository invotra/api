// tslint:disable
/**
 * Invotra API
 * In general most fields are optional for update (PUT) requests; you can leave them blank (pass an empty string / array / whatever as appropriate) to clear them, or omit the key to leave them unchanged.
 *
 * The version of the OpenAPI document: 0.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';

import { AuthTokenSchema } from '../model';
import { CsrfTokenSchema } from '../model';
import { SessionSchema } from '../model';
/**
 * SessionsApi - axios parameter creator
 * @export
 */
export const SessionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Login a user. Use this endpoint if you are authenticating with an individual user rather than an API Key. The session cookie returned in the header should be used for subsequent requests.
         * @param {SessionSchema} SessionSchema 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sessionsLoginPost(SessionSchema: SessionSchema, options: any = {}): RequestArgs {
            // verify required parameter 'SessionSchema' is not null or undefined
            if (SessionSchema === null || SessionSchema === undefined) {
                throw new RequiredError('SessionSchema','Required parameter SessionSchema was null or undefined when calling sessionsLoginPost.');
            }
            const localVarPath = `/sessions/login`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof SessionSchema !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(SessionSchema !== undefined ? SessionSchema : {}) : (SessionSchema || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Logout the user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sessionsLogoutPost(options: any = {}): RequestArgs {
            const localVarPath = `/sessions/logout`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication SessionCookieHeader required


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a CSRF token.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sessionsTokenGet(options: any = {}): RequestArgs {
            const localVarPath = `/sessions/token`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication SessionCookieHeader required


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Exchange a temporary single-use token for a valid user session and CSRF token. This is intended for use by mobile apps.
         * @param {AuthTokenSchema} AuthTokenSchema 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sessionsTokenPost(AuthTokenSchema: AuthTokenSchema, options: any = {}): RequestArgs {
            // verify required parameter 'AuthTokenSchema' is not null or undefined
            if (AuthTokenSchema === null || AuthTokenSchema === undefined) {
                throw new RequiredError('AuthTokenSchema','Required parameter AuthTokenSchema was null or undefined when calling sessionsTokenPost.');
            }
            const localVarPath = `/sessions/token`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof AuthTokenSchema !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(AuthTokenSchema !== undefined ? AuthTokenSchema : {}) : (AuthTokenSchema || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SessionsApi - functional programming interface
 * @export
 */
export const SessionsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Login a user. Use this endpoint if you are authenticating with an individual user rather than an API Key. The session cookie returned in the header should be used for subsequent requests.
         * @param {SessionSchema} SessionSchema 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sessionsLoginPost(SessionSchema: SessionSchema, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = SessionsApiAxiosParamCreator(configuration).sessionsLoginPost(SessionSchema, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Logout the user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sessionsLogoutPost(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = SessionsApiAxiosParamCreator(configuration).sessionsLogoutPost(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns a CSRF token.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sessionsTokenGet(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<CsrfTokenSchema> {
            const localVarAxiosArgs = SessionsApiAxiosParamCreator(configuration).sessionsTokenGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Exchange a temporary single-use token for a valid user session and CSRF token. This is intended for use by mobile apps.
         * @param {AuthTokenSchema} AuthTokenSchema 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sessionsTokenPost(AuthTokenSchema: AuthTokenSchema, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<CsrfTokenSchema> {
            const localVarAxiosArgs = SessionsApiAxiosParamCreator(configuration).sessionsTokenPost(AuthTokenSchema, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * SessionsApi - factory interface
 * @export
 */
export const SessionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Login a user. Use this endpoint if you are authenticating with an individual user rather than an API Key. The session cookie returned in the header should be used for subsequent requests.
         * @param {SessionSchema} SessionSchema 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sessionsLoginPost(SessionSchema: SessionSchema, options?: any): AxiosPromise<void> {
            return SessionsApiFp(configuration).sessionsLoginPost(SessionSchema, options)(axios, basePath);
        },
        /**
         * Logout the user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sessionsLogoutPost(options?: any): AxiosPromise<void> {
            return SessionsApiFp(configuration).sessionsLogoutPost(options)(axios, basePath);
        },
        /**
         * Returns a CSRF token.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sessionsTokenGet(options?: any): AxiosPromise<CsrfTokenSchema> {
            return SessionsApiFp(configuration).sessionsTokenGet(options)(axios, basePath);
        },
        /**
         * Exchange a temporary single-use token for a valid user session and CSRF token. This is intended for use by mobile apps.
         * @param {AuthTokenSchema} AuthTokenSchema 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sessionsTokenPost(AuthTokenSchema: AuthTokenSchema, options?: any): AxiosPromise<CsrfTokenSchema> {
            return SessionsApiFp(configuration).sessionsTokenPost(AuthTokenSchema, options)(axios, basePath);
        },
    };
};

/**
 * SessionsApi - interface
 * @export
 * @interface SessionsApi
 */
export interface SessionsApiInterface {
    /**
     * Login a user. Use this endpoint if you are authenticating with an individual user rather than an API Key. The session cookie returned in the header should be used for subsequent requests.
     * @param {SessionSchema} SessionSchema 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionsApiInterface
     */
    sessionsLoginPost(SessionSchema: SessionSchema, options?: any): AxiosPromise<void>;

    /**
     * Logout the user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionsApiInterface
     */
    sessionsLogoutPost(options?: any): AxiosPromise<void>;

    /**
     * Returns a CSRF token.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionsApiInterface
     */
    sessionsTokenGet(options?: any): AxiosPromise<CsrfTokenSchema>;

    /**
     * Exchange a temporary single-use token for a valid user session and CSRF token. This is intended for use by mobile apps.
     * @param {AuthTokenSchema} AuthTokenSchema 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionsApiInterface
     */
    sessionsTokenPost(AuthTokenSchema: AuthTokenSchema, options?: any): AxiosPromise<CsrfTokenSchema>;

}

/**
 * SessionsApi - object-oriented interface
 * @export
 * @class SessionsApi
 * @extends {BaseAPI}
 */
export class SessionsApi extends BaseAPI implements SessionsApiInterface {
    /**
     * Login a user. Use this endpoint if you are authenticating with an individual user rather than an API Key. The session cookie returned in the header should be used for subsequent requests.
     * @param {SessionSchema} SessionSchema 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionsApi
     */
    public sessionsLoginPost(SessionSchema: SessionSchema, options?: any) {
        return SessionsApiFp(this.configuration).sessionsLoginPost(SessionSchema, options)(this.axios, this.basePath);
    }

    /**
     * Logout the user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionsApi
     */
    public sessionsLogoutPost(options?: any) {
        return SessionsApiFp(this.configuration).sessionsLogoutPost(options)(this.axios, this.basePath);
    }

    /**
     * Returns a CSRF token.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionsApi
     */
    public sessionsTokenGet(options?: any) {
        return SessionsApiFp(this.configuration).sessionsTokenGet(options)(this.axios, this.basePath);
    }

    /**
     * Exchange a temporary single-use token for a valid user session and CSRF token. This is intended for use by mobile apps.
     * @param {AuthTokenSchema} AuthTokenSchema 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionsApi
     */
    public sessionsTokenPost(AuthTokenSchema: AuthTokenSchema, options?: any) {
        return SessionsApiFp(this.configuration).sessionsTokenPost(AuthTokenSchema, options)(this.axios, this.basePath);
    }

}
