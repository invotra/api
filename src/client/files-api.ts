// tslint:disable
/**
 * InvotraAPI
 * In general most fields are optional for update (PUT) requests; you can leave them blank (pass an empty string / array / whatever as appropriate) to clear them, or omit the key to leave them unchanged.
 *
 * The version of the OpenAPI document: 0.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';

import { FileSchema } from '../model';
import { FileSchemaCreate } from '../model';
import { FileSchemaUpdate } from '../model';
import { SuccessfulPostResponseWithMessageSchema } from '../model';
/**
 * FilesApi - axios parameter creator
 * @export
 */
export const FilesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get information about the file.
         * @param {string} file_id The Invotra UUID of the file.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesFileIdGet(file_id: string, options: any = {}): RequestArgs {
            // verify required parameter 'file_id' is not null or undefined
            if (file_id === null || file_id === undefined) {
                throw new RequiredError('file_id','Required parameter file_id was null or undefined when calling filesFileIdGet.');
            }
            const localVarPath = `/files/{file_id}`
                .replace(`{${"file_id"}}`, encodeURIComponent(String(file_id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }

            // authentication CognitoJwt required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("CognitoJwt", ["invotra/files:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            // authentication SessionCookieHeader required


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} file_id The Invotra UUID of the file.
         * @param {FileSchemaUpdate} FileSchemaUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesFileIdPut(file_id: string, FileSchemaUpdate: FileSchemaUpdate, options: any = {}): RequestArgs {
            // verify required parameter 'file_id' is not null or undefined
            if (file_id === null || file_id === undefined) {
                throw new RequiredError('file_id','Required parameter file_id was null or undefined when calling filesFileIdPut.');
            }
            // verify required parameter 'FileSchemaUpdate' is not null or undefined
            if (FileSchemaUpdate === null || FileSchemaUpdate === undefined) {
                throw new RequiredError('FileSchemaUpdate','Required parameter FileSchemaUpdate was null or undefined when calling filesFileIdPut.');
            }
            const localVarPath = `/files/{file_id}`
                .replace(`{${"file_id"}}`, encodeURIComponent(String(file_id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }

            // authentication CognitoJwt required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("CognitoJwt", ["invotra/files:write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            // authentication SessionCookieHeader required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof FileSchemaUpdate !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(FileSchemaUpdate !== undefined ? FileSchemaUpdate : {}) : (FileSchemaUpdate || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Provision a new file.
         * @param {FileSchemaCreate} FileSchemaCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesPost(FileSchemaCreate: FileSchemaCreate, options: any = {}): RequestArgs {
            // verify required parameter 'FileSchemaCreate' is not null or undefined
            if (FileSchemaCreate === null || FileSchemaCreate === undefined) {
                throw new RequiredError('FileSchemaCreate','Required parameter FileSchemaCreate was null or undefined when calling filesPost.');
            }
            const localVarPath = `/files`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }

            // authentication CognitoJwt required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("CognitoJwt", ["invotra/files:write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            // authentication SessionCookieHeader required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof FileSchemaCreate !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(FileSchemaCreate !== undefined ? FileSchemaCreate : {}) : (FileSchemaCreate || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FilesApi - functional programming interface
 * @export
 */
export const FilesApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Get information about the file.
         * @param {string} file_id The Invotra UUID of the file.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesFileIdGet(file_id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<FileSchema> {
            const localVarAxiosArgs = FilesApiAxiosParamCreator(configuration).filesFileIdGet(file_id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} file_id The Invotra UUID of the file.
         * @param {FileSchemaUpdate} FileSchemaUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesFileIdPut(file_id: string, FileSchemaUpdate: FileSchemaUpdate, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = FilesApiAxiosParamCreator(configuration).filesFileIdPut(file_id, FileSchemaUpdate, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Provision a new file.
         * @param {FileSchemaCreate} FileSchemaCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesPost(FileSchemaCreate: FileSchemaCreate, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessfulPostResponseWithMessageSchema> {
            const localVarAxiosArgs = FilesApiAxiosParamCreator(configuration).filesPost(FileSchemaCreate, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * FilesApi - factory interface
 * @export
 */
export const FilesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Get information about the file.
         * @param {string} file_id The Invotra UUID of the file.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesFileIdGet(file_id: string, options?: any): AxiosPromise<FileSchema> {
            return FilesApiFp(configuration).filesFileIdGet(file_id, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} file_id The Invotra UUID of the file.
         * @param {FileSchemaUpdate} FileSchemaUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesFileIdPut(file_id: string, FileSchemaUpdate: FileSchemaUpdate, options?: any): AxiosPromise<void> {
            return FilesApiFp(configuration).filesFileIdPut(file_id, FileSchemaUpdate, options)(axios, basePath);
        },
        /**
         * Provision a new file.
         * @param {FileSchemaCreate} FileSchemaCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesPost(FileSchemaCreate: FileSchemaCreate, options?: any): AxiosPromise<SuccessfulPostResponseWithMessageSchema> {
            return FilesApiFp(configuration).filesPost(FileSchemaCreate, options)(axios, basePath);
        },
    };
};

/**
 * FilesApi - interface
 * @export
 * @interface FilesApi
 */
export interface FilesApiInterface {
    /**
     * Get information about the file.
     * @param {string} file_id The Invotra UUID of the file.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesApiInterface
     */
    filesFileIdGet(file_id: string, options?: any): AxiosPromise<FileSchema>;

    /**
     * 
     * @param {string} file_id The Invotra UUID of the file.
     * @param {FileSchemaUpdate} FileSchemaUpdate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesApiInterface
     */
    filesFileIdPut(file_id: string, FileSchemaUpdate: FileSchemaUpdate, options?: any): AxiosPromise<void>;

    /**
     * Provision a new file.
     * @param {FileSchemaCreate} FileSchemaCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesApiInterface
     */
    filesPost(FileSchemaCreate: FileSchemaCreate, options?: any): AxiosPromise<SuccessfulPostResponseWithMessageSchema>;

}

/**
 * FilesApi - object-oriented interface
 * @export
 * @class FilesApi
 * @extends {BaseAPI}
 */
export class FilesApi extends BaseAPI implements FilesApiInterface {
    /**
     * Get information about the file.
     * @param {string} file_id The Invotra UUID of the file.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesApi
     */
    public filesFileIdGet(file_id: string, options?: any) {
        return FilesApiFp(this.configuration).filesFileIdGet(file_id, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} file_id The Invotra UUID of the file.
     * @param {FileSchemaUpdate} FileSchemaUpdate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesApi
     */
    public filesFileIdPut(file_id: string, FileSchemaUpdate: FileSchemaUpdate, options?: any) {
        return FilesApiFp(this.configuration).filesFileIdPut(file_id, FileSchemaUpdate, options)(this.axios, this.basePath);
    }

    /**
     * Provision a new file.
     * @param {FileSchemaCreate} FileSchemaCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesApi
     */
    public filesPost(FileSchemaCreate: FileSchemaCreate, options?: any) {
        return FilesApiFp(this.configuration).filesPost(FileSchemaCreate, options)(this.axios, this.basePath);
    }

}
