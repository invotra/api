// tslint:disable
/**
 * InvotraAPI
 * In general most fields are optional for update (PUT) requests; you can leave them blank (pass an empty string / array / whatever as appropriate) to clear them, or omit the key to leave them unchanged.
 *
 * The version of the OpenAPI document: 0.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';

import { InlineResponse20019 } from '../model';
import { MessageSchema } from '../model';
import { MessageSchemaCreate } from '../model';
import { MessageSchemaUpdate } from '../model';
import { SuccessfulPostResponseSchema } from '../model';
/**
 * MessagesApi - axios parameter creator
 * @export
 */
export const MessagesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Search for messages. An empty array is returned if no messages where found.
         * @param {string} [author_uuid] Filter on Invotra UUID of the author.
         * @param {string} [created_date] Filter on date created. Format: YYYY-MM-DD.
         * @param {string} [updated_date] Filter on date updated. Format: YYYY-MM-DD.
         * @param {'timestamp_created' | 'timestamp_updated'} [sort] Field to sort by.
         * @param {'asc' | 'desc'} [order] Sort order.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {number} [limit] The numbers of items to return.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        messagesListGet(author_uuid?: string, created_date?: string, updated_date?: string, sort?: 'timestamp_created' | 'timestamp_updated', order?: 'asc' | 'desc', offset?: number, limit?: number, options: any = {}): RequestArgs {
            const localVarPath = `/messages/list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }

            // authentication SessionCookieHeader required

            if (author_uuid !== undefined) {
                localVarQueryParameter['author_uuid'] = author_uuid;
            }

            if (created_date !== undefined) {
                localVarQueryParameter['created_date'] = created_date;
            }

            if (updated_date !== undefined) {
                localVarQueryParameter['updated_date'] = updated_date;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a message.
         * @param {string} message_id The Invotra UUID of the message.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        messagesMessageIdDelete(message_id: string, options: any = {}): RequestArgs {
            // verify required parameter 'message_id' is not null or undefined
            if (message_id === null || message_id === undefined) {
                throw new RequiredError('message_id','Required parameter message_id was null or undefined when calling messagesMessageIdDelete.');
            }
            const localVarPath = `/messages/{message_id}`
                .replace(`{${"message_id"}}`, encodeURIComponent(String(message_id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }

            // authentication SessionCookieHeader required


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get information about the message.
         * @param {string} message_id The Invotra UUID of the message.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        messagesMessageIdGet(message_id: string, options: any = {}): RequestArgs {
            // verify required parameter 'message_id' is not null or undefined
            if (message_id === null || message_id === undefined) {
                throw new RequiredError('message_id','Required parameter message_id was null or undefined when calling messagesMessageIdGet.');
            }
            const localVarPath = `/messages/{message_id}`
                .replace(`{${"message_id"}}`, encodeURIComponent(String(message_id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }

            // authentication SessionCookieHeader required


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update message information.
         * @param {string} message_id The Invotra UUID of the message.
         * @param {MessageSchemaUpdate} MessageSchemaUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        messagesMessageIdPut(message_id: string, MessageSchemaUpdate: MessageSchemaUpdate, options: any = {}): RequestArgs {
            // verify required parameter 'message_id' is not null or undefined
            if (message_id === null || message_id === undefined) {
                throw new RequiredError('message_id','Required parameter message_id was null or undefined when calling messagesMessageIdPut.');
            }
            // verify required parameter 'MessageSchemaUpdate' is not null or undefined
            if (MessageSchemaUpdate === null || MessageSchemaUpdate === undefined) {
                throw new RequiredError('MessageSchemaUpdate','Required parameter MessageSchemaUpdate was null or undefined when calling messagesMessageIdPut.');
            }
            const localVarPath = `/messages/{message_id}`
                .replace(`{${"message_id"}}`, encodeURIComponent(String(message_id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }

            // authentication SessionCookieHeader required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof MessageSchemaUpdate !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(MessageSchemaUpdate !== undefined ? MessageSchemaUpdate : {}) : (MessageSchemaUpdate || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Provision a new message.
         * @param {MessageSchemaCreate} MessageSchemaCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        messagesPost(MessageSchemaCreate: MessageSchemaCreate, options: any = {}): RequestArgs {
            // verify required parameter 'MessageSchemaCreate' is not null or undefined
            if (MessageSchemaCreate === null || MessageSchemaCreate === undefined) {
                throw new RequiredError('MessageSchemaCreate','Required parameter MessageSchemaCreate was null or undefined when calling messagesPost.');
            }
            const localVarPath = `/messages`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }

            // authentication SessionCookieHeader required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof MessageSchemaCreate !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(MessageSchemaCreate !== undefined ? MessageSchemaCreate : {}) : (MessageSchemaCreate || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MessagesApi - functional programming interface
 * @export
 */
export const MessagesApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Search for messages. An empty array is returned if no messages where found.
         * @param {string} [author_uuid] Filter on Invotra UUID of the author.
         * @param {string} [created_date] Filter on date created. Format: YYYY-MM-DD.
         * @param {string} [updated_date] Filter on date updated. Format: YYYY-MM-DD.
         * @param {'timestamp_created' | 'timestamp_updated'} [sort] Field to sort by.
         * @param {'asc' | 'desc'} [order] Sort order.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {number} [limit] The numbers of items to return.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        messagesListGet(author_uuid?: string, created_date?: string, updated_date?: string, sort?: 'timestamp_created' | 'timestamp_updated', order?: 'asc' | 'desc', offset?: number, limit?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20019> {
            const localVarAxiosArgs = MessagesApiAxiosParamCreator(configuration).messagesListGet(author_uuid, created_date, updated_date, sort, order, offset, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete a message.
         * @param {string} message_id The Invotra UUID of the message.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        messagesMessageIdDelete(message_id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = MessagesApiAxiosParamCreator(configuration).messagesMessageIdDelete(message_id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get information about the message.
         * @param {string} message_id The Invotra UUID of the message.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        messagesMessageIdGet(message_id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageSchema> {
            const localVarAxiosArgs = MessagesApiAxiosParamCreator(configuration).messagesMessageIdGet(message_id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update message information.
         * @param {string} message_id The Invotra UUID of the message.
         * @param {MessageSchemaUpdate} MessageSchemaUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        messagesMessageIdPut(message_id: string, MessageSchemaUpdate: MessageSchemaUpdate, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = MessagesApiAxiosParamCreator(configuration).messagesMessageIdPut(message_id, MessageSchemaUpdate, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Provision a new message.
         * @param {MessageSchemaCreate} MessageSchemaCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        messagesPost(MessageSchemaCreate: MessageSchemaCreate, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessfulPostResponseSchema> {
            const localVarAxiosArgs = MessagesApiAxiosParamCreator(configuration).messagesPost(MessageSchemaCreate, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * MessagesApi - factory interface
 * @export
 */
export const MessagesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Search for messages. An empty array is returned if no messages where found.
         * @param {string} [author_uuid] Filter on Invotra UUID of the author.
         * @param {string} [created_date] Filter on date created. Format: YYYY-MM-DD.
         * @param {string} [updated_date] Filter on date updated. Format: YYYY-MM-DD.
         * @param {'timestamp_created' | 'timestamp_updated'} [sort] Field to sort by.
         * @param {'asc' | 'desc'} [order] Sort order.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {number} [limit] The numbers of items to return.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        messagesListGet(author_uuid?: string, created_date?: string, updated_date?: string, sort?: 'timestamp_created' | 'timestamp_updated', order?: 'asc' | 'desc', offset?: number, limit?: number, options?: any): AxiosPromise<InlineResponse20019> {
            return MessagesApiFp(configuration).messagesListGet(author_uuid, created_date, updated_date, sort, order, offset, limit, options)(axios, basePath);
        },
        /**
         * Delete a message.
         * @param {string} message_id The Invotra UUID of the message.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        messagesMessageIdDelete(message_id: string, options?: any): AxiosPromise<void> {
            return MessagesApiFp(configuration).messagesMessageIdDelete(message_id, options)(axios, basePath);
        },
        /**
         * Get information about the message.
         * @param {string} message_id The Invotra UUID of the message.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        messagesMessageIdGet(message_id: string, options?: any): AxiosPromise<MessageSchema> {
            return MessagesApiFp(configuration).messagesMessageIdGet(message_id, options)(axios, basePath);
        },
        /**
         * Update message information.
         * @param {string} message_id The Invotra UUID of the message.
         * @param {MessageSchemaUpdate} MessageSchemaUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        messagesMessageIdPut(message_id: string, MessageSchemaUpdate: MessageSchemaUpdate, options?: any): AxiosPromise<void> {
            return MessagesApiFp(configuration).messagesMessageIdPut(message_id, MessageSchemaUpdate, options)(axios, basePath);
        },
        /**
         * Provision a new message.
         * @param {MessageSchemaCreate} MessageSchemaCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        messagesPost(MessageSchemaCreate: MessageSchemaCreate, options?: any): AxiosPromise<SuccessfulPostResponseSchema> {
            return MessagesApiFp(configuration).messagesPost(MessageSchemaCreate, options)(axios, basePath);
        },
    };
};

/**
 * MessagesApi - interface
 * @export
 * @interface MessagesApi
 */
export interface MessagesApiInterface {
    /**
     * Search for messages. An empty array is returned if no messages where found.
     * @param {string} [author_uuid] Filter on Invotra UUID of the author.
     * @param {string} [created_date] Filter on date created. Format: YYYY-MM-DD.
     * @param {string} [updated_date] Filter on date updated. Format: YYYY-MM-DD.
     * @param {'timestamp_created' | 'timestamp_updated'} [sort] Field to sort by.
     * @param {'asc' | 'desc'} [order] Sort order.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {number} [limit] The numbers of items to return.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessagesApiInterface
     */
    messagesListGet(author_uuid?: string, created_date?: string, updated_date?: string, sort?: 'timestamp_created' | 'timestamp_updated', order?: 'asc' | 'desc', offset?: number, limit?: number, options?: any): AxiosPromise<InlineResponse20019>;

    /**
     * Delete a message.
     * @param {string} message_id The Invotra UUID of the message.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessagesApiInterface
     */
    messagesMessageIdDelete(message_id: string, options?: any): AxiosPromise<void>;

    /**
     * Get information about the message.
     * @param {string} message_id The Invotra UUID of the message.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessagesApiInterface
     */
    messagesMessageIdGet(message_id: string, options?: any): AxiosPromise<MessageSchema>;

    /**
     * Update message information.
     * @param {string} message_id The Invotra UUID of the message.
     * @param {MessageSchemaUpdate} MessageSchemaUpdate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessagesApiInterface
     */
    messagesMessageIdPut(message_id: string, MessageSchemaUpdate: MessageSchemaUpdate, options?: any): AxiosPromise<void>;

    /**
     * Provision a new message.
     * @param {MessageSchemaCreate} MessageSchemaCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessagesApiInterface
     */
    messagesPost(MessageSchemaCreate: MessageSchemaCreate, options?: any): AxiosPromise<SuccessfulPostResponseSchema>;

}

/**
 * MessagesApi - object-oriented interface
 * @export
 * @class MessagesApi
 * @extends {BaseAPI}
 */
export class MessagesApi extends BaseAPI implements MessagesApiInterface {
    /**
     * Search for messages. An empty array is returned if no messages where found.
     * @param {string} [author_uuid] Filter on Invotra UUID of the author.
     * @param {string} [created_date] Filter on date created. Format: YYYY-MM-DD.
     * @param {string} [updated_date] Filter on date updated. Format: YYYY-MM-DD.
     * @param {'timestamp_created' | 'timestamp_updated'} [sort] Field to sort by.
     * @param {'asc' | 'desc'} [order] Sort order.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {number} [limit] The numbers of items to return.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessagesApi
     */
    public messagesListGet(author_uuid?: string, created_date?: string, updated_date?: string, sort?: 'timestamp_created' | 'timestamp_updated', order?: 'asc' | 'desc', offset?: number, limit?: number, options?: any) {
        return MessagesApiFp(this.configuration).messagesListGet(author_uuid, created_date, updated_date, sort, order, offset, limit, options)(this.axios, this.basePath);
    }

    /**
     * Delete a message.
     * @param {string} message_id The Invotra UUID of the message.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessagesApi
     */
    public messagesMessageIdDelete(message_id: string, options?: any) {
        return MessagesApiFp(this.configuration).messagesMessageIdDelete(message_id, options)(this.axios, this.basePath);
    }

    /**
     * Get information about the message.
     * @param {string} message_id The Invotra UUID of the message.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessagesApi
     */
    public messagesMessageIdGet(message_id: string, options?: any) {
        return MessagesApiFp(this.configuration).messagesMessageIdGet(message_id, options)(this.axios, this.basePath);
    }

    /**
     * Update message information.
     * @param {string} message_id The Invotra UUID of the message.
     * @param {MessageSchemaUpdate} MessageSchemaUpdate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessagesApi
     */
    public messagesMessageIdPut(message_id: string, MessageSchemaUpdate: MessageSchemaUpdate, options?: any) {
        return MessagesApiFp(this.configuration).messagesMessageIdPut(message_id, MessageSchemaUpdate, options)(this.axios, this.basePath);
    }

    /**
     * Provision a new message.
     * @param {MessageSchemaCreate} MessageSchemaCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessagesApi
     */
    public messagesPost(MessageSchemaCreate: MessageSchemaCreate, options?: any) {
        return MessagesApiFp(this.configuration).messagesPost(MessageSchemaCreate, options)(this.axios, this.basePath);
    }

}
