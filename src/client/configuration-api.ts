// tslint:disable
/**
 * InvotraAPI
 * In general most fields are optional for update (PUT) requests; you can leave them blank (pass an empty string / array / whatever as appropriate) to clear them, or omit the key to leave them unchanged.
 *
 * The version of the OpenAPI document: 0.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';

import { BrandingSchema } from '../model';
import { ConfigurationSchema } from '../model';
import { ProductOptionsSchema } from '../model';
/**
 * ConfigurationApi - axios parameter creator
 * @export
 */
export const ConfigurationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns the branding for an instance of Invotra.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        brandingGet(options: any = {}): RequestArgs {
            const localVarPath = `/branding`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        configurationGet(options: any = {}): RequestArgs {
            const localVarPath = `/configuration`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }

            // authentication SessionCookieHeader required


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the product options for an instance of Invotra.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productOptionsGet(options: any = {}): RequestArgs {
            const localVarPath = `/product_options`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }

            // authentication SessionCookieHeader required


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ConfigurationApi - functional programming interface
 * @export
 */
export const ConfigurationApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Returns the branding for an instance of Invotra.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        brandingGet(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<BrandingSchema> {
            const localVarAxiosArgs = ConfigurationApiAxiosParamCreator(configuration).brandingGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        configurationGet(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConfigurationSchema> {
            const localVarAxiosArgs = ConfigurationApiAxiosParamCreator(configuration).configurationGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns the product options for an instance of Invotra.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productOptionsGet(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductOptionsSchema> {
            const localVarAxiosArgs = ConfigurationApiAxiosParamCreator(configuration).productOptionsGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ConfigurationApi - factory interface
 * @export
 */
export const ConfigurationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Returns the branding for an instance of Invotra.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        brandingGet(options?: any): AxiosPromise<BrandingSchema> {
            return ConfigurationApiFp(configuration).brandingGet(options)(axios, basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        configurationGet(options?: any): AxiosPromise<ConfigurationSchema> {
            return ConfigurationApiFp(configuration).configurationGet(options)(axios, basePath);
        },
        /**
         * Returns the product options for an instance of Invotra.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productOptionsGet(options?: any): AxiosPromise<ProductOptionsSchema> {
            return ConfigurationApiFp(configuration).productOptionsGet(options)(axios, basePath);
        },
    };
};

/**
 * ConfigurationApi - interface
 * @export
 * @interface ConfigurationApi
 */
export interface ConfigurationApiInterface {
    /**
     * Returns the branding for an instance of Invotra.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigurationApiInterface
     */
    brandingGet(options?: any): AxiosPromise<BrandingSchema>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigurationApiInterface
     */
    configurationGet(options?: any): AxiosPromise<ConfigurationSchema>;

    /**
     * Returns the product options for an instance of Invotra.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigurationApiInterface
     */
    productOptionsGet(options?: any): AxiosPromise<ProductOptionsSchema>;

}

/**
 * ConfigurationApi - object-oriented interface
 * @export
 * @class ConfigurationApi
 * @extends {BaseAPI}
 */
export class ConfigurationApi extends BaseAPI implements ConfigurationApiInterface {
    /**
     * Returns the branding for an instance of Invotra.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigurationApi
     */
    public brandingGet(options?: any) {
        return ConfigurationApiFp(this.configuration).brandingGet(options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigurationApi
     */
    public configurationGet(options?: any) {
        return ConfigurationApiFp(this.configuration).configurationGet(options)(this.axios, this.basePath);
    }

    /**
     * Returns the product options for an instance of Invotra.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigurationApi
     */
    public productOptionsGet(options?: any) {
        return ConfigurationApiFp(this.configuration).productOptionsGet(options)(this.axios, this.basePath);
    }

}
