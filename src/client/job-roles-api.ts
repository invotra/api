// tslint:disable
/**
 * InvotraAPI
 * In general most fields are optional for update (PUT) requests; you can leave them blank (pass an empty string / array / whatever as appropriate) to clear them, or omit the key to leave them unchanged.
 *
 * The version of the OpenAPI document: 0.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';

import { InlineResponse20028 } from '../model';
import { JobRoleSchema } from '../model';
import { JobRoleSchemaCreate } from '../model';
import { SuccessfulPostResponseWithMessageSchema } from '../model';
import { UuidListSchema } from '../model';
/**
 * JobRolesApi - axios parameter creator
 * @export
 */
export const JobRolesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Search for job roles.
         * @param {string} external_id Filter by external ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobRolesGet(external_id: string, options: any = {}): RequestArgs {
            // verify required parameter 'external_id' is not null or undefined
            if (external_id === null || external_id === undefined) {
                throw new RequiredError('external_id','Required parameter external_id was null or undefined when calling jobRolesGet.');
            }
            const localVarPath = `/job_roles`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }

            // authentication CognitoJwt required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("CognitoJwt", ["invotra/job_roles:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            // authentication SessionCookieHeader required

            if (external_id !== undefined) {
                localVarQueryParameter['external_id'] = external_id;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove job role information.
         * @param {string} job_role_id The Invotra UUID of the job role.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobRolesJobRoleIdDelete(job_role_id: string, options: any = {}): RequestArgs {
            // verify required parameter 'job_role_id' is not null or undefined
            if (job_role_id === null || job_role_id === undefined) {
                throw new RequiredError('job_role_id','Required parameter job_role_id was null or undefined when calling jobRolesJobRoleIdDelete.');
            }
            const localVarPath = `/job_roles/{job_role_id}`
                .replace(`{${"job_role_id"}}`, encodeURIComponent(String(job_role_id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }

            // authentication CognitoJwt required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("CognitoJwt", ["invotra/job_roles:write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            // authentication SessionCookieHeader required


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get information about the job role.
         * @param {string} job_role_id The Invotra UUID of the job role.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobRolesJobRoleIdGet(job_role_id: string, options: any = {}): RequestArgs {
            // verify required parameter 'job_role_id' is not null or undefined
            if (job_role_id === null || job_role_id === undefined) {
                throw new RequiredError('job_role_id','Required parameter job_role_id was null or undefined when calling jobRolesJobRoleIdGet.');
            }
            const localVarPath = `/job_roles/{job_role_id}`
                .replace(`{${"job_role_id"}}`, encodeURIComponent(String(job_role_id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }

            // authentication CognitoJwt required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("CognitoJwt", ["invotra/job_roles:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            // authentication SessionCookieHeader required


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update job role information.
         * @param {string} job_role_id The Invotra UUID of the job role.
         * @param {JobRoleSchema} JobRoleSchema 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobRolesJobRoleIdPut(job_role_id: string, JobRoleSchema: JobRoleSchema, options: any = {}): RequestArgs {
            // verify required parameter 'job_role_id' is not null or undefined
            if (job_role_id === null || job_role_id === undefined) {
                throw new RequiredError('job_role_id','Required parameter job_role_id was null or undefined when calling jobRolesJobRoleIdPut.');
            }
            // verify required parameter 'JobRoleSchema' is not null or undefined
            if (JobRoleSchema === null || JobRoleSchema === undefined) {
                throw new RequiredError('JobRoleSchema','Required parameter JobRoleSchema was null or undefined when calling jobRolesJobRoleIdPut.');
            }
            const localVarPath = `/job_roles/{job_role_id}`
                .replace(`{${"job_role_id"}}`, encodeURIComponent(String(job_role_id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }

            // authentication CognitoJwt required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("CognitoJwt", ["invotra/job_roles:write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            // authentication SessionCookieHeader required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof JobRoleSchema !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(JobRoleSchema !== undefined ? JobRoleSchema : {}) : (JobRoleSchema || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Search for job roles. An empty array is returned if no job roles are found.
         * @param {string} [title] Filter by title. Matches on whole words.
         * @param {string} [external_id] Filter by external ID.
         * @param {string} [status] Filter the list of job roles on a comma seperated list of statuses. Valid statuses are \&quot;published\&quot; and \&quot;unpublished\&quot;, you may inlude both. The default when not supplied is \&quot;published\&quot; only.
         * @param {string} [valid_parents_for] Filter out invalid parents (self and children) for the specified Invotra UUID of the Job Role.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {number} [limit] The numbers of items to return.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobRolesListGet(title?: string, external_id?: string, status?: string, valid_parents_for?: string, offset?: number, limit?: number, options: any = {}): RequestArgs {
            const localVarPath = `/job_roles/list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }

            // authentication CognitoJwt required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("CognitoJwt", ["invotra/job_roles:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            // authentication SessionCookieHeader required

            if (title !== undefined) {
                localVarQueryParameter['title'] = title;
            }

            if (external_id !== undefined) {
                localVarQueryParameter['external_id'] = external_id;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (valid_parents_for !== undefined) {
                localVarQueryParameter['valid_parents_for'] = valid_parents_for;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Provision a new job role.
         * @param {JobRoleSchemaCreate} JobRoleSchemaCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobRolesPost(JobRoleSchemaCreate: JobRoleSchemaCreate, options: any = {}): RequestArgs {
            // verify required parameter 'JobRoleSchemaCreate' is not null or undefined
            if (JobRoleSchemaCreate === null || JobRoleSchemaCreate === undefined) {
                throw new RequiredError('JobRoleSchemaCreate','Required parameter JobRoleSchemaCreate was null or undefined when calling jobRolesPost.');
            }
            const localVarPath = `/job_roles`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }

            // authentication CognitoJwt required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("CognitoJwt", ["invotra/job_roles:write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            // authentication SessionCookieHeader required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof JobRoleSchemaCreate !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(JobRoleSchemaCreate !== undefined ? JobRoleSchemaCreate : {}) : (JobRoleSchemaCreate || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * JobRolesApi - functional programming interface
 * @export
 */
export const JobRolesApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Search for job roles.
         * @param {string} external_id Filter by external ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobRolesGet(external_id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<UuidListSchema> {
            const localVarAxiosArgs = JobRolesApiAxiosParamCreator(configuration).jobRolesGet(external_id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Remove job role information.
         * @param {string} job_role_id The Invotra UUID of the job role.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobRolesJobRoleIdDelete(job_role_id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = JobRolesApiAxiosParamCreator(configuration).jobRolesJobRoleIdDelete(job_role_id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get information about the job role.
         * @param {string} job_role_id The Invotra UUID of the job role.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobRolesJobRoleIdGet(job_role_id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobRoleSchema> {
            const localVarAxiosArgs = JobRolesApiAxiosParamCreator(configuration).jobRolesJobRoleIdGet(job_role_id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update job role information.
         * @param {string} job_role_id The Invotra UUID of the job role.
         * @param {JobRoleSchema} JobRoleSchema 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobRolesJobRoleIdPut(job_role_id: string, JobRoleSchema: JobRoleSchema, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = JobRolesApiAxiosParamCreator(configuration).jobRolesJobRoleIdPut(job_role_id, JobRoleSchema, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Search for job roles. An empty array is returned if no job roles are found.
         * @param {string} [title] Filter by title. Matches on whole words.
         * @param {string} [external_id] Filter by external ID.
         * @param {string} [status] Filter the list of job roles on a comma seperated list of statuses. Valid statuses are \&quot;published\&quot; and \&quot;unpublished\&quot;, you may inlude both. The default when not supplied is \&quot;published\&quot; only.
         * @param {string} [valid_parents_for] Filter out invalid parents (self and children) for the specified Invotra UUID of the Job Role.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {number} [limit] The numbers of items to return.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobRolesListGet(title?: string, external_id?: string, status?: string, valid_parents_for?: string, offset?: number, limit?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20028> {
            const localVarAxiosArgs = JobRolesApiAxiosParamCreator(configuration).jobRolesListGet(title, external_id, status, valid_parents_for, offset, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Provision a new job role.
         * @param {JobRoleSchemaCreate} JobRoleSchemaCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobRolesPost(JobRoleSchemaCreate: JobRoleSchemaCreate, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessfulPostResponseWithMessageSchema> {
            const localVarAxiosArgs = JobRolesApiAxiosParamCreator(configuration).jobRolesPost(JobRoleSchemaCreate, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * JobRolesApi - factory interface
 * @export
 */
export const JobRolesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Search for job roles.
         * @param {string} external_id Filter by external ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobRolesGet(external_id: string, options?: any): AxiosPromise<UuidListSchema> {
            return JobRolesApiFp(configuration).jobRolesGet(external_id, options)(axios, basePath);
        },
        /**
         * Remove job role information.
         * @param {string} job_role_id The Invotra UUID of the job role.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobRolesJobRoleIdDelete(job_role_id: string, options?: any): AxiosPromise<void> {
            return JobRolesApiFp(configuration).jobRolesJobRoleIdDelete(job_role_id, options)(axios, basePath);
        },
        /**
         * Get information about the job role.
         * @param {string} job_role_id The Invotra UUID of the job role.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobRolesJobRoleIdGet(job_role_id: string, options?: any): AxiosPromise<JobRoleSchema> {
            return JobRolesApiFp(configuration).jobRolesJobRoleIdGet(job_role_id, options)(axios, basePath);
        },
        /**
         * Update job role information.
         * @param {string} job_role_id The Invotra UUID of the job role.
         * @param {JobRoleSchema} JobRoleSchema 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobRolesJobRoleIdPut(job_role_id: string, JobRoleSchema: JobRoleSchema, options?: any): AxiosPromise<void> {
            return JobRolesApiFp(configuration).jobRolesJobRoleIdPut(job_role_id, JobRoleSchema, options)(axios, basePath);
        },
        /**
         * Search for job roles. An empty array is returned if no job roles are found.
         * @param {string} [title] Filter by title. Matches on whole words.
         * @param {string} [external_id] Filter by external ID.
         * @param {string} [status] Filter the list of job roles on a comma seperated list of statuses. Valid statuses are \&quot;published\&quot; and \&quot;unpublished\&quot;, you may inlude both. The default when not supplied is \&quot;published\&quot; only.
         * @param {string} [valid_parents_for] Filter out invalid parents (self and children) for the specified Invotra UUID of the Job Role.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {number} [limit] The numbers of items to return.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobRolesListGet(title?: string, external_id?: string, status?: string, valid_parents_for?: string, offset?: number, limit?: number, options?: any): AxiosPromise<InlineResponse20028> {
            return JobRolesApiFp(configuration).jobRolesListGet(title, external_id, status, valid_parents_for, offset, limit, options)(axios, basePath);
        },
        /**
         * Provision a new job role.
         * @param {JobRoleSchemaCreate} JobRoleSchemaCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobRolesPost(JobRoleSchemaCreate: JobRoleSchemaCreate, options?: any): AxiosPromise<SuccessfulPostResponseWithMessageSchema> {
            return JobRolesApiFp(configuration).jobRolesPost(JobRoleSchemaCreate, options)(axios, basePath);
        },
    };
};

/**
 * JobRolesApi - interface
 * @export
 * @interface JobRolesApi
 */
export interface JobRolesApiInterface {
    /**
     * Search for job roles.
     * @param {string} external_id Filter by external ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobRolesApiInterface
     */
    jobRolesGet(external_id: string, options?: any): AxiosPromise<UuidListSchema>;

    /**
     * Remove job role information.
     * @param {string} job_role_id The Invotra UUID of the job role.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobRolesApiInterface
     */
    jobRolesJobRoleIdDelete(job_role_id: string, options?: any): AxiosPromise<void>;

    /**
     * Get information about the job role.
     * @param {string} job_role_id The Invotra UUID of the job role.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobRolesApiInterface
     */
    jobRolesJobRoleIdGet(job_role_id: string, options?: any): AxiosPromise<JobRoleSchema>;

    /**
     * Update job role information.
     * @param {string} job_role_id The Invotra UUID of the job role.
     * @param {JobRoleSchema} JobRoleSchema 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobRolesApiInterface
     */
    jobRolesJobRoleIdPut(job_role_id: string, JobRoleSchema: JobRoleSchema, options?: any): AxiosPromise<void>;

    /**
     * Search for job roles. An empty array is returned if no job roles are found.
     * @param {string} [title] Filter by title. Matches on whole words.
     * @param {string} [external_id] Filter by external ID.
     * @param {string} [status] Filter the list of job roles on a comma seperated list of statuses. Valid statuses are \&quot;published\&quot; and \&quot;unpublished\&quot;, you may inlude both. The default when not supplied is \&quot;published\&quot; only.
     * @param {string} [valid_parents_for] Filter out invalid parents (self and children) for the specified Invotra UUID of the Job Role.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {number} [limit] The numbers of items to return.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobRolesApiInterface
     */
    jobRolesListGet(title?: string, external_id?: string, status?: string, valid_parents_for?: string, offset?: number, limit?: number, options?: any): AxiosPromise<InlineResponse20028>;

    /**
     * Provision a new job role.
     * @param {JobRoleSchemaCreate} JobRoleSchemaCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobRolesApiInterface
     */
    jobRolesPost(JobRoleSchemaCreate: JobRoleSchemaCreate, options?: any): AxiosPromise<SuccessfulPostResponseWithMessageSchema>;

}

/**
 * JobRolesApi - object-oriented interface
 * @export
 * @class JobRolesApi
 * @extends {BaseAPI}
 */
export class JobRolesApi extends BaseAPI implements JobRolesApiInterface {
    /**
     * Search for job roles.
     * @param {string} external_id Filter by external ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobRolesApi
     */
    public jobRolesGet(external_id: string, options?: any) {
        return JobRolesApiFp(this.configuration).jobRolesGet(external_id, options)(this.axios, this.basePath);
    }

    /**
     * Remove job role information.
     * @param {string} job_role_id The Invotra UUID of the job role.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobRolesApi
     */
    public jobRolesJobRoleIdDelete(job_role_id: string, options?: any) {
        return JobRolesApiFp(this.configuration).jobRolesJobRoleIdDelete(job_role_id, options)(this.axios, this.basePath);
    }

    /**
     * Get information about the job role.
     * @param {string} job_role_id The Invotra UUID of the job role.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobRolesApi
     */
    public jobRolesJobRoleIdGet(job_role_id: string, options?: any) {
        return JobRolesApiFp(this.configuration).jobRolesJobRoleIdGet(job_role_id, options)(this.axios, this.basePath);
    }

    /**
     * Update job role information.
     * @param {string} job_role_id The Invotra UUID of the job role.
     * @param {JobRoleSchema} JobRoleSchema 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobRolesApi
     */
    public jobRolesJobRoleIdPut(job_role_id: string, JobRoleSchema: JobRoleSchema, options?: any) {
        return JobRolesApiFp(this.configuration).jobRolesJobRoleIdPut(job_role_id, JobRoleSchema, options)(this.axios, this.basePath);
    }

    /**
     * Search for job roles. An empty array is returned if no job roles are found.
     * @param {string} [title] Filter by title. Matches on whole words.
     * @param {string} [external_id] Filter by external ID.
     * @param {string} [status] Filter the list of job roles on a comma seperated list of statuses. Valid statuses are \&quot;published\&quot; and \&quot;unpublished\&quot;, you may inlude both. The default when not supplied is \&quot;published\&quot; only.
     * @param {string} [valid_parents_for] Filter out invalid parents (self and children) for the specified Invotra UUID of the Job Role.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {number} [limit] The numbers of items to return.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobRolesApi
     */
    public jobRolesListGet(title?: string, external_id?: string, status?: string, valid_parents_for?: string, offset?: number, limit?: number, options?: any) {
        return JobRolesApiFp(this.configuration).jobRolesListGet(title, external_id, status, valid_parents_for, offset, limit, options)(this.axios, this.basePath);
    }

    /**
     * Provision a new job role.
     * @param {JobRoleSchemaCreate} JobRoleSchemaCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobRolesApi
     */
    public jobRolesPost(JobRoleSchemaCreate: JobRoleSchemaCreate, options?: any) {
        return JobRolesApiFp(this.configuration).jobRolesPost(JobRoleSchemaCreate, options)(this.axios, this.basePath);
    }

}
