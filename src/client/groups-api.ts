// tslint:disable
/**
 * Invotra API
 * In general most fields are optional for update (PUT) requests; you can leave them blank (pass an empty string / array / whatever as appropriate) to clear them, or omit the key to leave them unchanged.
 *
 * The version of the OpenAPI document: 0.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';

import { GroupDocumentFolderSchema } from '../model';
import { GroupDocumentFolderSchemaCommon } from '../model';
import { GroupDocumentFolderSchemaCreate } from '../model';
import { GroupDocumentFolderSchemaUpdate } from '../model';
import { GroupMembershipCommonSchema } from '../model';
import { GroupMembershipStatusSchema } from '../model';
import { GroupMetricsSchema } from '../model';
import { GroupSchema } from '../model';
import { InlineResponse20010 } from '../model';
import { InlineResponse20011 } from '../model';
import { InlineResponse20012 } from '../model';
import { InlineResponse20013 } from '../model';
import { InlineResponse2009 } from '../model';
import { SuccessfulPostResponseSchema } from '../model';
import { UuidListSchema } from '../model';
/**
 * GroupsApi - axios parameter creator
 * @export
 */
export const GroupsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * List all group categories. An empty array is returned if no categories are found
         * @param {string} [label] Filter by label. Matches on whole words.
         * @param {string} [autocomplete] Autocomplete term. Matches on group category name, per letter, from the start of the word.
         * @param {string} [group_fulltext_search] Filter the list of categories to those that include groups matching a search term. This is useful when you have already searched for groups and want to refine your search by category (like a faceted search). Like the fulltext_search parameter of /groups/search, this matches on whole words.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {number} [limit] The numbers of items to return. If the value specified is more than the maximum, the result count will be limited to the maximum.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsCategoriesGet(label?: string, autocomplete?: string, group_fulltext_search?: string, offset?: number, limit?: number, options: any = {}): RequestArgs {
            const localVarPath = `/groups/categories`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }

            // authentication CognitoJwt required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("CognitoJwt", ["invotra/groups:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            // authentication SessionCookieHeader required

            if (label !== undefined) {
                localVarQueryParameter['label'] = label;
            }

            if (autocomplete !== undefined) {
                localVarQueryParameter['autocomplete'] = autocomplete;
            }

            if (group_fulltext_search !== undefined) {
                localVarQueryParameter['group_fulltext_search'] = group_fulltext_search;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Search for groups. Returns list of uuids. Returns an empty array if no groups are found.
         * @param {string} external_id Filter by external ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGet(external_id: string, options: any = {}): RequestArgs {
            // verify required parameter 'external_id' is not null or undefined
            if (external_id === null || external_id === undefined) {
                throw new RequiredError('external_id','Required parameter external_id was null or undefined when calling groupsGet.');
            }
            const localVarPath = `/groups`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }

            // authentication CognitoJwt required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("CognitoJwt", ["invotra/groups:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            // authentication SessionCookieHeader required

            if (external_id !== undefined) {
                localVarQueryParameter['external_id'] = external_id;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a group document folder.
         * @param {string} group_id The Invotra UUID of the group.
         * @param {string} group_document_folder_id The Invotra UUID of the group document folders.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGroupIdDocumentFoldersGroupDocumentFolderIdDelete(group_id: string, group_document_folder_id: string, options: any = {}): RequestArgs {
            // verify required parameter 'group_id' is not null or undefined
            if (group_id === null || group_id === undefined) {
                throw new RequiredError('group_id','Required parameter group_id was null or undefined when calling groupsGroupIdDocumentFoldersGroupDocumentFolderIdDelete.');
            }
            // verify required parameter 'group_document_folder_id' is not null or undefined
            if (group_document_folder_id === null || group_document_folder_id === undefined) {
                throw new RequiredError('group_document_folder_id','Required parameter group_document_folder_id was null or undefined when calling groupsGroupIdDocumentFoldersGroupDocumentFolderIdDelete.');
            }
            const localVarPath = `/groups/{group_id}/document_folders/{group_document_folder_id}`
                .replace(`{${"group_id"}}`, encodeURIComponent(String(group_id)))
                .replace(`{${"group_document_folder_id"}}`, encodeURIComponent(String(group_document_folder_id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }

            // authentication CognitoJwt required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("CognitoJwt", ["invotra/groups:write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            // authentication SessionCookieHeader required


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get information about the group document folder.
         * @param {string} group_id The Invotra UUID of the group.
         * @param {string} group_document_folder_id The Invotra UUID of the group document folders.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGroupIdDocumentFoldersGroupDocumentFolderIdGet(group_id: string, group_document_folder_id: string, options: any = {}): RequestArgs {
            // verify required parameter 'group_id' is not null or undefined
            if (group_id === null || group_id === undefined) {
                throw new RequiredError('group_id','Required parameter group_id was null or undefined when calling groupsGroupIdDocumentFoldersGroupDocumentFolderIdGet.');
            }
            // verify required parameter 'group_document_folder_id' is not null or undefined
            if (group_document_folder_id === null || group_document_folder_id === undefined) {
                throw new RequiredError('group_document_folder_id','Required parameter group_document_folder_id was null or undefined when calling groupsGroupIdDocumentFoldersGroupDocumentFolderIdGet.');
            }
            const localVarPath = `/groups/{group_id}/document_folders/{group_document_folder_id}`
                .replace(`{${"group_id"}}`, encodeURIComponent(String(group_id)))
                .replace(`{${"group_document_folder_id"}}`, encodeURIComponent(String(group_document_folder_id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }

            // authentication CognitoJwt required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("CognitoJwt", ["invotra/groups:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            // authentication SessionCookieHeader required


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update group document folder information.
         * @param {string} group_id The Invotra UUID of the group.
         * @param {string} group_document_folder_id The Invotra UUID of the group document folders.
         * @param {GroupDocumentFolderSchemaUpdate} GroupDocumentFolderSchemaUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGroupIdDocumentFoldersGroupDocumentFolderIdPut(group_id: string, group_document_folder_id: string, GroupDocumentFolderSchemaUpdate: GroupDocumentFolderSchemaUpdate, options: any = {}): RequestArgs {
            // verify required parameter 'group_id' is not null or undefined
            if (group_id === null || group_id === undefined) {
                throw new RequiredError('group_id','Required parameter group_id was null or undefined when calling groupsGroupIdDocumentFoldersGroupDocumentFolderIdPut.');
            }
            // verify required parameter 'group_document_folder_id' is not null or undefined
            if (group_document_folder_id === null || group_document_folder_id === undefined) {
                throw new RequiredError('group_document_folder_id','Required parameter group_document_folder_id was null or undefined when calling groupsGroupIdDocumentFoldersGroupDocumentFolderIdPut.');
            }
            // verify required parameter 'GroupDocumentFolderSchemaUpdate' is not null or undefined
            if (GroupDocumentFolderSchemaUpdate === null || GroupDocumentFolderSchemaUpdate === undefined) {
                throw new RequiredError('GroupDocumentFolderSchemaUpdate','Required parameter GroupDocumentFolderSchemaUpdate was null or undefined when calling groupsGroupIdDocumentFoldersGroupDocumentFolderIdPut.');
            }
            const localVarPath = `/groups/{group_id}/document_folders/{group_document_folder_id}`
                .replace(`{${"group_id"}}`, encodeURIComponent(String(group_id)))
                .replace(`{${"group_document_folder_id"}}`, encodeURIComponent(String(group_document_folder_id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }

            // authentication CognitoJwt required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("CognitoJwt", ["invotra/groups:write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            // authentication SessionCookieHeader required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof GroupDocumentFolderSchemaUpdate !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(GroupDocumentFolderSchemaUpdate !== undefined ? GroupDocumentFolderSchemaUpdate : {}) : (GroupDocumentFolderSchemaUpdate || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Search for group document folders. An empty array is returned if no group document folders are found.
         * @param {string} group_id The Invotra UUID of the group.
         * @param {string} [name] Filter by name. Matches on whole words.
         * @param {string} [external_id] Filter by external ID.
         * @param {string} [valid_parents_for] Filter out invalid parents (self and children) for the specified Invotra UUID of the group document folder.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {number} [limit] The numbers of items to return. If the value specified is more than the maximum, the result count will be limited to the maximum.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGroupIdDocumentFoldersListGet(group_id: string, name?: string, external_id?: string, valid_parents_for?: string, offset?: number, limit?: number, options: any = {}): RequestArgs {
            // verify required parameter 'group_id' is not null or undefined
            if (group_id === null || group_id === undefined) {
                throw new RequiredError('group_id','Required parameter group_id was null or undefined when calling groupsGroupIdDocumentFoldersListGet.');
            }
            const localVarPath = `/groups/{group_id}/document_folders/list`
                .replace(`{${"group_id"}}`, encodeURIComponent(String(group_id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }

            // authentication CognitoJwt required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("CognitoJwt", ["invotra/groups:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            // authentication SessionCookieHeader required

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (external_id !== undefined) {
                localVarQueryParameter['external_id'] = external_id;
            }

            if (valid_parents_for !== undefined) {
                localVarQueryParameter['valid_parents_for'] = valid_parents_for;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Provision a new group document folder.
         * @param {string} group_id The Invotra UUID of the group.
         * @param {GroupDocumentFolderSchemaCreate} GroupDocumentFolderSchemaCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGroupIdDocumentFoldersPost(group_id: string, GroupDocumentFolderSchemaCreate: GroupDocumentFolderSchemaCreate, options: any = {}): RequestArgs {
            // verify required parameter 'group_id' is not null or undefined
            if (group_id === null || group_id === undefined) {
                throw new RequiredError('group_id','Required parameter group_id was null or undefined when calling groupsGroupIdDocumentFoldersPost.');
            }
            // verify required parameter 'GroupDocumentFolderSchemaCreate' is not null or undefined
            if (GroupDocumentFolderSchemaCreate === null || GroupDocumentFolderSchemaCreate === undefined) {
                throw new RequiredError('GroupDocumentFolderSchemaCreate','Required parameter GroupDocumentFolderSchemaCreate was null or undefined when calling groupsGroupIdDocumentFoldersPost.');
            }
            const localVarPath = `/groups/{group_id}/document_folders`
                .replace(`{${"group_id"}}`, encodeURIComponent(String(group_id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }

            // authentication CognitoJwt required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("CognitoJwt", ["invotra/groups:write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            // authentication SessionCookieHeader required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof GroupDocumentFolderSchemaCreate !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(GroupDocumentFolderSchemaCreate !== undefined ? GroupDocumentFolderSchemaCreate : {}) : (GroupDocumentFolderSchemaCreate || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get information about the group.
         * @param {string} group_id The Invotra UUID of the group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGroupIdGet(group_id: string, options: any = {}): RequestArgs {
            // verify required parameter 'group_id' is not null or undefined
            if (group_id === null || group_id === undefined) {
                throw new RequiredError('group_id','Required parameter group_id was null or undefined when calling groupsGroupIdGet.');
            }
            const localVarPath = `/groups/{group_id}`
                .replace(`{${"group_id"}}`, encodeURIComponent(String(group_id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }

            // authentication CognitoJwt required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("CognitoJwt", ["invotra/groups:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            // authentication SessionCookieHeader required


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of group members.
         * @param {string} group_id The Invotra UUID of the group.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {number} [limit] The numbers of items to return. If the value specified is more than the maximum, the result count will be limited to the maximum.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGroupIdMembersGet(group_id: string, offset?: number, limit?: number, options: any = {}): RequestArgs {
            // verify required parameter 'group_id' is not null or undefined
            if (group_id === null || group_id === undefined) {
                throw new RequiredError('group_id','Required parameter group_id was null or undefined when calling groupsGroupIdMembersGet.');
            }
            const localVarPath = `/groups/{group_id}/members`
                .replace(`{${"group_id"}}`, encodeURIComponent(String(group_id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }

            // authentication CognitoJwt required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("CognitoJwt", ["invotra/groups:read", "invotra/users:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            // authentication SessionCookieHeader required

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove the user\'s membership of the group. Note that at present the {user_id} must match that of the current logged-in user.
         * @param {string} group_id The Invotra UUID of the group.
         * @param {string} user_id The Invotra UUID of the user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGroupIdMembersUserIdDelete(group_id: string, user_id: string, options: any = {}): RequestArgs {
            // verify required parameter 'group_id' is not null or undefined
            if (group_id === null || group_id === undefined) {
                throw new RequiredError('group_id','Required parameter group_id was null or undefined when calling groupsGroupIdMembersUserIdDelete.');
            }
            // verify required parameter 'user_id' is not null or undefined
            if (user_id === null || user_id === undefined) {
                throw new RequiredError('user_id','Required parameter user_id was null or undefined when calling groupsGroupIdMembersUserIdDelete.');
            }
            const localVarPath = `/groups/{group_id}/members/{user_id}`
                .replace(`{${"group_id"}}`, encodeURIComponent(String(group_id)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(user_id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }

            // authentication CognitoJwt required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("CognitoJwt", ["invotra/groups:write", "invotra/users:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            // authentication SessionCookieHeader required


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Add a user to a group or update information about a user\'s existing group membership. Note that at present the {user_id} must match that of the current logged-in user.
         * @param {string} group_id The Invotra UUID of the group.
         * @param {string} user_id The Invotra UUID of the user.
         * @param {GroupMembershipCommonSchema} [GroupMembershipCommonSchema] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGroupIdMembersUserIdPut(group_id: string, user_id: string, GroupMembershipCommonSchema?: GroupMembershipCommonSchema, options: any = {}): RequestArgs {
            // verify required parameter 'group_id' is not null or undefined
            if (group_id === null || group_id === undefined) {
                throw new RequiredError('group_id','Required parameter group_id was null or undefined when calling groupsGroupIdMembersUserIdPut.');
            }
            // verify required parameter 'user_id' is not null or undefined
            if (user_id === null || user_id === undefined) {
                throw new RequiredError('user_id','Required parameter user_id was null or undefined when calling groupsGroupIdMembersUserIdPut.');
            }
            const localVarPath = `/groups/{group_id}/members/{user_id}`
                .replace(`{${"group_id"}}`, encodeURIComponent(String(group_id)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(user_id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }

            // authentication CognitoJwt required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("CognitoJwt", ["invotra/groups:write", "invotra/users:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            // authentication SessionCookieHeader required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof GroupMembershipCommonSchema !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(GroupMembershipCommonSchema !== undefined ? GroupMembershipCommonSchema : {}) : (GroupMembershipCommonSchema || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Check if the current user is a member of a group.
         * @param {string} group_id The Invotra UUID of the group to check membership status against.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGroupIdMyMembershipGet(group_id: string, options: any = {}): RequestArgs {
            // verify required parameter 'group_id' is not null or undefined
            if (group_id === null || group_id === undefined) {
                throw new RequiredError('group_id','Required parameter group_id was null or undefined when calling groupsGroupIdMyMembershipGet.');
            }
            const localVarPath = `/groups/{group_id}/my_membership`
                .replace(`{${"group_id"}}`, encodeURIComponent(String(group_id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }

            // authentication CognitoJwt required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("CognitoJwt", ["invotra/groups:read", "invotra/users:self:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            // authentication SessionCookieHeader required


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of group posts. This returns only the top-level posts in the group, not their replies.
         * @param {string} group_id The Invotra UUID of the group.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {number} [limit] The numbers of items to return. If the value specified is more than the maximum, the result count will be limited to the maximum.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGroupIdPostsGet(group_id: string, offset?: number, limit?: number, options: any = {}): RequestArgs {
            // verify required parameter 'group_id' is not null or undefined
            if (group_id === null || group_id === undefined) {
                throw new RequiredError('group_id','Required parameter group_id was null or undefined when calling groupsGroupIdPostsGet.');
            }
            const localVarPath = `/groups/{group_id}/posts`
                .replace(`{${"group_id"}}`, encodeURIComponent(String(group_id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }

            // authentication CognitoJwt required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("CognitoJwt", ["invotra/groups:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            // authentication SessionCookieHeader required

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a group.
         * @param {string} group_id The Invotra UUID of the group.
         * @param {GroupSchema} GroupSchema 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGroupIdPut(group_id: string, GroupSchema: GroupSchema, options: any = {}): RequestArgs {
            // verify required parameter 'group_id' is not null or undefined
            if (group_id === null || group_id === undefined) {
                throw new RequiredError('group_id','Required parameter group_id was null or undefined when calling groupsGroupIdPut.');
            }
            // verify required parameter 'GroupSchema' is not null or undefined
            if (GroupSchema === null || GroupSchema === undefined) {
                throw new RequiredError('GroupSchema','Required parameter GroupSchema was null or undefined when calling groupsGroupIdPut.');
            }
            const localVarPath = `/groups/{group_id}`
                .replace(`{${"group_id"}}`, encodeURIComponent(String(group_id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }

            // authentication CognitoJwt required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("CognitoJwt", ["invotra/groups:write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            // authentication SessionCookieHeader required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof GroupSchema !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(GroupSchema !== undefined ? GroupSchema : {}) : (GroupSchema || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsMetricsGet(options: any = {}): RequestArgs {
            const localVarPath = `/groups/metrics`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }

            // authentication CognitoJwt required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("CognitoJwt", ["invotra/groups:metrics"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            // authentication SessionCookieHeader required


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a group.
         * @param {GroupSchema} GroupSchema 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsPost(GroupSchema: GroupSchema, options: any = {}): RequestArgs {
            // verify required parameter 'GroupSchema' is not null or undefined
            if (GroupSchema === null || GroupSchema === undefined) {
                throw new RequiredError('GroupSchema','Required parameter GroupSchema was null or undefined when calling groupsPost.');
            }
            const localVarPath = `/groups`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }

            // authentication CognitoJwt required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("CognitoJwt", ["invotra/groups:write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            // authentication SessionCookieHeader required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof GroupSchema !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(GroupSchema !== undefined ? GroupSchema : {}) : (GroupSchema || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Search for groups. Returns group snippets. An empty array is returned if no groups are found.
         * @param {string} [fulltext_search] Search term. Matches on whole words.
         * @param {string} [category] Filter by UUID of a category.
         * @param {boolean} [my_groups] Filter by groups the current user is a member of.
         * @param {'relevance' | 'likes' | 'members_count' | 'timestamp_created'} [sort] Field to sort by.
         * @param {'asc' | 'desc'} [order] Sort order.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {number} [limit] The numbers of items to return. If the value specified is more than the maximum, the result count will be limited to the maximum.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsSearchGet(fulltext_search?: string, category?: string, my_groups?: boolean, sort?: 'relevance' | 'likes' | 'members_count' | 'timestamp_created', order?: 'asc' | 'desc', offset?: number, limit?: number, options: any = {}): RequestArgs {
            const localVarPath = `/groups/search`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }

            // authentication CognitoJwt required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("CognitoJwt", ["invotra/groups:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            // authentication SessionCookieHeader required

            if (fulltext_search !== undefined) {
                localVarQueryParameter['fulltext_search'] = fulltext_search;
            }

            if (category !== undefined) {
                localVarQueryParameter['category'] = category;
            }

            if (my_groups !== undefined) {
                localVarQueryParameter['my_groups'] = my_groups;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GroupsApi - functional programming interface
 * @export
 */
export const GroupsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * List all group categories. An empty array is returned if no categories are found
         * @param {string} [label] Filter by label. Matches on whole words.
         * @param {string} [autocomplete] Autocomplete term. Matches on group category name, per letter, from the start of the word.
         * @param {string} [group_fulltext_search] Filter the list of categories to those that include groups matching a search term. This is useful when you have already searched for groups and want to refine your search by category (like a faceted search). Like the fulltext_search parameter of /groups/search, this matches on whole words.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {number} [limit] The numbers of items to return. If the value specified is more than the maximum, the result count will be limited to the maximum.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsCategoriesGet(label?: string, autocomplete?: string, group_fulltext_search?: string, offset?: number, limit?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20011> {
            const localVarAxiosArgs = GroupsApiAxiosParamCreator(configuration).groupsCategoriesGet(label, autocomplete, group_fulltext_search, offset, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Search for groups. Returns list of uuids. Returns an empty array if no groups are found.
         * @param {string} external_id Filter by external ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGet(external_id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<UuidListSchema> {
            const localVarAxiosArgs = GroupsApiAxiosParamCreator(configuration).groupsGet(external_id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete a group document folder.
         * @param {string} group_id The Invotra UUID of the group.
         * @param {string} group_document_folder_id The Invotra UUID of the group document folders.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGroupIdDocumentFoldersGroupDocumentFolderIdDelete(group_id: string, group_document_folder_id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = GroupsApiAxiosParamCreator(configuration).groupsGroupIdDocumentFoldersGroupDocumentFolderIdDelete(group_id, group_document_folder_id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get information about the group document folder.
         * @param {string} group_id The Invotra UUID of the group.
         * @param {string} group_document_folder_id The Invotra UUID of the group document folders.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGroupIdDocumentFoldersGroupDocumentFolderIdGet(group_id: string, group_document_folder_id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<GroupDocumentFolderSchema> {
            const localVarAxiosArgs = GroupsApiAxiosParamCreator(configuration).groupsGroupIdDocumentFoldersGroupDocumentFolderIdGet(group_id, group_document_folder_id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update group document folder information.
         * @param {string} group_id The Invotra UUID of the group.
         * @param {string} group_document_folder_id The Invotra UUID of the group document folders.
         * @param {GroupDocumentFolderSchemaUpdate} GroupDocumentFolderSchemaUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGroupIdDocumentFoldersGroupDocumentFolderIdPut(group_id: string, group_document_folder_id: string, GroupDocumentFolderSchemaUpdate: GroupDocumentFolderSchemaUpdate, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = GroupsApiAxiosParamCreator(configuration).groupsGroupIdDocumentFoldersGroupDocumentFolderIdPut(group_id, group_document_folder_id, GroupDocumentFolderSchemaUpdate, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Search for group document folders. An empty array is returned if no group document folders are found.
         * @param {string} group_id The Invotra UUID of the group.
         * @param {string} [name] Filter by name. Matches on whole words.
         * @param {string} [external_id] Filter by external ID.
         * @param {string} [valid_parents_for] Filter out invalid parents (self and children) for the specified Invotra UUID of the group document folder.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {number} [limit] The numbers of items to return. If the value specified is more than the maximum, the result count will be limited to the maximum.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGroupIdDocumentFoldersListGet(group_id: string, name?: string, external_id?: string, valid_parents_for?: string, offset?: number, limit?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20013> {
            const localVarAxiosArgs = GroupsApiAxiosParamCreator(configuration).groupsGroupIdDocumentFoldersListGet(group_id, name, external_id, valid_parents_for, offset, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Provision a new group document folder.
         * @param {string} group_id The Invotra UUID of the group.
         * @param {GroupDocumentFolderSchemaCreate} GroupDocumentFolderSchemaCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGroupIdDocumentFoldersPost(group_id: string, GroupDocumentFolderSchemaCreate: GroupDocumentFolderSchemaCreate, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessfulPostResponseSchema> {
            const localVarAxiosArgs = GroupsApiAxiosParamCreator(configuration).groupsGroupIdDocumentFoldersPost(group_id, GroupDocumentFolderSchemaCreate, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get information about the group.
         * @param {string} group_id The Invotra UUID of the group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGroupIdGet(group_id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<GroupSchema> {
            const localVarAxiosArgs = GroupsApiAxiosParamCreator(configuration).groupsGroupIdGet(group_id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get a list of group members.
         * @param {string} group_id The Invotra UUID of the group.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {number} [limit] The numbers of items to return. If the value specified is more than the maximum, the result count will be limited to the maximum.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGroupIdMembersGet(group_id: string, offset?: number, limit?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20012> {
            const localVarAxiosArgs = GroupsApiAxiosParamCreator(configuration).groupsGroupIdMembersGet(group_id, offset, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Remove the user\'s membership of the group. Note that at present the {user_id} must match that of the current logged-in user.
         * @param {string} group_id The Invotra UUID of the group.
         * @param {string} user_id The Invotra UUID of the user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGroupIdMembersUserIdDelete(group_id: string, user_id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = GroupsApiAxiosParamCreator(configuration).groupsGroupIdMembersUserIdDelete(group_id, user_id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Add a user to a group or update information about a user\'s existing group membership. Note that at present the {user_id} must match that of the current logged-in user.
         * @param {string} group_id The Invotra UUID of the group.
         * @param {string} user_id The Invotra UUID of the user.
         * @param {GroupMembershipCommonSchema} [GroupMembershipCommonSchema] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGroupIdMembersUserIdPut(group_id: string, user_id: string, GroupMembershipCommonSchema?: GroupMembershipCommonSchema, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<GroupMembershipStatusSchema> {
            const localVarAxiosArgs = GroupsApiAxiosParamCreator(configuration).groupsGroupIdMembersUserIdPut(group_id, user_id, GroupMembershipCommonSchema, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Check if the current user is a member of a group.
         * @param {string} group_id The Invotra UUID of the group to check membership status against.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGroupIdMyMembershipGet(group_id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<GroupMembershipStatusSchema> {
            const localVarAxiosArgs = GroupsApiAxiosParamCreator(configuration).groupsGroupIdMyMembershipGet(group_id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get a list of group posts. This returns only the top-level posts in the group, not their replies.
         * @param {string} group_id The Invotra UUID of the group.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {number} [limit] The numbers of items to return. If the value specified is more than the maximum, the result count will be limited to the maximum.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGroupIdPostsGet(group_id: string, offset?: number, limit?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2009> {
            const localVarAxiosArgs = GroupsApiAxiosParamCreator(configuration).groupsGroupIdPostsGet(group_id, offset, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update a group.
         * @param {string} group_id The Invotra UUID of the group.
         * @param {GroupSchema} GroupSchema 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGroupIdPut(group_id: string, GroupSchema: GroupSchema, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = GroupsApiAxiosParamCreator(configuration).groupsGroupIdPut(group_id, GroupSchema, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsMetricsGet(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<GroupMetricsSchema> {
            const localVarAxiosArgs = GroupsApiAxiosParamCreator(configuration).groupsMetricsGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create a group.
         * @param {GroupSchema} GroupSchema 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsPost(GroupSchema: GroupSchema, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessfulPostResponseSchema> {
            const localVarAxiosArgs = GroupsApiAxiosParamCreator(configuration).groupsPost(GroupSchema, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Search for groups. Returns group snippets. An empty array is returned if no groups are found.
         * @param {string} [fulltext_search] Search term. Matches on whole words.
         * @param {string} [category] Filter by UUID of a category.
         * @param {boolean} [my_groups] Filter by groups the current user is a member of.
         * @param {'relevance' | 'likes' | 'members_count' | 'timestamp_created'} [sort] Field to sort by.
         * @param {'asc' | 'desc'} [order] Sort order.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {number} [limit] The numbers of items to return. If the value specified is more than the maximum, the result count will be limited to the maximum.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsSearchGet(fulltext_search?: string, category?: string, my_groups?: boolean, sort?: 'relevance' | 'likes' | 'members_count' | 'timestamp_created', order?: 'asc' | 'desc', offset?: number, limit?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20010> {
            const localVarAxiosArgs = GroupsApiAxiosParamCreator(configuration).groupsSearchGet(fulltext_search, category, my_groups, sort, order, offset, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * GroupsApi - factory interface
 * @export
 */
export const GroupsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * List all group categories. An empty array is returned if no categories are found
         * @param {string} [label] Filter by label. Matches on whole words.
         * @param {string} [autocomplete] Autocomplete term. Matches on group category name, per letter, from the start of the word.
         * @param {string} [group_fulltext_search] Filter the list of categories to those that include groups matching a search term. This is useful when you have already searched for groups and want to refine your search by category (like a faceted search). Like the fulltext_search parameter of /groups/search, this matches on whole words.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {number} [limit] The numbers of items to return. If the value specified is more than the maximum, the result count will be limited to the maximum.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsCategoriesGet(label?: string, autocomplete?: string, group_fulltext_search?: string, offset?: number, limit?: number, options?: any): AxiosPromise<InlineResponse20011> {
            return GroupsApiFp(configuration).groupsCategoriesGet(label, autocomplete, group_fulltext_search, offset, limit, options)(axios, basePath);
        },
        /**
         * Search for groups. Returns list of uuids. Returns an empty array if no groups are found.
         * @param {string} external_id Filter by external ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGet(external_id: string, options?: any): AxiosPromise<UuidListSchema> {
            return GroupsApiFp(configuration).groupsGet(external_id, options)(axios, basePath);
        },
        /**
         * Delete a group document folder.
         * @param {string} group_id The Invotra UUID of the group.
         * @param {string} group_document_folder_id The Invotra UUID of the group document folders.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGroupIdDocumentFoldersGroupDocumentFolderIdDelete(group_id: string, group_document_folder_id: string, options?: any): AxiosPromise<void> {
            return GroupsApiFp(configuration).groupsGroupIdDocumentFoldersGroupDocumentFolderIdDelete(group_id, group_document_folder_id, options)(axios, basePath);
        },
        /**
         * Get information about the group document folder.
         * @param {string} group_id The Invotra UUID of the group.
         * @param {string} group_document_folder_id The Invotra UUID of the group document folders.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGroupIdDocumentFoldersGroupDocumentFolderIdGet(group_id: string, group_document_folder_id: string, options?: any): AxiosPromise<GroupDocumentFolderSchema> {
            return GroupsApiFp(configuration).groupsGroupIdDocumentFoldersGroupDocumentFolderIdGet(group_id, group_document_folder_id, options)(axios, basePath);
        },
        /**
         * Update group document folder information.
         * @param {string} group_id The Invotra UUID of the group.
         * @param {string} group_document_folder_id The Invotra UUID of the group document folders.
         * @param {GroupDocumentFolderSchemaUpdate} GroupDocumentFolderSchemaUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGroupIdDocumentFoldersGroupDocumentFolderIdPut(group_id: string, group_document_folder_id: string, GroupDocumentFolderSchemaUpdate: GroupDocumentFolderSchemaUpdate, options?: any): AxiosPromise<void> {
            return GroupsApiFp(configuration).groupsGroupIdDocumentFoldersGroupDocumentFolderIdPut(group_id, group_document_folder_id, GroupDocumentFolderSchemaUpdate, options)(axios, basePath);
        },
        /**
         * Search for group document folders. An empty array is returned if no group document folders are found.
         * @param {string} group_id The Invotra UUID of the group.
         * @param {string} [name] Filter by name. Matches on whole words.
         * @param {string} [external_id] Filter by external ID.
         * @param {string} [valid_parents_for] Filter out invalid parents (self and children) for the specified Invotra UUID of the group document folder.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {number} [limit] The numbers of items to return. If the value specified is more than the maximum, the result count will be limited to the maximum.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGroupIdDocumentFoldersListGet(group_id: string, name?: string, external_id?: string, valid_parents_for?: string, offset?: number, limit?: number, options?: any): AxiosPromise<InlineResponse20013> {
            return GroupsApiFp(configuration).groupsGroupIdDocumentFoldersListGet(group_id, name, external_id, valid_parents_for, offset, limit, options)(axios, basePath);
        },
        /**
         * Provision a new group document folder.
         * @param {string} group_id The Invotra UUID of the group.
         * @param {GroupDocumentFolderSchemaCreate} GroupDocumentFolderSchemaCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGroupIdDocumentFoldersPost(group_id: string, GroupDocumentFolderSchemaCreate: GroupDocumentFolderSchemaCreate, options?: any): AxiosPromise<SuccessfulPostResponseSchema> {
            return GroupsApiFp(configuration).groupsGroupIdDocumentFoldersPost(group_id, GroupDocumentFolderSchemaCreate, options)(axios, basePath);
        },
        /**
         * Get information about the group.
         * @param {string} group_id The Invotra UUID of the group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGroupIdGet(group_id: string, options?: any): AxiosPromise<GroupSchema> {
            return GroupsApiFp(configuration).groupsGroupIdGet(group_id, options)(axios, basePath);
        },
        /**
         * Get a list of group members.
         * @param {string} group_id The Invotra UUID of the group.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {number} [limit] The numbers of items to return. If the value specified is more than the maximum, the result count will be limited to the maximum.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGroupIdMembersGet(group_id: string, offset?: number, limit?: number, options?: any): AxiosPromise<InlineResponse20012> {
            return GroupsApiFp(configuration).groupsGroupIdMembersGet(group_id, offset, limit, options)(axios, basePath);
        },
        /**
         * Remove the user\'s membership of the group. Note that at present the {user_id} must match that of the current logged-in user.
         * @param {string} group_id The Invotra UUID of the group.
         * @param {string} user_id The Invotra UUID of the user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGroupIdMembersUserIdDelete(group_id: string, user_id: string, options?: any): AxiosPromise<void> {
            return GroupsApiFp(configuration).groupsGroupIdMembersUserIdDelete(group_id, user_id, options)(axios, basePath);
        },
        /**
         * Add a user to a group or update information about a user\'s existing group membership. Note that at present the {user_id} must match that of the current logged-in user.
         * @param {string} group_id The Invotra UUID of the group.
         * @param {string} user_id The Invotra UUID of the user.
         * @param {GroupMembershipCommonSchema} [GroupMembershipCommonSchema] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGroupIdMembersUserIdPut(group_id: string, user_id: string, GroupMembershipCommonSchema?: GroupMembershipCommonSchema, options?: any): AxiosPromise<GroupMembershipStatusSchema> {
            return GroupsApiFp(configuration).groupsGroupIdMembersUserIdPut(group_id, user_id, GroupMembershipCommonSchema, options)(axios, basePath);
        },
        /**
         * Check if the current user is a member of a group.
         * @param {string} group_id The Invotra UUID of the group to check membership status against.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGroupIdMyMembershipGet(group_id: string, options?: any): AxiosPromise<GroupMembershipStatusSchema> {
            return GroupsApiFp(configuration).groupsGroupIdMyMembershipGet(group_id, options)(axios, basePath);
        },
        /**
         * Get a list of group posts. This returns only the top-level posts in the group, not their replies.
         * @param {string} group_id The Invotra UUID of the group.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {number} [limit] The numbers of items to return. If the value specified is more than the maximum, the result count will be limited to the maximum.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGroupIdPostsGet(group_id: string, offset?: number, limit?: number, options?: any): AxiosPromise<InlineResponse2009> {
            return GroupsApiFp(configuration).groupsGroupIdPostsGet(group_id, offset, limit, options)(axios, basePath);
        },
        /**
         * Update a group.
         * @param {string} group_id The Invotra UUID of the group.
         * @param {GroupSchema} GroupSchema 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGroupIdPut(group_id: string, GroupSchema: GroupSchema, options?: any): AxiosPromise<void> {
            return GroupsApiFp(configuration).groupsGroupIdPut(group_id, GroupSchema, options)(axios, basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsMetricsGet(options?: any): AxiosPromise<GroupMetricsSchema> {
            return GroupsApiFp(configuration).groupsMetricsGet(options)(axios, basePath);
        },
        /**
         * Create a group.
         * @param {GroupSchema} GroupSchema 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsPost(GroupSchema: GroupSchema, options?: any): AxiosPromise<SuccessfulPostResponseSchema> {
            return GroupsApiFp(configuration).groupsPost(GroupSchema, options)(axios, basePath);
        },
        /**
         * Search for groups. Returns group snippets. An empty array is returned if no groups are found.
         * @param {string} [fulltext_search] Search term. Matches on whole words.
         * @param {string} [category] Filter by UUID of a category.
         * @param {boolean} [my_groups] Filter by groups the current user is a member of.
         * @param {'relevance' | 'likes' | 'members_count' | 'timestamp_created'} [sort] Field to sort by.
         * @param {'asc' | 'desc'} [order] Sort order.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {number} [limit] The numbers of items to return. If the value specified is more than the maximum, the result count will be limited to the maximum.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsSearchGet(fulltext_search?: string, category?: string, my_groups?: boolean, sort?: 'relevance' | 'likes' | 'members_count' | 'timestamp_created', order?: 'asc' | 'desc', offset?: number, limit?: number, options?: any): AxiosPromise<InlineResponse20010> {
            return GroupsApiFp(configuration).groupsSearchGet(fulltext_search, category, my_groups, sort, order, offset, limit, options)(axios, basePath);
        },
    };
};

/**
 * GroupsApi - interface
 * @export
 * @interface GroupsApi
 */
export interface GroupsApiInterface {
    /**
     * List all group categories. An empty array is returned if no categories are found
     * @param {string} [label] Filter by label. Matches on whole words.
     * @param {string} [autocomplete] Autocomplete term. Matches on group category name, per letter, from the start of the word.
     * @param {string} [group_fulltext_search] Filter the list of categories to those that include groups matching a search term. This is useful when you have already searched for groups and want to refine your search by category (like a faceted search). Like the fulltext_search parameter of /groups/search, this matches on whole words.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {number} [limit] The numbers of items to return. If the value specified is more than the maximum, the result count will be limited to the maximum.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApiInterface
     */
    groupsCategoriesGet(label?: string, autocomplete?: string, group_fulltext_search?: string, offset?: number, limit?: number, options?: any): AxiosPromise<InlineResponse20011>;

    /**
     * Search for groups. Returns list of uuids. Returns an empty array if no groups are found.
     * @param {string} external_id Filter by external ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApiInterface
     */
    groupsGet(external_id: string, options?: any): AxiosPromise<UuidListSchema>;

    /**
     * Delete a group document folder.
     * @param {string} group_id The Invotra UUID of the group.
     * @param {string} group_document_folder_id The Invotra UUID of the group document folders.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApiInterface
     */
    groupsGroupIdDocumentFoldersGroupDocumentFolderIdDelete(group_id: string, group_document_folder_id: string, options?: any): AxiosPromise<void>;

    /**
     * Get information about the group document folder.
     * @param {string} group_id The Invotra UUID of the group.
     * @param {string} group_document_folder_id The Invotra UUID of the group document folders.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApiInterface
     */
    groupsGroupIdDocumentFoldersGroupDocumentFolderIdGet(group_id: string, group_document_folder_id: string, options?: any): AxiosPromise<GroupDocumentFolderSchema>;

    /**
     * Update group document folder information.
     * @param {string} group_id The Invotra UUID of the group.
     * @param {string} group_document_folder_id The Invotra UUID of the group document folders.
     * @param {GroupDocumentFolderSchemaUpdate} GroupDocumentFolderSchemaUpdate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApiInterface
     */
    groupsGroupIdDocumentFoldersGroupDocumentFolderIdPut(group_id: string, group_document_folder_id: string, GroupDocumentFolderSchemaUpdate: GroupDocumentFolderSchemaUpdate, options?: any): AxiosPromise<void>;

    /**
     * Search for group document folders. An empty array is returned if no group document folders are found.
     * @param {string} group_id The Invotra UUID of the group.
     * @param {string} [name] Filter by name. Matches on whole words.
     * @param {string} [external_id] Filter by external ID.
     * @param {string} [valid_parents_for] Filter out invalid parents (self and children) for the specified Invotra UUID of the group document folder.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {number} [limit] The numbers of items to return. If the value specified is more than the maximum, the result count will be limited to the maximum.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApiInterface
     */
    groupsGroupIdDocumentFoldersListGet(group_id: string, name?: string, external_id?: string, valid_parents_for?: string, offset?: number, limit?: number, options?: any): AxiosPromise<InlineResponse20013>;

    /**
     * Provision a new group document folder.
     * @param {string} group_id The Invotra UUID of the group.
     * @param {GroupDocumentFolderSchemaCreate} GroupDocumentFolderSchemaCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApiInterface
     */
    groupsGroupIdDocumentFoldersPost(group_id: string, GroupDocumentFolderSchemaCreate: GroupDocumentFolderSchemaCreate, options?: any): AxiosPromise<SuccessfulPostResponseSchema>;

    /**
     * Get information about the group.
     * @param {string} group_id The Invotra UUID of the group.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApiInterface
     */
    groupsGroupIdGet(group_id: string, options?: any): AxiosPromise<GroupSchema>;

    /**
     * Get a list of group members.
     * @param {string} group_id The Invotra UUID of the group.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {number} [limit] The numbers of items to return. If the value specified is more than the maximum, the result count will be limited to the maximum.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApiInterface
     */
    groupsGroupIdMembersGet(group_id: string, offset?: number, limit?: number, options?: any): AxiosPromise<InlineResponse20012>;

    /**
     * Remove the user\'s membership of the group. Note that at present the {user_id} must match that of the current logged-in user.
     * @param {string} group_id The Invotra UUID of the group.
     * @param {string} user_id The Invotra UUID of the user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApiInterface
     */
    groupsGroupIdMembersUserIdDelete(group_id: string, user_id: string, options?: any): AxiosPromise<void>;

    /**
     * Add a user to a group or update information about a user\'s existing group membership. Note that at present the {user_id} must match that of the current logged-in user.
     * @param {string} group_id The Invotra UUID of the group.
     * @param {string} user_id The Invotra UUID of the user.
     * @param {GroupMembershipCommonSchema} [GroupMembershipCommonSchema] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApiInterface
     */
    groupsGroupIdMembersUserIdPut(group_id: string, user_id: string, GroupMembershipCommonSchema?: GroupMembershipCommonSchema, options?: any): AxiosPromise<GroupMembershipStatusSchema>;

    /**
     * Check if the current user is a member of a group.
     * @param {string} group_id The Invotra UUID of the group to check membership status against.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApiInterface
     */
    groupsGroupIdMyMembershipGet(group_id: string, options?: any): AxiosPromise<GroupMembershipStatusSchema>;

    /**
     * Get a list of group posts. This returns only the top-level posts in the group, not their replies.
     * @param {string} group_id The Invotra UUID of the group.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {number} [limit] The numbers of items to return. If the value specified is more than the maximum, the result count will be limited to the maximum.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApiInterface
     */
    groupsGroupIdPostsGet(group_id: string, offset?: number, limit?: number, options?: any): AxiosPromise<InlineResponse2009>;

    /**
     * Update a group.
     * @param {string} group_id The Invotra UUID of the group.
     * @param {GroupSchema} GroupSchema 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApiInterface
     */
    groupsGroupIdPut(group_id: string, GroupSchema: GroupSchema, options?: any): AxiosPromise<void>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApiInterface
     */
    groupsMetricsGet(options?: any): AxiosPromise<GroupMetricsSchema>;

    /**
     * Create a group.
     * @param {GroupSchema} GroupSchema 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApiInterface
     */
    groupsPost(GroupSchema: GroupSchema, options?: any): AxiosPromise<SuccessfulPostResponseSchema>;

    /**
     * Search for groups. Returns group snippets. An empty array is returned if no groups are found.
     * @param {string} [fulltext_search] Search term. Matches on whole words.
     * @param {string} [category] Filter by UUID of a category.
     * @param {boolean} [my_groups] Filter by groups the current user is a member of.
     * @param {'relevance' | 'likes' | 'members_count' | 'timestamp_created'} [sort] Field to sort by.
     * @param {'asc' | 'desc'} [order] Sort order.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {number} [limit] The numbers of items to return. If the value specified is more than the maximum, the result count will be limited to the maximum.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApiInterface
     */
    groupsSearchGet(fulltext_search?: string, category?: string, my_groups?: boolean, sort?: 'relevance' | 'likes' | 'members_count' | 'timestamp_created', order?: 'asc' | 'desc', offset?: number, limit?: number, options?: any): AxiosPromise<InlineResponse20010>;

}

/**
 * GroupsApi - object-oriented interface
 * @export
 * @class GroupsApi
 * @extends {BaseAPI}
 */
export class GroupsApi extends BaseAPI implements GroupsApiInterface {
    /**
     * List all group categories. An empty array is returned if no categories are found
     * @param {string} [label] Filter by label. Matches on whole words.
     * @param {string} [autocomplete] Autocomplete term. Matches on group category name, per letter, from the start of the word.
     * @param {string} [group_fulltext_search] Filter the list of categories to those that include groups matching a search term. This is useful when you have already searched for groups and want to refine your search by category (like a faceted search). Like the fulltext_search parameter of /groups/search, this matches on whole words.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {number} [limit] The numbers of items to return. If the value specified is more than the maximum, the result count will be limited to the maximum.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public groupsCategoriesGet(label?: string, autocomplete?: string, group_fulltext_search?: string, offset?: number, limit?: number, options?: any) {
        return GroupsApiFp(this.configuration).groupsCategoriesGet(label, autocomplete, group_fulltext_search, offset, limit, options)(this.axios, this.basePath);
    }

    /**
     * Search for groups. Returns list of uuids. Returns an empty array if no groups are found.
     * @param {string} external_id Filter by external ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public groupsGet(external_id: string, options?: any) {
        return GroupsApiFp(this.configuration).groupsGet(external_id, options)(this.axios, this.basePath);
    }

    /**
     * Delete a group document folder.
     * @param {string} group_id The Invotra UUID of the group.
     * @param {string} group_document_folder_id The Invotra UUID of the group document folders.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public groupsGroupIdDocumentFoldersGroupDocumentFolderIdDelete(group_id: string, group_document_folder_id: string, options?: any) {
        return GroupsApiFp(this.configuration).groupsGroupIdDocumentFoldersGroupDocumentFolderIdDelete(group_id, group_document_folder_id, options)(this.axios, this.basePath);
    }

    /**
     * Get information about the group document folder.
     * @param {string} group_id The Invotra UUID of the group.
     * @param {string} group_document_folder_id The Invotra UUID of the group document folders.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public groupsGroupIdDocumentFoldersGroupDocumentFolderIdGet(group_id: string, group_document_folder_id: string, options?: any) {
        return GroupsApiFp(this.configuration).groupsGroupIdDocumentFoldersGroupDocumentFolderIdGet(group_id, group_document_folder_id, options)(this.axios, this.basePath);
    }

    /**
     * Update group document folder information.
     * @param {string} group_id The Invotra UUID of the group.
     * @param {string} group_document_folder_id The Invotra UUID of the group document folders.
     * @param {GroupDocumentFolderSchemaUpdate} GroupDocumentFolderSchemaUpdate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public groupsGroupIdDocumentFoldersGroupDocumentFolderIdPut(group_id: string, group_document_folder_id: string, GroupDocumentFolderSchemaUpdate: GroupDocumentFolderSchemaUpdate, options?: any) {
        return GroupsApiFp(this.configuration).groupsGroupIdDocumentFoldersGroupDocumentFolderIdPut(group_id, group_document_folder_id, GroupDocumentFolderSchemaUpdate, options)(this.axios, this.basePath);
    }

    /**
     * Search for group document folders. An empty array is returned if no group document folders are found.
     * @param {string} group_id The Invotra UUID of the group.
     * @param {string} [name] Filter by name. Matches on whole words.
     * @param {string} [external_id] Filter by external ID.
     * @param {string} [valid_parents_for] Filter out invalid parents (self and children) for the specified Invotra UUID of the group document folder.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {number} [limit] The numbers of items to return. If the value specified is more than the maximum, the result count will be limited to the maximum.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public groupsGroupIdDocumentFoldersListGet(group_id: string, name?: string, external_id?: string, valid_parents_for?: string, offset?: number, limit?: number, options?: any) {
        return GroupsApiFp(this.configuration).groupsGroupIdDocumentFoldersListGet(group_id, name, external_id, valid_parents_for, offset, limit, options)(this.axios, this.basePath);
    }

    /**
     * Provision a new group document folder.
     * @param {string} group_id The Invotra UUID of the group.
     * @param {GroupDocumentFolderSchemaCreate} GroupDocumentFolderSchemaCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public groupsGroupIdDocumentFoldersPost(group_id: string, GroupDocumentFolderSchemaCreate: GroupDocumentFolderSchemaCreate, options?: any) {
        return GroupsApiFp(this.configuration).groupsGroupIdDocumentFoldersPost(group_id, GroupDocumentFolderSchemaCreate, options)(this.axios, this.basePath);
    }

    /**
     * Get information about the group.
     * @param {string} group_id The Invotra UUID of the group.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public groupsGroupIdGet(group_id: string, options?: any) {
        return GroupsApiFp(this.configuration).groupsGroupIdGet(group_id, options)(this.axios, this.basePath);
    }

    /**
     * Get a list of group members.
     * @param {string} group_id The Invotra UUID of the group.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {number} [limit] The numbers of items to return. If the value specified is more than the maximum, the result count will be limited to the maximum.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public groupsGroupIdMembersGet(group_id: string, offset?: number, limit?: number, options?: any) {
        return GroupsApiFp(this.configuration).groupsGroupIdMembersGet(group_id, offset, limit, options)(this.axios, this.basePath);
    }

    /**
     * Remove the user\'s membership of the group. Note that at present the {user_id} must match that of the current logged-in user.
     * @param {string} group_id The Invotra UUID of the group.
     * @param {string} user_id The Invotra UUID of the user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public groupsGroupIdMembersUserIdDelete(group_id: string, user_id: string, options?: any) {
        return GroupsApiFp(this.configuration).groupsGroupIdMembersUserIdDelete(group_id, user_id, options)(this.axios, this.basePath);
    }

    /**
     * Add a user to a group or update information about a user\'s existing group membership. Note that at present the {user_id} must match that of the current logged-in user.
     * @param {string} group_id The Invotra UUID of the group.
     * @param {string} user_id The Invotra UUID of the user.
     * @param {GroupMembershipCommonSchema} [GroupMembershipCommonSchema] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public groupsGroupIdMembersUserIdPut(group_id: string, user_id: string, GroupMembershipCommonSchema?: GroupMembershipCommonSchema, options?: any) {
        return GroupsApiFp(this.configuration).groupsGroupIdMembersUserIdPut(group_id, user_id, GroupMembershipCommonSchema, options)(this.axios, this.basePath);
    }

    /**
     * Check if the current user is a member of a group.
     * @param {string} group_id The Invotra UUID of the group to check membership status against.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public groupsGroupIdMyMembershipGet(group_id: string, options?: any) {
        return GroupsApiFp(this.configuration).groupsGroupIdMyMembershipGet(group_id, options)(this.axios, this.basePath);
    }

    /**
     * Get a list of group posts. This returns only the top-level posts in the group, not their replies.
     * @param {string} group_id The Invotra UUID of the group.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {number} [limit] The numbers of items to return. If the value specified is more than the maximum, the result count will be limited to the maximum.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public groupsGroupIdPostsGet(group_id: string, offset?: number, limit?: number, options?: any) {
        return GroupsApiFp(this.configuration).groupsGroupIdPostsGet(group_id, offset, limit, options)(this.axios, this.basePath);
    }

    /**
     * Update a group.
     * @param {string} group_id The Invotra UUID of the group.
     * @param {GroupSchema} GroupSchema 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public groupsGroupIdPut(group_id: string, GroupSchema: GroupSchema, options?: any) {
        return GroupsApiFp(this.configuration).groupsGroupIdPut(group_id, GroupSchema, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public groupsMetricsGet(options?: any) {
        return GroupsApiFp(this.configuration).groupsMetricsGet(options)(this.axios, this.basePath);
    }

    /**
     * Create a group.
     * @param {GroupSchema} GroupSchema 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public groupsPost(GroupSchema: GroupSchema, options?: any) {
        return GroupsApiFp(this.configuration).groupsPost(GroupSchema, options)(this.axios, this.basePath);
    }

    /**
     * Search for groups. Returns group snippets. An empty array is returned if no groups are found.
     * @param {string} [fulltext_search] Search term. Matches on whole words.
     * @param {string} [category] Filter by UUID of a category.
     * @param {boolean} [my_groups] Filter by groups the current user is a member of.
     * @param {'relevance' | 'likes' | 'members_count' | 'timestamp_created'} [sort] Field to sort by.
     * @param {'asc' | 'desc'} [order] Sort order.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {number} [limit] The numbers of items to return. If the value specified is more than the maximum, the result count will be limited to the maximum.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public groupsSearchGet(fulltext_search?: string, category?: string, my_groups?: boolean, sort?: 'relevance' | 'likes' | 'members_count' | 'timestamp_created', order?: 'asc' | 'desc', offset?: number, limit?: number, options?: any) {
        return GroupsApiFp(this.configuration).groupsSearchGet(fulltext_search, category, my_groups, sort, order, offset, limit, options)(this.axios, this.basePath);
    }

}
