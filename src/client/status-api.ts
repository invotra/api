// tslint:disable
/**
 * InvotraAPI
 * In general most fields are optional for update (PUT) requests; you can leave them blank (pass an empty string / array / whatever as appropriate) to clear them, or omit the key to leave them unchanged.
 *
 * The version of the OpenAPI document: 0.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';

import { StatusSchema } from '../model';
/**
 * StatusApi - axios parameter creator
 * @export
 */
export const StatusApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns the status of the Invotra API. If successful, the API is running as expected and will return the \"OK\" response that includes the server time. (If it is not, an appropriate 5xx error message will be returned).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        statusGet(options: any = {}): RequestArgs {
            const localVarPath = `/status`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StatusApi - functional programming interface
 * @export
 */
export const StatusApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Returns the status of the Invotra API. If successful, the API is running as expected and will return the \"OK\" response that includes the server time. (If it is not, an appropriate 5xx error message will be returned).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        statusGet(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<StatusSchema> {
            const localVarAxiosArgs = StatusApiAxiosParamCreator(configuration).statusGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * StatusApi - factory interface
 * @export
 */
export const StatusApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Returns the status of the Invotra API. If successful, the API is running as expected and will return the \"OK\" response that includes the server time. (If it is not, an appropriate 5xx error message will be returned).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        statusGet(options?: any): AxiosPromise<StatusSchema> {
            return StatusApiFp(configuration).statusGet(options)(axios, basePath);
        },
    };
};

/**
 * StatusApi - interface
 * @export
 * @interface StatusApi
 */
export interface StatusApiInterface {
    /**
     * Returns the status of the Invotra API. If successful, the API is running as expected and will return the \"OK\" response that includes the server time. (If it is not, an appropriate 5xx error message will be returned).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatusApiInterface
     */
    statusGet(options?: any): AxiosPromise<StatusSchema>;

}

/**
 * StatusApi - object-oriented interface
 * @export
 * @class StatusApi
 * @extends {BaseAPI}
 */
export class StatusApi extends BaseAPI implements StatusApiInterface {
    /**
     * Returns the status of the Invotra API. If successful, the API is running as expected and will return the \"OK\" response that includes the server time. (If it is not, an appropriate 5xx error message will be returned).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatusApi
     */
    public statusGet(options?: any) {
        return StatusApiFp(this.configuration).statusGet(options)(this.axios, this.basePath);
    }

}
