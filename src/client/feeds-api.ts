// tslint:disable
/**
 * Invotra API
 * In general most fields are optional for update (PUT) requests; you can leave them blank (pass an empty string / array / whatever as appropriate) to clear them, or omit the key to leave them unchanged.
 *
 * The version of the OpenAPI document: 0.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';

import { FeedStatusSchema } from '../model';
import { InlineResponse2003 } from '../model';
/**
 * FeedsApi - axios parameter creator
 * @export
 */
export const FeedsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns the feed for a user.
         * @param {number} page Page to pull results from.
         * @param {boolean} [app_feeds_only] Filter the feed for the mobile app. Returns only group related messages.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        feedsGet(page: number, app_feeds_only?: boolean, options: any = {}): RequestArgs {
            // verify required parameter 'page' is not null or undefined
            if (page === null || page === undefined) {
                throw new RequiredError('page','Required parameter page was null or undefined when calling feedsGet.');
            }
            const localVarPath = `/feeds`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }

            // authentication CognitoJwt required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("CognitoJwt", ["invotra/feeds:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            // authentication SessionCookieHeader required

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (app_feeds_only !== undefined) {
                localVarQueryParameter['app_feeds_only'] = app_feeds_only;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Check if any new feed items are available for a user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        feedsStatusGet(options: any = {}): RequestArgs {
            const localVarPath = `/feeds/status`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }

            // authentication CognitoJwt required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("CognitoJwt", ["invotra/feeds:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            // authentication SessionCookieHeader required


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Set the feed as read for a user. You should only set this to 0.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        feedsStatusPut(options: any = {}): RequestArgs {
            const localVarPath = `/feeds/status`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }

            // authentication CognitoJwt required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("CognitoJwt", ["invotra/feeds:write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            // authentication SessionCookieHeader required


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FeedsApi - functional programming interface
 * @export
 */
export const FeedsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Returns the feed for a user.
         * @param {number} page Page to pull results from.
         * @param {boolean} [app_feeds_only] Filter the feed for the mobile app. Returns only group related messages.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        feedsGet(page: number, app_feeds_only?: boolean, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2003> {
            const localVarAxiosArgs = FeedsApiAxiosParamCreator(configuration).feedsGet(page, app_feeds_only, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Check if any new feed items are available for a user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        feedsStatusGet(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeedStatusSchema> {
            const localVarAxiosArgs = FeedsApiAxiosParamCreator(configuration).feedsStatusGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Set the feed as read for a user. You should only set this to 0.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        feedsStatusPut(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeedStatusSchema> {
            const localVarAxiosArgs = FeedsApiAxiosParamCreator(configuration).feedsStatusPut(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * FeedsApi - factory interface
 * @export
 */
export const FeedsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Returns the feed for a user.
         * @param {number} page Page to pull results from.
         * @param {boolean} [app_feeds_only] Filter the feed for the mobile app. Returns only group related messages.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        feedsGet(page: number, app_feeds_only?: boolean, options?: any): AxiosPromise<InlineResponse2003> {
            return FeedsApiFp(configuration).feedsGet(page, app_feeds_only, options)(axios, basePath);
        },
        /**
         * Check if any new feed items are available for a user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        feedsStatusGet(options?: any): AxiosPromise<FeedStatusSchema> {
            return FeedsApiFp(configuration).feedsStatusGet(options)(axios, basePath);
        },
        /**
         * Set the feed as read for a user. You should only set this to 0.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        feedsStatusPut(options?: any): AxiosPromise<FeedStatusSchema> {
            return FeedsApiFp(configuration).feedsStatusPut(options)(axios, basePath);
        },
    };
};

/**
 * FeedsApi - interface
 * @export
 * @interface FeedsApi
 */
export interface FeedsApiInterface {
    /**
     * Returns the feed for a user.
     * @param {number} page Page to pull results from.
     * @param {boolean} [app_feeds_only] Filter the feed for the mobile app. Returns only group related messages.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedsApiInterface
     */
    feedsGet(page: number, app_feeds_only?: boolean, options?: any): AxiosPromise<InlineResponse2003>;

    /**
     * Check if any new feed items are available for a user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedsApiInterface
     */
    feedsStatusGet(options?: any): AxiosPromise<FeedStatusSchema>;

    /**
     * Set the feed as read for a user. You should only set this to 0.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedsApiInterface
     */
    feedsStatusPut(options?: any): AxiosPromise<FeedStatusSchema>;

}

/**
 * FeedsApi - object-oriented interface
 * @export
 * @class FeedsApi
 * @extends {BaseAPI}
 */
export class FeedsApi extends BaseAPI implements FeedsApiInterface {
    /**
     * Returns the feed for a user.
     * @param {number} page Page to pull results from.
     * @param {boolean} [app_feeds_only] Filter the feed for the mobile app. Returns only group related messages.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedsApi
     */
    public feedsGet(page: number, app_feeds_only?: boolean, options?: any) {
        return FeedsApiFp(this.configuration).feedsGet(page, app_feeds_only, options)(this.axios, this.basePath);
    }

    /**
     * Check if any new feed items are available for a user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedsApi
     */
    public feedsStatusGet(options?: any) {
        return FeedsApiFp(this.configuration).feedsStatusGet(options)(this.axios, this.basePath);
    }

    /**
     * Set the feed as read for a user. You should only set this to 0.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedsApi
     */
    public feedsStatusPut(options?: any) {
        return FeedsApiFp(this.configuration).feedsStatusPut(options)(this.axios, this.basePath);
    }

}
