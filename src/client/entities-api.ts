// tslint:disable
/**
 * InvotraAPI
 * In general most fields are optional for update (PUT) requests; you can leave them blank (pass an empty string / array / whatever as appropriate) to clear them, or omit the key to leave them unchanged.
 *
 * The version of the OpenAPI document: 0.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';

import { EntityLookupSchema } from '../model';
/**
 * EntitiesApi - axios parameter creator
 * @export
 */
export const EntitiesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Look up information about an entity based on its URL path.
         * @param {string} path The (Drupal) URL path of the entity to look up. Include the leading slash.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        entitiesPathLookupGet(path: string, options: any = {}): RequestArgs {
            // verify required parameter 'path' is not null or undefined
            if (path === null || path === undefined) {
                throw new RequiredError('path','Required parameter path was null or undefined when calling entitiesPathLookupGet.');
            }
            const localVarPath = `/entities/path-lookup`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }

            // authentication CognitoJwt required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("CognitoJwt", ["invotra/path_lookup"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            // authentication SessionCookieHeader required

            if (path !== undefined) {
                localVarQueryParameter['path'] = path;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EntitiesApi - functional programming interface
 * @export
 */
export const EntitiesApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Look up information about an entity based on its URL path.
         * @param {string} path The (Drupal) URL path of the entity to look up. Include the leading slash.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        entitiesPathLookupGet(path: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntityLookupSchema> {
            const localVarAxiosArgs = EntitiesApiAxiosParamCreator(configuration).entitiesPathLookupGet(path, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * EntitiesApi - factory interface
 * @export
 */
export const EntitiesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Look up information about an entity based on its URL path.
         * @param {string} path The (Drupal) URL path of the entity to look up. Include the leading slash.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        entitiesPathLookupGet(path: string, options?: any): AxiosPromise<EntityLookupSchema> {
            return EntitiesApiFp(configuration).entitiesPathLookupGet(path, options)(axios, basePath);
        },
    };
};

/**
 * EntitiesApi - interface
 * @export
 * @interface EntitiesApi
 */
export interface EntitiesApiInterface {
    /**
     * 
     * @summary Look up information about an entity based on its URL path.
     * @param {string} path The (Drupal) URL path of the entity to look up. Include the leading slash.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    entitiesPathLookupGet(path: string, options?: any): AxiosPromise<EntityLookupSchema>;

}

/**
 * EntitiesApi - object-oriented interface
 * @export
 * @class EntitiesApi
 * @extends {BaseAPI}
 */
export class EntitiesApi extends BaseAPI implements EntitiesApiInterface {
    /**
     * 
     * @summary Look up information about an entity based on its URL path.
     * @param {string} path The (Drupal) URL path of the entity to look up. Include the leading slash.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    public entitiesPathLookupGet(path: string, options?: any) {
        return EntitiesApiFp(this.configuration).entitiesPathLookupGet(path, options)(this.axios, this.basePath);
    }

}
