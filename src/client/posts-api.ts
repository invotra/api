// tslint:disable
/**
 * InvotraAPI
 * In general most fields are optional for update (PUT) requests; you can leave them blank (pass an empty string / array / whatever as appropriate) to clear them, or omit the key to leave them unchanged.
 *
 * The version of the OpenAPI document: 0.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';

import { CommonStatusSchema } from '../model';
import { InlineResponse20012 } from '../model';
import { InlineResponse20014 } from '../model';
import { InlineResponse2009 } from '../model';
import { PostCategorySchema } from '../model';
import { PostReportSchemaCreate } from '../model';
import { PostSchema } from '../model';
import { PostSchemaBase } from '../model';
import { PostSchemaCreate } from '../model';
import { SuccessfulPostResponseSchema } from '../model';
import { UuidListSchema } from '../model';
/**
 * PostsApi - axios parameter creator
 * @export
 */
export const PostsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * List post categories.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postsCategoriesGet(options: any = {}): RequestArgs {
            const localVarPath = `/posts/categories`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }

            // authentication SessionCookieHeader required


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Search for posts.
         * @param {string} external_id Filter by external ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postsGet(external_id: string, options: any = {}): RequestArgs {
            // verify required parameter 'external_id' is not null or undefined
            if (external_id === null || external_id === undefined) {
                throw new RequiredError('external_id','Required parameter external_id was null or undefined when calling postsGet.');
            }
            const localVarPath = `/posts`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }

            // authentication SessionCookieHeader required

            if (external_id !== undefined) {
                localVarQueryParameter['external_id'] = external_id;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List of posts. An empty array is returned if no posts are found.
         * @summary List of posts.
         * @param {'timestamp' | 'comment_count' | 'likes_count'} [sort] Field to sort by
         * @param {'asc' | 'desc'} [order] Sort order
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {number} [limit] The numbers of items to return.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postsListGet(sort?: 'timestamp' | 'comment_count' | 'likes_count', order?: 'asc' | 'desc', offset?: number, limit?: number, options: any = {}): RequestArgs {
            const localVarPath = `/posts/list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }

            // authentication SessionCookieHeader required

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a post.
         * @param {PostSchemaCreate} PostSchemaCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postsPost(PostSchemaCreate: PostSchemaCreate, options: any = {}): RequestArgs {
            // verify required parameter 'PostSchemaCreate' is not null or undefined
            if (PostSchemaCreate === null || PostSchemaCreate === undefined) {
                throw new RequiredError('PostSchemaCreate','Required parameter PostSchemaCreate was null or undefined when calling postsPost.');
            }
            const localVarPath = `/posts`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }

            // authentication SessionCookieHeader required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof PostSchemaCreate !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(PostSchemaCreate !== undefined ? PostSchemaCreate : {}) : (PostSchemaCreate || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get information about the post.
         * @param {string} post_id The Invotra UUID of the post.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postsPostIdGet(post_id: string, options: any = {}): RequestArgs {
            // verify required parameter 'post_id' is not null or undefined
            if (post_id === null || post_id === undefined) {
                throw new RequiredError('post_id','Required parameter post_id was null or undefined when calling postsPostIdGet.');
            }
            const localVarPath = `/posts/{post_id}`
                .replace(`{${"post_id"}}`, encodeURIComponent(String(post_id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }

            // authentication SessionCookieHeader required


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove the current user\'s like from a post.
         * @param {string} post_id The Invotra UUID of the post.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postsPostIdLikeDelete(post_id: string, options: any = {}): RequestArgs {
            // verify required parameter 'post_id' is not null or undefined
            if (post_id === null || post_id === undefined) {
                throw new RequiredError('post_id','Required parameter post_id was null or undefined when calling postsPostIdLikeDelete.');
            }
            const localVarPath = `/posts/{post_id}/like`
                .replace(`{${"post_id"}}`, encodeURIComponent(String(post_id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }

            // authentication SessionCookieHeader required


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Check if the current user has liked a post.
         * @param {string} post_id The Invotra UUID of the post.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postsPostIdLikeGet(post_id: string, options: any = {}): RequestArgs {
            // verify required parameter 'post_id' is not null or undefined
            if (post_id === null || post_id === undefined) {
                throw new RequiredError('post_id','Required parameter post_id was null or undefined when calling postsPostIdLikeGet.');
            }
            const localVarPath = `/posts/{post_id}/like`
                .replace(`{${"post_id"}}`, encodeURIComponent(String(post_id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }

            // authentication SessionCookieHeader required


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Like a post as the current user.
         * @param {string} post_id The Invotra UUID of the post.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postsPostIdLikePut(post_id: string, options: any = {}): RequestArgs {
            // verify required parameter 'post_id' is not null or undefined
            if (post_id === null || post_id === undefined) {
                throw new RequiredError('post_id','Required parameter post_id was null or undefined when calling postsPostIdLikePut.');
            }
            const localVarPath = `/posts/{post_id}/like`
                .replace(`{${"post_id"}}`, encodeURIComponent(String(post_id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }

            // authentication SessionCookieHeader required


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of users who have liked a post.
         * @param {string} post_id The Invotra UUID of the post.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {number} [limit] The numbers of items to return.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postsPostIdLikesGet(post_id: string, offset?: number, limit?: number, options: any = {}): RequestArgs {
            // verify required parameter 'post_id' is not null or undefined
            if (post_id === null || post_id === undefined) {
                throw new RequiredError('post_id','Required parameter post_id was null or undefined when calling postsPostIdLikesGet.');
            }
            const localVarPath = `/posts/{post_id}/likes`
                .replace(`{${"post_id"}}`, encodeURIComponent(String(post_id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }

            // authentication SessionCookieHeader required

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update post information.
         * @param {string} post_id The Invotra UUID of the post.
         * @param {PostSchemaBase} PostSchemaBase 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postsPostIdPut(post_id: string, PostSchemaBase: PostSchemaBase, options: any = {}): RequestArgs {
            // verify required parameter 'post_id' is not null or undefined
            if (post_id === null || post_id === undefined) {
                throw new RequiredError('post_id','Required parameter post_id was null or undefined when calling postsPostIdPut.');
            }
            // verify required parameter 'PostSchemaBase' is not null or undefined
            if (PostSchemaBase === null || PostSchemaBase === undefined) {
                throw new RequiredError('PostSchemaBase','Required parameter PostSchemaBase was null or undefined when calling postsPostIdPut.');
            }
            const localVarPath = `/posts/{post_id}`
                .replace(`{${"post_id"}}`, encodeURIComponent(String(post_id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }

            // authentication SessionCookieHeader required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof PostSchemaBase !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(PostSchemaBase !== undefined ? PostSchemaBase : {}) : (PostSchemaBase || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of post replies. The replies are returned in thread order, old-to-new. Replies to a post appear after the post but before the next post at the same level, and posts are ordered oldest-to-newest within each level.
         * @summary Get the replies to a post.
         * @param {string} post_id The Invotra UUID of the parent post. Currently this must be a top-level post in its group. This restriction may be relaxed in a future API version.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {number} [limit] The numbers of items to return.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postsPostIdRepliesGet(post_id: string, offset?: number, limit?: number, options: any = {}): RequestArgs {
            // verify required parameter 'post_id' is not null or undefined
            if (post_id === null || post_id === undefined) {
                throw new RequiredError('post_id','Required parameter post_id was null or undefined when calling postsPostIdRepliesGet.');
            }
            const localVarPath = `/posts/{post_id}/replies`
                .replace(`{${"post_id"}}`, encodeURIComponent(String(post_id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }

            // authentication SessionCookieHeader required

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove the current user\'s report flag from a post.
         * @param {string} post_id The Invotra UUID of the post.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postsPostIdReportDelete(post_id: string, options: any = {}): RequestArgs {
            // verify required parameter 'post_id' is not null or undefined
            if (post_id === null || post_id === undefined) {
                throw new RequiredError('post_id','Required parameter post_id was null or undefined when calling postsPostIdReportDelete.');
            }
            const localVarPath = `/posts/{post_id}/report`
                .replace(`{${"post_id"}}`, encodeURIComponent(String(post_id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }

            // authentication SessionCookieHeader required


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Check if the current user has reported a post.
         * @param {string} post_id The Invotra UUID of the post.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postsPostIdReportGet(post_id: string, options: any = {}): RequestArgs {
            // verify required parameter 'post_id' is not null or undefined
            if (post_id === null || post_id === undefined) {
                throw new RequiredError('post_id','Required parameter post_id was null or undefined when calling postsPostIdReportGet.');
            }
            const localVarPath = `/posts/{post_id}/report`
                .replace(`{${"post_id"}}`, encodeURIComponent(String(post_id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }

            // authentication SessionCookieHeader required


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Report a post as the current user.
         * @param {string} post_id The Invotra UUID of the post.
         * @param {PostReportSchemaCreate} PostReportSchemaCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postsPostIdReportPut(post_id: string, PostReportSchemaCreate: PostReportSchemaCreate, options: any = {}): RequestArgs {
            // verify required parameter 'post_id' is not null or undefined
            if (post_id === null || post_id === undefined) {
                throw new RequiredError('post_id','Required parameter post_id was null or undefined when calling postsPostIdReportPut.');
            }
            // verify required parameter 'PostReportSchemaCreate' is not null or undefined
            if (PostReportSchemaCreate === null || PostReportSchemaCreate === undefined) {
                throw new RequiredError('PostReportSchemaCreate','Required parameter PostReportSchemaCreate was null or undefined when calling postsPostIdReportPut.');
            }
            const localVarPath = `/posts/{post_id}/report`
                .replace(`{${"post_id"}}`, encodeURIComponent(String(post_id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }

            // authentication SessionCookieHeader required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof PostReportSchemaCreate !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(PostReportSchemaCreate !== undefined ? PostReportSchemaCreate : {}) : (PostReportSchemaCreate || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PostsApi - functional programming interface
 * @export
 */
export const PostsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * List post categories.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postsCategoriesGet(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PostCategorySchema>> {
            const localVarAxiosArgs = PostsApiAxiosParamCreator(configuration).postsCategoriesGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Search for posts.
         * @param {string} external_id Filter by external ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postsGet(external_id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<UuidListSchema> {
            const localVarAxiosArgs = PostsApiAxiosParamCreator(configuration).postsGet(external_id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * List of posts. An empty array is returned if no posts are found.
         * @summary List of posts.
         * @param {'timestamp' | 'comment_count' | 'likes_count'} [sort] Field to sort by
         * @param {'asc' | 'desc'} [order] Sort order
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {number} [limit] The numbers of items to return.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postsListGet(sort?: 'timestamp' | 'comment_count' | 'likes_count', order?: 'asc' | 'desc', offset?: number, limit?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20014> {
            const localVarAxiosArgs = PostsApiAxiosParamCreator(configuration).postsListGet(sort, order, offset, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create a post.
         * @param {PostSchemaCreate} PostSchemaCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postsPost(PostSchemaCreate: PostSchemaCreate, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessfulPostResponseSchema> {
            const localVarAxiosArgs = PostsApiAxiosParamCreator(configuration).postsPost(PostSchemaCreate, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get information about the post.
         * @param {string} post_id The Invotra UUID of the post.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postsPostIdGet(post_id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostSchema> {
            const localVarAxiosArgs = PostsApiAxiosParamCreator(configuration).postsPostIdGet(post_id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Remove the current user\'s like from a post.
         * @param {string} post_id The Invotra UUID of the post.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postsPostIdLikeDelete(post_id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = PostsApiAxiosParamCreator(configuration).postsPostIdLikeDelete(post_id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Check if the current user has liked a post.
         * @param {string} post_id The Invotra UUID of the post.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postsPostIdLikeGet(post_id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonStatusSchema> {
            const localVarAxiosArgs = PostsApiAxiosParamCreator(configuration).postsPostIdLikeGet(post_id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Like a post as the current user.
         * @param {string} post_id The Invotra UUID of the post.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postsPostIdLikePut(post_id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = PostsApiAxiosParamCreator(configuration).postsPostIdLikePut(post_id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get a list of users who have liked a post.
         * @param {string} post_id The Invotra UUID of the post.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {number} [limit] The numbers of items to return.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postsPostIdLikesGet(post_id: string, offset?: number, limit?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20012> {
            const localVarAxiosArgs = PostsApiAxiosParamCreator(configuration).postsPostIdLikesGet(post_id, offset, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update post information.
         * @param {string} post_id The Invotra UUID of the post.
         * @param {PostSchemaBase} PostSchemaBase 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postsPostIdPut(post_id: string, PostSchemaBase: PostSchemaBase, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = PostsApiAxiosParamCreator(configuration).postsPostIdPut(post_id, PostSchemaBase, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get a list of post replies. The replies are returned in thread order, old-to-new. Replies to a post appear after the post but before the next post at the same level, and posts are ordered oldest-to-newest within each level.
         * @summary Get the replies to a post.
         * @param {string} post_id The Invotra UUID of the parent post. Currently this must be a top-level post in its group. This restriction may be relaxed in a future API version.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {number} [limit] The numbers of items to return.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postsPostIdRepliesGet(post_id: string, offset?: number, limit?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2009> {
            const localVarAxiosArgs = PostsApiAxiosParamCreator(configuration).postsPostIdRepliesGet(post_id, offset, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Remove the current user\'s report flag from a post.
         * @param {string} post_id The Invotra UUID of the post.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postsPostIdReportDelete(post_id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = PostsApiAxiosParamCreator(configuration).postsPostIdReportDelete(post_id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Check if the current user has reported a post.
         * @param {string} post_id The Invotra UUID of the post.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postsPostIdReportGet(post_id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonStatusSchema> {
            const localVarAxiosArgs = PostsApiAxiosParamCreator(configuration).postsPostIdReportGet(post_id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Report a post as the current user.
         * @param {string} post_id The Invotra UUID of the post.
         * @param {PostReportSchemaCreate} PostReportSchemaCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postsPostIdReportPut(post_id: string, PostReportSchemaCreate: PostReportSchemaCreate, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = PostsApiAxiosParamCreator(configuration).postsPostIdReportPut(post_id, PostReportSchemaCreate, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * PostsApi - factory interface
 * @export
 */
export const PostsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * List post categories.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postsCategoriesGet(options?: any): AxiosPromise<Array<PostCategorySchema>> {
            return PostsApiFp(configuration).postsCategoriesGet(options)(axios, basePath);
        },
        /**
         * Search for posts.
         * @param {string} external_id Filter by external ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postsGet(external_id: string, options?: any): AxiosPromise<UuidListSchema> {
            return PostsApiFp(configuration).postsGet(external_id, options)(axios, basePath);
        },
        /**
         * List of posts. An empty array is returned if no posts are found.
         * @summary List of posts.
         * @param {'timestamp' | 'comment_count' | 'likes_count'} [sort] Field to sort by
         * @param {'asc' | 'desc'} [order] Sort order
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {number} [limit] The numbers of items to return.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postsListGet(sort?: 'timestamp' | 'comment_count' | 'likes_count', order?: 'asc' | 'desc', offset?: number, limit?: number, options?: any): AxiosPromise<InlineResponse20014> {
            return PostsApiFp(configuration).postsListGet(sort, order, offset, limit, options)(axios, basePath);
        },
        /**
         * Create a post.
         * @param {PostSchemaCreate} PostSchemaCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postsPost(PostSchemaCreate: PostSchemaCreate, options?: any): AxiosPromise<SuccessfulPostResponseSchema> {
            return PostsApiFp(configuration).postsPost(PostSchemaCreate, options)(axios, basePath);
        },
        /**
         * Get information about the post.
         * @param {string} post_id The Invotra UUID of the post.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postsPostIdGet(post_id: string, options?: any): AxiosPromise<PostSchema> {
            return PostsApiFp(configuration).postsPostIdGet(post_id, options)(axios, basePath);
        },
        /**
         * Remove the current user\'s like from a post.
         * @param {string} post_id The Invotra UUID of the post.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postsPostIdLikeDelete(post_id: string, options?: any): AxiosPromise<void> {
            return PostsApiFp(configuration).postsPostIdLikeDelete(post_id, options)(axios, basePath);
        },
        /**
         * Check if the current user has liked a post.
         * @param {string} post_id The Invotra UUID of the post.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postsPostIdLikeGet(post_id: string, options?: any): AxiosPromise<CommonStatusSchema> {
            return PostsApiFp(configuration).postsPostIdLikeGet(post_id, options)(axios, basePath);
        },
        /**
         * Like a post as the current user.
         * @param {string} post_id The Invotra UUID of the post.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postsPostIdLikePut(post_id: string, options?: any): AxiosPromise<void> {
            return PostsApiFp(configuration).postsPostIdLikePut(post_id, options)(axios, basePath);
        },
        /**
         * Get a list of users who have liked a post.
         * @param {string} post_id The Invotra UUID of the post.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {number} [limit] The numbers of items to return.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postsPostIdLikesGet(post_id: string, offset?: number, limit?: number, options?: any): AxiosPromise<InlineResponse20012> {
            return PostsApiFp(configuration).postsPostIdLikesGet(post_id, offset, limit, options)(axios, basePath);
        },
        /**
         * Update post information.
         * @param {string} post_id The Invotra UUID of the post.
         * @param {PostSchemaBase} PostSchemaBase 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postsPostIdPut(post_id: string, PostSchemaBase: PostSchemaBase, options?: any): AxiosPromise<void> {
            return PostsApiFp(configuration).postsPostIdPut(post_id, PostSchemaBase, options)(axios, basePath);
        },
        /**
         * Get a list of post replies. The replies are returned in thread order, old-to-new. Replies to a post appear after the post but before the next post at the same level, and posts are ordered oldest-to-newest within each level.
         * @summary Get the replies to a post.
         * @param {string} post_id The Invotra UUID of the parent post. Currently this must be a top-level post in its group. This restriction may be relaxed in a future API version.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {number} [limit] The numbers of items to return.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postsPostIdRepliesGet(post_id: string, offset?: number, limit?: number, options?: any): AxiosPromise<InlineResponse2009> {
            return PostsApiFp(configuration).postsPostIdRepliesGet(post_id, offset, limit, options)(axios, basePath);
        },
        /**
         * Remove the current user\'s report flag from a post.
         * @param {string} post_id The Invotra UUID of the post.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postsPostIdReportDelete(post_id: string, options?: any): AxiosPromise<void> {
            return PostsApiFp(configuration).postsPostIdReportDelete(post_id, options)(axios, basePath);
        },
        /**
         * Check if the current user has reported a post.
         * @param {string} post_id The Invotra UUID of the post.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postsPostIdReportGet(post_id: string, options?: any): AxiosPromise<CommonStatusSchema> {
            return PostsApiFp(configuration).postsPostIdReportGet(post_id, options)(axios, basePath);
        },
        /**
         * Report a post as the current user.
         * @param {string} post_id The Invotra UUID of the post.
         * @param {PostReportSchemaCreate} PostReportSchemaCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postsPostIdReportPut(post_id: string, PostReportSchemaCreate: PostReportSchemaCreate, options?: any): AxiosPromise<void> {
            return PostsApiFp(configuration).postsPostIdReportPut(post_id, PostReportSchemaCreate, options)(axios, basePath);
        },
    };
};

/**
 * PostsApi - interface
 * @export
 * @interface PostsApi
 */
export interface PostsApiInterface {
    /**
     * List post categories.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostsApiInterface
     */
    postsCategoriesGet(options?: any): AxiosPromise<Array<PostCategorySchema>>;

    /**
     * Search for posts.
     * @param {string} external_id Filter by external ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostsApiInterface
     */
    postsGet(external_id: string, options?: any): AxiosPromise<UuidListSchema>;

    /**
     * List of posts. An empty array is returned if no posts are found.
     * @summary List of posts.
     * @param {'timestamp' | 'comment_count' | 'likes_count'} [sort] Field to sort by
     * @param {'asc' | 'desc'} [order] Sort order
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {number} [limit] The numbers of items to return.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostsApiInterface
     */
    postsListGet(sort?: 'timestamp' | 'comment_count' | 'likes_count', order?: 'asc' | 'desc', offset?: number, limit?: number, options?: any): AxiosPromise<InlineResponse20014>;

    /**
     * Create a post.
     * @param {PostSchemaCreate} PostSchemaCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostsApiInterface
     */
    postsPost(PostSchemaCreate: PostSchemaCreate, options?: any): AxiosPromise<SuccessfulPostResponseSchema>;

    /**
     * Get information about the post.
     * @param {string} post_id The Invotra UUID of the post.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostsApiInterface
     */
    postsPostIdGet(post_id: string, options?: any): AxiosPromise<PostSchema>;

    /**
     * Remove the current user\'s like from a post.
     * @param {string} post_id The Invotra UUID of the post.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostsApiInterface
     */
    postsPostIdLikeDelete(post_id: string, options?: any): AxiosPromise<void>;

    /**
     * Check if the current user has liked a post.
     * @param {string} post_id The Invotra UUID of the post.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostsApiInterface
     */
    postsPostIdLikeGet(post_id: string, options?: any): AxiosPromise<CommonStatusSchema>;

    /**
     * Like a post as the current user.
     * @param {string} post_id The Invotra UUID of the post.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostsApiInterface
     */
    postsPostIdLikePut(post_id: string, options?: any): AxiosPromise<void>;

    /**
     * Get a list of users who have liked a post.
     * @param {string} post_id The Invotra UUID of the post.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {number} [limit] The numbers of items to return.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostsApiInterface
     */
    postsPostIdLikesGet(post_id: string, offset?: number, limit?: number, options?: any): AxiosPromise<InlineResponse20012>;

    /**
     * Update post information.
     * @param {string} post_id The Invotra UUID of the post.
     * @param {PostSchemaBase} PostSchemaBase 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostsApiInterface
     */
    postsPostIdPut(post_id: string, PostSchemaBase: PostSchemaBase, options?: any): AxiosPromise<void>;

    /**
     * Get a list of post replies. The replies are returned in thread order, old-to-new. Replies to a post appear after the post but before the next post at the same level, and posts are ordered oldest-to-newest within each level.
     * @summary Get the replies to a post.
     * @param {string} post_id The Invotra UUID of the parent post. Currently this must be a top-level post in its group. This restriction may be relaxed in a future API version.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {number} [limit] The numbers of items to return.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostsApiInterface
     */
    postsPostIdRepliesGet(post_id: string, offset?: number, limit?: number, options?: any): AxiosPromise<InlineResponse2009>;

    /**
     * Remove the current user\'s report flag from a post.
     * @param {string} post_id The Invotra UUID of the post.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostsApiInterface
     */
    postsPostIdReportDelete(post_id: string, options?: any): AxiosPromise<void>;

    /**
     * Check if the current user has reported a post.
     * @param {string} post_id The Invotra UUID of the post.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostsApiInterface
     */
    postsPostIdReportGet(post_id: string, options?: any): AxiosPromise<CommonStatusSchema>;

    /**
     * Report a post as the current user.
     * @param {string} post_id The Invotra UUID of the post.
     * @param {PostReportSchemaCreate} PostReportSchemaCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostsApiInterface
     */
    postsPostIdReportPut(post_id: string, PostReportSchemaCreate: PostReportSchemaCreate, options?: any): AxiosPromise<void>;

}

/**
 * PostsApi - object-oriented interface
 * @export
 * @class PostsApi
 * @extends {BaseAPI}
 */
export class PostsApi extends BaseAPI implements PostsApiInterface {
    /**
     * List post categories.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostsApi
     */
    public postsCategoriesGet(options?: any) {
        return PostsApiFp(this.configuration).postsCategoriesGet(options)(this.axios, this.basePath);
    }

    /**
     * Search for posts.
     * @param {string} external_id Filter by external ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostsApi
     */
    public postsGet(external_id: string, options?: any) {
        return PostsApiFp(this.configuration).postsGet(external_id, options)(this.axios, this.basePath);
    }

    /**
     * List of posts. An empty array is returned if no posts are found.
     * @summary List of posts.
     * @param {'timestamp' | 'comment_count' | 'likes_count'} [sort] Field to sort by
     * @param {'asc' | 'desc'} [order] Sort order
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {number} [limit] The numbers of items to return.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostsApi
     */
    public postsListGet(sort?: 'timestamp' | 'comment_count' | 'likes_count', order?: 'asc' | 'desc', offset?: number, limit?: number, options?: any) {
        return PostsApiFp(this.configuration).postsListGet(sort, order, offset, limit, options)(this.axios, this.basePath);
    }

    /**
     * Create a post.
     * @param {PostSchemaCreate} PostSchemaCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostsApi
     */
    public postsPost(PostSchemaCreate: PostSchemaCreate, options?: any) {
        return PostsApiFp(this.configuration).postsPost(PostSchemaCreate, options)(this.axios, this.basePath);
    }

    /**
     * Get information about the post.
     * @param {string} post_id The Invotra UUID of the post.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostsApi
     */
    public postsPostIdGet(post_id: string, options?: any) {
        return PostsApiFp(this.configuration).postsPostIdGet(post_id, options)(this.axios, this.basePath);
    }

    /**
     * Remove the current user\'s like from a post.
     * @param {string} post_id The Invotra UUID of the post.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostsApi
     */
    public postsPostIdLikeDelete(post_id: string, options?: any) {
        return PostsApiFp(this.configuration).postsPostIdLikeDelete(post_id, options)(this.axios, this.basePath);
    }

    /**
     * Check if the current user has liked a post.
     * @param {string} post_id The Invotra UUID of the post.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostsApi
     */
    public postsPostIdLikeGet(post_id: string, options?: any) {
        return PostsApiFp(this.configuration).postsPostIdLikeGet(post_id, options)(this.axios, this.basePath);
    }

    /**
     * Like a post as the current user.
     * @param {string} post_id The Invotra UUID of the post.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostsApi
     */
    public postsPostIdLikePut(post_id: string, options?: any) {
        return PostsApiFp(this.configuration).postsPostIdLikePut(post_id, options)(this.axios, this.basePath);
    }

    /**
     * Get a list of users who have liked a post.
     * @param {string} post_id The Invotra UUID of the post.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {number} [limit] The numbers of items to return.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostsApi
     */
    public postsPostIdLikesGet(post_id: string, offset?: number, limit?: number, options?: any) {
        return PostsApiFp(this.configuration).postsPostIdLikesGet(post_id, offset, limit, options)(this.axios, this.basePath);
    }

    /**
     * Update post information.
     * @param {string} post_id The Invotra UUID of the post.
     * @param {PostSchemaBase} PostSchemaBase 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostsApi
     */
    public postsPostIdPut(post_id: string, PostSchemaBase: PostSchemaBase, options?: any) {
        return PostsApiFp(this.configuration).postsPostIdPut(post_id, PostSchemaBase, options)(this.axios, this.basePath);
    }

    /**
     * Get a list of post replies. The replies are returned in thread order, old-to-new. Replies to a post appear after the post but before the next post at the same level, and posts are ordered oldest-to-newest within each level.
     * @summary Get the replies to a post.
     * @param {string} post_id The Invotra UUID of the parent post. Currently this must be a top-level post in its group. This restriction may be relaxed in a future API version.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {number} [limit] The numbers of items to return.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostsApi
     */
    public postsPostIdRepliesGet(post_id: string, offset?: number, limit?: number, options?: any) {
        return PostsApiFp(this.configuration).postsPostIdRepliesGet(post_id, offset, limit, options)(this.axios, this.basePath);
    }

    /**
     * Remove the current user\'s report flag from a post.
     * @param {string} post_id The Invotra UUID of the post.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostsApi
     */
    public postsPostIdReportDelete(post_id: string, options?: any) {
        return PostsApiFp(this.configuration).postsPostIdReportDelete(post_id, options)(this.axios, this.basePath);
    }

    /**
     * Check if the current user has reported a post.
     * @param {string} post_id The Invotra UUID of the post.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostsApi
     */
    public postsPostIdReportGet(post_id: string, options?: any) {
        return PostsApiFp(this.configuration).postsPostIdReportGet(post_id, options)(this.axios, this.basePath);
    }

    /**
     * Report a post as the current user.
     * @param {string} post_id The Invotra UUID of the post.
     * @param {PostReportSchemaCreate} PostReportSchemaCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostsApi
     */
    public postsPostIdReportPut(post_id: string, PostReportSchemaCreate: PostReportSchemaCreate, options?: any) {
        return PostsApiFp(this.configuration).postsPostIdReportPut(post_id, PostReportSchemaCreate, options)(this.axios, this.basePath);
    }

}
