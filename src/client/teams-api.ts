// tslint:disable
/**
 * InvotraAPI
 * In general most fields are optional for update (PUT) requests; you can leave them blank (pass an empty string / array / whatever as appropriate) to clear them, or omit the key to leave them unchanged.
 *
 * The version of the OpenAPI document: 0.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';

import { InlineResponse200 } from '../model';
import { InlineResponse2001 } from '../model';
import { SuccessfulPostResponseWithMessageSchema } from '../model';
import { TeamMembershipCommonSchema } from '../model';
import { TeamSchema } from '../model';
import { TeamSchemaCreate } from '../model';
import { UuidListSchema } from '../model';
/**
 * TeamsApi - axios parameter creator
 * @export
 */
export const TeamsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Search for teams. An empty array is returned if no teams are found.
         * @param {string} external_id Filter by external ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsGet(external_id: string, options: any = {}): RequestArgs {
            // verify required parameter 'external_id' is not null or undefined
            if (external_id === null || external_id === undefined) {
                throw new RequiredError('external_id','Required parameter external_id was null or undefined when calling teamsGet.');
            }
            const localVarPath = `/teams`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }

            // authentication SessionCookieHeader required

            if (external_id !== undefined) {
                localVarQueryParameter['external_id'] = external_id;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Search for teams. An empty array is returned if no teams are found.
         * @param {string} [label] Filter by label. Matches on whole words.
         * @param {string} [autocomplete] Autocomplete term. Matches on team name, per letter, from the start of the word.
         * @param {string} [users_fulltext_search] Filter the list of teams to those that include users matching a search term. This is useful when you have already searched for users and want to refine your search by team (like a faceted search). Like the fulltext_search parameter of /users/search, this matches on whole words.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {number} [limit] The numbers of items to return.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsListGet(label?: string, autocomplete?: string, users_fulltext_search?: string, offset?: number, limit?: number, options: any = {}): RequestArgs {
            const localVarPath = `/teams/list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }

            // authentication SessionCookieHeader required

            if (label !== undefined) {
                localVarQueryParameter['label'] = label;
            }

            if (autocomplete !== undefined) {
                localVarQueryParameter['autocomplete'] = autocomplete;
            }

            if (users_fulltext_search !== undefined) {
                localVarQueryParameter['users_fulltext_search'] = users_fulltext_search;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Provision a new team.
         * @param {TeamSchemaCreate} TeamSchemaCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsPost(TeamSchemaCreate: TeamSchemaCreate, options: any = {}): RequestArgs {
            // verify required parameter 'TeamSchemaCreate' is not null or undefined
            if (TeamSchemaCreate === null || TeamSchemaCreate === undefined) {
                throw new RequiredError('TeamSchemaCreate','Required parameter TeamSchemaCreate was null or undefined when calling teamsPost.');
            }
            const localVarPath = `/teams`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }

            // authentication SessionCookieHeader required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof TeamSchemaCreate !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(TeamSchemaCreate !== undefined ? TeamSchemaCreate : {}) : (TeamSchemaCreate || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove team information
         * @param {string} team_id The Invotra UUID of the team.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsTeamIdDelete(team_id: string, options: any = {}): RequestArgs {
            // verify required parameter 'team_id' is not null or undefined
            if (team_id === null || team_id === undefined) {
                throw new RequiredError('team_id','Required parameter team_id was null or undefined when calling teamsTeamIdDelete.');
            }
            const localVarPath = `/teams/{team_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(team_id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }

            // authentication SessionCookieHeader required


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get information about the team.
         * @param {string} team_id The Invotra UUID of the team.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsTeamIdGet(team_id: string, options: any = {}): RequestArgs {
            // verify required parameter 'team_id' is not null or undefined
            if (team_id === null || team_id === undefined) {
                throw new RequiredError('team_id','Required parameter team_id was null or undefined when calling teamsTeamIdGet.');
            }
            const localVarPath = `/teams/{team_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(team_id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }

            // authentication SessionCookieHeader required


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of team members.
         * @param {string} team_id The Invotra UUID of the team.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {number} [limit] The numbers of items to return.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsTeamIdMembershipsGet(team_id: string, offset?: number, limit?: number, options: any = {}): RequestArgs {
            // verify required parameter 'team_id' is not null or undefined
            if (team_id === null || team_id === undefined) {
                throw new RequiredError('team_id','Required parameter team_id was null or undefined when calling teamsTeamIdMembershipsGet.');
            }
            const localVarPath = `/teams/{team_id}/memberships`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(team_id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }

            // authentication SessionCookieHeader required

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove the user\'s membership of the team.
         * @param {string} team_id The Invotra UUID of the team.
         * @param {string} user_id The Invotra UUID of the user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsTeamIdMembershipsUserIdDelete(team_id: string, user_id: string, options: any = {}): RequestArgs {
            // verify required parameter 'team_id' is not null or undefined
            if (team_id === null || team_id === undefined) {
                throw new RequiredError('team_id','Required parameter team_id was null or undefined when calling teamsTeamIdMembershipsUserIdDelete.');
            }
            // verify required parameter 'user_id' is not null or undefined
            if (user_id === null || user_id === undefined) {
                throw new RequiredError('user_id','Required parameter user_id was null or undefined when calling teamsTeamIdMembershipsUserIdDelete.');
            }
            const localVarPath = `/teams/{team_id}/memberships/{user_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(team_id)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(user_id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }

            // authentication SessionCookieHeader required


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update information about a user\'s team membership.
         * @param {string} team_id The Invotra UUID of the team.
         * @param {string} user_id The Invotra UUID of the user.
         * @param {TeamMembershipCommonSchema} TeamMembershipCommonSchema 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsTeamIdMembershipsUserIdPut(team_id: string, user_id: string, TeamMembershipCommonSchema: TeamMembershipCommonSchema, options: any = {}): RequestArgs {
            // verify required parameter 'team_id' is not null or undefined
            if (team_id === null || team_id === undefined) {
                throw new RequiredError('team_id','Required parameter team_id was null or undefined when calling teamsTeamIdMembershipsUserIdPut.');
            }
            // verify required parameter 'user_id' is not null or undefined
            if (user_id === null || user_id === undefined) {
                throw new RequiredError('user_id','Required parameter user_id was null or undefined when calling teamsTeamIdMembershipsUserIdPut.');
            }
            // verify required parameter 'TeamMembershipCommonSchema' is not null or undefined
            if (TeamMembershipCommonSchema === null || TeamMembershipCommonSchema === undefined) {
                throw new RequiredError('TeamMembershipCommonSchema','Required parameter TeamMembershipCommonSchema was null or undefined when calling teamsTeamIdMembershipsUserIdPut.');
            }
            const localVarPath = `/teams/{team_id}/memberships/{user_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(team_id)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(user_id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }

            // authentication SessionCookieHeader required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof TeamMembershipCommonSchema !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(TeamMembershipCommonSchema !== undefined ? TeamMembershipCommonSchema : {}) : (TeamMembershipCommonSchema || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update team information.
         * @param {string} team_id The Invotra UUID of the team.
         * @param {TeamSchema} TeamSchema 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsTeamIdPut(team_id: string, TeamSchema: TeamSchema, options: any = {}): RequestArgs {
            // verify required parameter 'team_id' is not null or undefined
            if (team_id === null || team_id === undefined) {
                throw new RequiredError('team_id','Required parameter team_id was null or undefined when calling teamsTeamIdPut.');
            }
            // verify required parameter 'TeamSchema' is not null or undefined
            if (TeamSchema === null || TeamSchema === undefined) {
                throw new RequiredError('TeamSchema','Required parameter TeamSchema was null or undefined when calling teamsTeamIdPut.');
            }
            const localVarPath = `/teams/{team_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(team_id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-Key")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-Key"] = localVarApiKeyValue;
            }

            // authentication SessionCookieHeader required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof TeamSchema !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(TeamSchema !== undefined ? TeamSchema : {}) : (TeamSchema || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TeamsApi - functional programming interface
 * @export
 */
export const TeamsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Search for teams. An empty array is returned if no teams are found.
         * @param {string} external_id Filter by external ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsGet(external_id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<UuidListSchema> {
            const localVarAxiosArgs = TeamsApiAxiosParamCreator(configuration).teamsGet(external_id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Search for teams. An empty array is returned if no teams are found.
         * @param {string} [label] Filter by label. Matches on whole words.
         * @param {string} [autocomplete] Autocomplete term. Matches on team name, per letter, from the start of the word.
         * @param {string} [users_fulltext_search] Filter the list of teams to those that include users matching a search term. This is useful when you have already searched for users and want to refine your search by team (like a faceted search). Like the fulltext_search parameter of /users/search, this matches on whole words.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {number} [limit] The numbers of items to return.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsListGet(label?: string, autocomplete?: string, users_fulltext_search?: string, offset?: number, limit?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse200> {
            const localVarAxiosArgs = TeamsApiAxiosParamCreator(configuration).teamsListGet(label, autocomplete, users_fulltext_search, offset, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Provision a new team.
         * @param {TeamSchemaCreate} TeamSchemaCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsPost(TeamSchemaCreate: TeamSchemaCreate, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessfulPostResponseWithMessageSchema> {
            const localVarAxiosArgs = TeamsApiAxiosParamCreator(configuration).teamsPost(TeamSchemaCreate, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Remove team information
         * @param {string} team_id The Invotra UUID of the team.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsTeamIdDelete(team_id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = TeamsApiAxiosParamCreator(configuration).teamsTeamIdDelete(team_id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get information about the team.
         * @param {string} team_id The Invotra UUID of the team.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsTeamIdGet(team_id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<TeamSchema> {
            const localVarAxiosArgs = TeamsApiAxiosParamCreator(configuration).teamsTeamIdGet(team_id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get a list of team members.
         * @param {string} team_id The Invotra UUID of the team.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {number} [limit] The numbers of items to return.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsTeamIdMembershipsGet(team_id: string, offset?: number, limit?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2001> {
            const localVarAxiosArgs = TeamsApiAxiosParamCreator(configuration).teamsTeamIdMembershipsGet(team_id, offset, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Remove the user\'s membership of the team.
         * @param {string} team_id The Invotra UUID of the team.
         * @param {string} user_id The Invotra UUID of the user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsTeamIdMembershipsUserIdDelete(team_id: string, user_id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = TeamsApiAxiosParamCreator(configuration).teamsTeamIdMembershipsUserIdDelete(team_id, user_id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update information about a user\'s team membership.
         * @param {string} team_id The Invotra UUID of the team.
         * @param {string} user_id The Invotra UUID of the user.
         * @param {TeamMembershipCommonSchema} TeamMembershipCommonSchema 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsTeamIdMembershipsUserIdPut(team_id: string, user_id: string, TeamMembershipCommonSchema: TeamMembershipCommonSchema, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = TeamsApiAxiosParamCreator(configuration).teamsTeamIdMembershipsUserIdPut(team_id, user_id, TeamMembershipCommonSchema, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update team information.
         * @param {string} team_id The Invotra UUID of the team.
         * @param {TeamSchema} TeamSchema 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsTeamIdPut(team_id: string, TeamSchema: TeamSchema, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = TeamsApiAxiosParamCreator(configuration).teamsTeamIdPut(team_id, TeamSchema, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * TeamsApi - factory interface
 * @export
 */
export const TeamsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Search for teams. An empty array is returned if no teams are found.
         * @param {string} external_id Filter by external ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsGet(external_id: string, options?: any): AxiosPromise<UuidListSchema> {
            return TeamsApiFp(configuration).teamsGet(external_id, options)(axios, basePath);
        },
        /**
         * Search for teams. An empty array is returned if no teams are found.
         * @param {string} [label] Filter by label. Matches on whole words.
         * @param {string} [autocomplete] Autocomplete term. Matches on team name, per letter, from the start of the word.
         * @param {string} [users_fulltext_search] Filter the list of teams to those that include users matching a search term. This is useful when you have already searched for users and want to refine your search by team (like a faceted search). Like the fulltext_search parameter of /users/search, this matches on whole words.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {number} [limit] The numbers of items to return.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsListGet(label?: string, autocomplete?: string, users_fulltext_search?: string, offset?: number, limit?: number, options?: any): AxiosPromise<InlineResponse200> {
            return TeamsApiFp(configuration).teamsListGet(label, autocomplete, users_fulltext_search, offset, limit, options)(axios, basePath);
        },
        /**
         * Provision a new team.
         * @param {TeamSchemaCreate} TeamSchemaCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsPost(TeamSchemaCreate: TeamSchemaCreate, options?: any): AxiosPromise<SuccessfulPostResponseWithMessageSchema> {
            return TeamsApiFp(configuration).teamsPost(TeamSchemaCreate, options)(axios, basePath);
        },
        /**
         * Remove team information
         * @param {string} team_id The Invotra UUID of the team.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsTeamIdDelete(team_id: string, options?: any): AxiosPromise<void> {
            return TeamsApiFp(configuration).teamsTeamIdDelete(team_id, options)(axios, basePath);
        },
        /**
         * Get information about the team.
         * @param {string} team_id The Invotra UUID of the team.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsTeamIdGet(team_id: string, options?: any): AxiosPromise<TeamSchema> {
            return TeamsApiFp(configuration).teamsTeamIdGet(team_id, options)(axios, basePath);
        },
        /**
         * Get a list of team members.
         * @param {string} team_id The Invotra UUID of the team.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {number} [limit] The numbers of items to return.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsTeamIdMembershipsGet(team_id: string, offset?: number, limit?: number, options?: any): AxiosPromise<InlineResponse2001> {
            return TeamsApiFp(configuration).teamsTeamIdMembershipsGet(team_id, offset, limit, options)(axios, basePath);
        },
        /**
         * Remove the user\'s membership of the team.
         * @param {string} team_id The Invotra UUID of the team.
         * @param {string} user_id The Invotra UUID of the user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsTeamIdMembershipsUserIdDelete(team_id: string, user_id: string, options?: any): AxiosPromise<void> {
            return TeamsApiFp(configuration).teamsTeamIdMembershipsUserIdDelete(team_id, user_id, options)(axios, basePath);
        },
        /**
         * Update information about a user\'s team membership.
         * @param {string} team_id The Invotra UUID of the team.
         * @param {string} user_id The Invotra UUID of the user.
         * @param {TeamMembershipCommonSchema} TeamMembershipCommonSchema 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsTeamIdMembershipsUserIdPut(team_id: string, user_id: string, TeamMembershipCommonSchema: TeamMembershipCommonSchema, options?: any): AxiosPromise<void> {
            return TeamsApiFp(configuration).teamsTeamIdMembershipsUserIdPut(team_id, user_id, TeamMembershipCommonSchema, options)(axios, basePath);
        },
        /**
         * Update team information.
         * @param {string} team_id The Invotra UUID of the team.
         * @param {TeamSchema} TeamSchema 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsTeamIdPut(team_id: string, TeamSchema: TeamSchema, options?: any): AxiosPromise<void> {
            return TeamsApiFp(configuration).teamsTeamIdPut(team_id, TeamSchema, options)(axios, basePath);
        },
    };
};

/**
 * TeamsApi - interface
 * @export
 * @interface TeamsApi
 */
export interface TeamsApiInterface {
    /**
     * Search for teams. An empty array is returned if no teams are found.
     * @param {string} external_id Filter by external ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApiInterface
     */
    teamsGet(external_id: string, options?: any): AxiosPromise<UuidListSchema>;

    /**
     * Search for teams. An empty array is returned if no teams are found.
     * @param {string} [label] Filter by label. Matches on whole words.
     * @param {string} [autocomplete] Autocomplete term. Matches on team name, per letter, from the start of the word.
     * @param {string} [users_fulltext_search] Filter the list of teams to those that include users matching a search term. This is useful when you have already searched for users and want to refine your search by team (like a faceted search). Like the fulltext_search parameter of /users/search, this matches on whole words.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {number} [limit] The numbers of items to return.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApiInterface
     */
    teamsListGet(label?: string, autocomplete?: string, users_fulltext_search?: string, offset?: number, limit?: number, options?: any): AxiosPromise<InlineResponse200>;

    /**
     * Provision a new team.
     * @param {TeamSchemaCreate} TeamSchemaCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApiInterface
     */
    teamsPost(TeamSchemaCreate: TeamSchemaCreate, options?: any): AxiosPromise<SuccessfulPostResponseWithMessageSchema>;

    /**
     * Remove team information
     * @param {string} team_id The Invotra UUID of the team.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApiInterface
     */
    teamsTeamIdDelete(team_id: string, options?: any): AxiosPromise<void>;

    /**
     * Get information about the team.
     * @param {string} team_id The Invotra UUID of the team.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApiInterface
     */
    teamsTeamIdGet(team_id: string, options?: any): AxiosPromise<TeamSchema>;

    /**
     * Get a list of team members.
     * @param {string} team_id The Invotra UUID of the team.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {number} [limit] The numbers of items to return.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApiInterface
     */
    teamsTeamIdMembershipsGet(team_id: string, offset?: number, limit?: number, options?: any): AxiosPromise<InlineResponse2001>;

    /**
     * Remove the user\'s membership of the team.
     * @param {string} team_id The Invotra UUID of the team.
     * @param {string} user_id The Invotra UUID of the user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApiInterface
     */
    teamsTeamIdMembershipsUserIdDelete(team_id: string, user_id: string, options?: any): AxiosPromise<void>;

    /**
     * Update information about a user\'s team membership.
     * @param {string} team_id The Invotra UUID of the team.
     * @param {string} user_id The Invotra UUID of the user.
     * @param {TeamMembershipCommonSchema} TeamMembershipCommonSchema 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApiInterface
     */
    teamsTeamIdMembershipsUserIdPut(team_id: string, user_id: string, TeamMembershipCommonSchema: TeamMembershipCommonSchema, options?: any): AxiosPromise<void>;

    /**
     * Update team information.
     * @param {string} team_id The Invotra UUID of the team.
     * @param {TeamSchema} TeamSchema 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApiInterface
     */
    teamsTeamIdPut(team_id: string, TeamSchema: TeamSchema, options?: any): AxiosPromise<void>;

}

/**
 * TeamsApi - object-oriented interface
 * @export
 * @class TeamsApi
 * @extends {BaseAPI}
 */
export class TeamsApi extends BaseAPI implements TeamsApiInterface {
    /**
     * Search for teams. An empty array is returned if no teams are found.
     * @param {string} external_id Filter by external ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public teamsGet(external_id: string, options?: any) {
        return TeamsApiFp(this.configuration).teamsGet(external_id, options)(this.axios, this.basePath);
    }

    /**
     * Search for teams. An empty array is returned if no teams are found.
     * @param {string} [label] Filter by label. Matches on whole words.
     * @param {string} [autocomplete] Autocomplete term. Matches on team name, per letter, from the start of the word.
     * @param {string} [users_fulltext_search] Filter the list of teams to those that include users matching a search term. This is useful when you have already searched for users and want to refine your search by team (like a faceted search). Like the fulltext_search parameter of /users/search, this matches on whole words.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {number} [limit] The numbers of items to return.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public teamsListGet(label?: string, autocomplete?: string, users_fulltext_search?: string, offset?: number, limit?: number, options?: any) {
        return TeamsApiFp(this.configuration).teamsListGet(label, autocomplete, users_fulltext_search, offset, limit, options)(this.axios, this.basePath);
    }

    /**
     * Provision a new team.
     * @param {TeamSchemaCreate} TeamSchemaCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public teamsPost(TeamSchemaCreate: TeamSchemaCreate, options?: any) {
        return TeamsApiFp(this.configuration).teamsPost(TeamSchemaCreate, options)(this.axios, this.basePath);
    }

    /**
     * Remove team information
     * @param {string} team_id The Invotra UUID of the team.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public teamsTeamIdDelete(team_id: string, options?: any) {
        return TeamsApiFp(this.configuration).teamsTeamIdDelete(team_id, options)(this.axios, this.basePath);
    }

    /**
     * Get information about the team.
     * @param {string} team_id The Invotra UUID of the team.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public teamsTeamIdGet(team_id: string, options?: any) {
        return TeamsApiFp(this.configuration).teamsTeamIdGet(team_id, options)(this.axios, this.basePath);
    }

    /**
     * Get a list of team members.
     * @param {string} team_id The Invotra UUID of the team.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {number} [limit] The numbers of items to return.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public teamsTeamIdMembershipsGet(team_id: string, offset?: number, limit?: number, options?: any) {
        return TeamsApiFp(this.configuration).teamsTeamIdMembershipsGet(team_id, offset, limit, options)(this.axios, this.basePath);
    }

    /**
     * Remove the user\'s membership of the team.
     * @param {string} team_id The Invotra UUID of the team.
     * @param {string} user_id The Invotra UUID of the user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public teamsTeamIdMembershipsUserIdDelete(team_id: string, user_id: string, options?: any) {
        return TeamsApiFp(this.configuration).teamsTeamIdMembershipsUserIdDelete(team_id, user_id, options)(this.axios, this.basePath);
    }

    /**
     * Update information about a user\'s team membership.
     * @param {string} team_id The Invotra UUID of the team.
     * @param {string} user_id The Invotra UUID of the user.
     * @param {TeamMembershipCommonSchema} TeamMembershipCommonSchema 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public teamsTeamIdMembershipsUserIdPut(team_id: string, user_id: string, TeamMembershipCommonSchema: TeamMembershipCommonSchema, options?: any) {
        return TeamsApiFp(this.configuration).teamsTeamIdMembershipsUserIdPut(team_id, user_id, TeamMembershipCommonSchema, options)(this.axios, this.basePath);
    }

    /**
     * Update team information.
     * @param {string} team_id The Invotra UUID of the team.
     * @param {TeamSchema} TeamSchema 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public teamsTeamIdPut(team_id: string, TeamSchema: TeamSchema, options?: any) {
        return TeamsApiFp(this.configuration).teamsTeamIdPut(team_id, TeamSchema, options)(this.axios, this.basePath);
    }

}
